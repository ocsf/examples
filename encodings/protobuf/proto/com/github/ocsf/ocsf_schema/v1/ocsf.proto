// -*-protobuf-*-
//
// this is a protobuf representation of the
// OSF schema 'ocsf' at version 1.2.0

syntax = "proto3";
package com.github.ocsf.ocsf_schema.v1;

option go_package = "github.com/ocsf/examples/sdk/go/pb";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

// FileActivity is an OSF event in category "System Activity"
// called File System Activity
// defined in ocsf events/system/filesystem.json
//
// File System Activity events report when a process performs an action on a
// file or folder.
message FileActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN        = 0; 
        ACTIVITY_ID_CREATE         = 1;  // A request to create a new file on a file
                                         // system.
        ACTIVITY_ID_READ           = 2;  // A request to read data from a file on a file
                                         // system.
        ACTIVITY_ID_UPDATE         = 3;  // A request to write data to a file on a file
                                         // system.
        ACTIVITY_ID_DELETE         = 4;  // A request to delete a file on a file system.
        ACTIVITY_ID_RENAME         = 5;  // A request to rename a file on a file system.
        ACTIVITY_ID_SET_ATTRIBUTES = 6;  // A request to set attributes for a file on a
                                         // file system.
        ACTIVITY_ID_SET_SECURITY   = 7;  // A request to set security for a file on a file
                                         // system.
        ACTIVITY_ID_GET_ATTRIBUTES = 8;  // A request to get attributes for a file on a
                                         // file system.
        ACTIVITY_ID_GET_SECURITY   = 9;  // A request to get security for a file on a file
                                         // system.
        ACTIVITY_ID_ENCRYPT        = 10; // A request to encrypt a file on a file system.
        ACTIVITY_ID_DECRYPT        = 11; // A request to decrypt a file on a file system.
        ACTIVITY_ID_MOUNT          = 12; // A request to mount a file on a file system.
        ACTIVITY_ID_UNMOUNT        = 13; // A request to unmount a file from a file
                                         // system.
        ACTIVITY_ID_OPEN           = 14; // A request to create a file handle.
        ACTIVITY_ID_OTHER          = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN         = 0;
        CATEGORY_UID_SYSTEM_ACTIVITY = 1;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN              = 0;   
        CLASS_UID_FILE_SYSTEM_ACTIVITY = 1001;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional int32 access_mask = 1;
    optional string action = 2;
    ActionId action_id = 3;
    ActivityId activity_id = 4;
    optional string activity_name = 5;
    Actor actor = 6;
    Api api = 7;
    repeated Attack attacks = 8;
    repeated Authorization authorizations = 9;
    optional string category_name = 10;
    CategoryUid category_uid = 11;
    optional string class_name = 12;
    ClassUid class_uid = 13;
    Cloud cloud = 14;
    optional string component = 15;
    optional string connection_uid = 16;
    optional int32 count = 17;
    optional string create_mask = 18;
    Device device = 19;
    optional string disposition = 20;
    optional DispositionId disposition_id = 21;
    optional int32 duration = 22;
    optional int64 end_time = 23;
    optional google.protobuf.Timestamp end_time_dt = 24;
    repeated Enrichment enrichments = 25;
    File file = 26;
    optional string file_diff = 27;
    File file_result = 28;
    FirewallRule firewall_rule = 29;
    repeated Malware malware = 30;
    optional string message = 31;
    Metadata metadata = 32;
    repeated Observable observables = 33;
    optional string raw_data = 34;
    optional string severity = 35;
    SeverityId severity_id = 36;
    optional int64 start_time = 37;
    optional google.protobuf.Timestamp start_time_dt = 38;
    optional string status = 39;
    optional string status_code = 40;
    optional string status_detail = 41;
    optional StatusId status_id = 42;
    int64 time = 43;
    google.protobuf.Timestamp time_dt = 44;
    optional int32 timezone_offset = 45;
    optional string type_name = 46;
    int64 type_uid = 47;
    google.protobuf.Struct unmapped = 48;
}

// RegistryKeyActivity is an OSF event in category "System Activity"
// called Registry Key Activity
// defined in win events/registry_key.json
//
// Registry Key Activity events report when a process performs an action on a
// Windows registry key.
message RegistryKeyActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN      = 0; 
        ACTIVITY_ID_CREATE       = 1; 
        ACTIVITY_ID_READ         = 2; 
        ACTIVITY_ID_MODIFY       = 3; 
        ACTIVITY_ID_DELETE       = 4; 
        ACTIVITY_ID_RENAME       = 5; 
        ACTIVITY_ID_SET_SECURITY = 6; 
        ACTIVITY_ID_RESTORE      = 7; 
        ACTIVITY_ID_IMPORT       = 8; 
        ACTIVITY_ID_EXPORT       = 9; 
        ACTIVITY_ID_OTHER        = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN         = 0;
        CATEGORY_UID_SYSTEM_ACTIVITY = 1;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN               = 0;     
        CLASS_UID_REGISTRY_KEY_ACTIVITY = 201001;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional int32 access_mask = 1;
    optional string action = 2;
    ActionId action_id = 3;
    ActivityId activity_id = 4;
    optional string activity_name = 5;
    Actor actor = 6;
    Api api = 7;
    repeated Attack attacks = 8;
    repeated Authorization authorizations = 9;
    optional string category_name = 10;
    CategoryUid category_uid = 11;
    optional string class_name = 12;
    ClassUid class_uid = 13;
    Cloud cloud = 14;
    optional int32 count = 15;
    optional string create_mask = 16;
    Device device = 17;
    optional string disposition = 18;
    optional DispositionId disposition_id = 19;
    optional int32 duration = 20;
    optional int64 end_time = 21;
    optional google.protobuf.Timestamp end_time_dt = 22;
    repeated Enrichment enrichments = 23;
    FirewallRule firewall_rule = 24;
    repeated Malware malware = 25;
    optional string message = 26;
    Metadata metadata = 27;
    repeated Observable observables = 28;
    optional int32 open_mask = 29;
    optional string raw_data = 30;
    optional string severity = 31;
    SeverityId severity_id = 32;
    optional int64 start_time = 33;
    optional google.protobuf.Timestamp start_time_dt = 34;
    optional string status = 35;
    optional string status_code = 36;
    optional string status_detail = 37;
    optional StatusId status_id = 38;
    int64 time = 39;
    google.protobuf.Timestamp time_dt = 40;
    optional int32 timezone_offset = 41;
    optional string type_name = 42;
    int64 type_uid = 43;
    google.protobuf.Struct unmapped = 44;
    RegKey prev_reg_key = 2001;
    RegKey reg_key = 2002;
}

// RegistryValueActivity is an OSF event in category "System Activity"
// called Registry Value Activity
// defined in win events/registry_value.json
//
// Registry Value Activity events reports when a process performs an action on
// a Windows registry value.
message RegistryValueActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_GET     = 1; 
        ACTIVITY_ID_SET     = 2; 
        ACTIVITY_ID_MODIFY  = 3; 
        ACTIVITY_ID_DELETE  = 4; 
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN         = 0;
        CATEGORY_UID_SYSTEM_ACTIVITY = 1;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN                 = 0;     
        CLASS_UID_REGISTRY_VALUE_ACTIVITY = 201002;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    repeated Attack attacks = 7;
    repeated Authorization authorizations = 8;
    optional string category_name = 9;
    CategoryUid category_uid = 10;
    optional string class_name = 11;
    ClassUid class_uid = 12;
    Cloud cloud = 13;
    optional int32 count = 14;
    Device device = 15;
    optional string disposition = 16;
    optional DispositionId disposition_id = 17;
    optional int32 duration = 18;
    optional int64 end_time = 19;
    optional google.protobuf.Timestamp end_time_dt = 20;
    repeated Enrichment enrichments = 21;
    FirewallRule firewall_rule = 22;
    repeated Malware malware = 23;
    optional string message = 24;
    Metadata metadata = 25;
    repeated Observable observables = 26;
    optional string raw_data = 27;
    optional string severity = 28;
    SeverityId severity_id = 29;
    optional int64 start_time = 30;
    optional google.protobuf.Timestamp start_time_dt = 31;
    optional string status = 32;
    optional string status_code = 33;
    optional string status_detail = 34;
    optional StatusId status_id = 35;
    int64 time = 36;
    google.protobuf.Timestamp time_dt = 37;
    optional int32 timezone_offset = 38;
    optional string type_name = 39;
    int64 type_uid = 40;
    google.protobuf.Struct unmapped = 41;
    RegValue prev_reg_value = 2001;
    RegValue reg_value = 2002;
}

// KernelExtension is an OSF event in category "System Activity"
// called Kernel Extension Activity
// defined in ocsf events/system/kernel_extension.json
//
// Kernel Extension events report when a driver/extension is loaded or
// unloaded into the kernel
message KernelExtension {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_LOAD    = 1;  // A driver/extension was loaded into the kernel
        ACTIVITY_ID_UNLOAD  = 2;  // A driver/extension was unloaded (removed) from the
                                  // kernel
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN         = 0;
        CATEGORY_UID_SYSTEM_ACTIVITY = 1;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN                   = 0;   
        CLASS_UID_KERNEL_EXTENSION_ACTIVITY = 1002;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    repeated Attack attacks = 7;
    repeated Authorization authorizations = 8;
    optional string category_name = 9;
    CategoryUid category_uid = 10;
    optional string class_name = 11;
    ClassUid class_uid = 12;
    Cloud cloud = 13;
    optional int32 count = 14;
    Device device = 15;
    optional string disposition = 16;
    optional DispositionId disposition_id = 17;
    KernelDriver driver = 18;
    optional int32 duration = 19;
    optional int64 end_time = 20;
    optional google.protobuf.Timestamp end_time_dt = 21;
    repeated Enrichment enrichments = 22;
    FirewallRule firewall_rule = 23;
    repeated Malware malware = 24;
    optional string message = 25;
    Metadata metadata = 26;
    repeated Observable observables = 27;
    optional string raw_data = 28;
    optional string severity = 29;
    SeverityId severity_id = 30;
    optional int64 start_time = 31;
    optional google.protobuf.Timestamp start_time_dt = 32;
    optional string status = 33;
    optional string status_code = 34;
    optional string status_detail = 35;
    optional StatusId status_id = 36;
    int64 time = 37;
    google.protobuf.Timestamp time_dt = 38;
    optional int32 timezone_offset = 39;
    optional string type_name = 40;
    int64 type_uid = 41;
    google.protobuf.Struct unmapped = 42;
}

// KernelActivity is an OSF event in category "System Activity"
// called Kernel Activity
// defined in ocsf events/system/kernel.json
//
// Kernel Activity events report when an process creates, reads, or deletes a
// kernel resource.
message KernelActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_CREATE  = 1; 
        ACTIVITY_ID_READ    = 2; 
        ACTIVITY_ID_DELETE  = 3; 
        ACTIVITY_ID_INVOKE  = 4; 
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN         = 0;
        CATEGORY_UID_SYSTEM_ACTIVITY = 1;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN         = 0;   
        CLASS_UID_KERNEL_ACTIVITY = 1003;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    repeated Attack attacks = 7;
    repeated Authorization authorizations = 8;
    optional string category_name = 9;
    CategoryUid category_uid = 10;
    optional string class_name = 11;
    ClassUid class_uid = 12;
    Cloud cloud = 13;
    optional int32 count = 14;
    Device device = 15;
    optional string disposition = 16;
    optional DispositionId disposition_id = 17;
    optional int32 duration = 18;
    optional int64 end_time = 19;
    optional google.protobuf.Timestamp end_time_dt = 20;
    repeated Enrichment enrichments = 21;
    FirewallRule firewall_rule = 22;
    Kernel kernel = 23;
    repeated Malware malware = 24;
    optional string message = 25;
    Metadata metadata = 26;
    repeated Observable observables = 27;
    optional string raw_data = 28;
    optional string severity = 29;
    SeverityId severity_id = 30;
    optional int64 start_time = 31;
    optional google.protobuf.Timestamp start_time_dt = 32;
    optional string status = 33;
    optional string status_code = 34;
    optional string status_detail = 35;
    optional StatusId status_id = 36;
    int64 time = 37;
    google.protobuf.Timestamp time_dt = 38;
    optional int32 timezone_offset = 39;
    optional string type_name = 40;
    int64 type_uid = 41;
    google.protobuf.Struct unmapped = 42;
}

// ResourceActivity is an OSF event in category "System Activity"
// called Windows Resource Activity
// defined in win events/resource.json
//
// Windows Resource Activity events report when a process accesses a Windows
// managed resource object, successful or otherwise.
message ResourceActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_ACCESS  = 1; 
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN         = 0;
        CATEGORY_UID_SYSTEM_ACTIVITY = 1;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN                   = 0;     
        CLASS_UID_WINDOWS_RESOURCE_ACTIVITY = 201003;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    repeated Attack attacks = 7;
    repeated Authorization authorizations = 8;
    optional string category_name = 9;
    CategoryUid category_uid = 10;
    optional string class_name = 11;
    ClassUid class_uid = 12;
    Cloud cloud = 13;
    optional int32 count = 14;
    Device device = 15;
    optional string disposition = 16;
    optional DispositionId disposition_id = 17;
    optional int32 duration = 18;
    optional int64 end_time = 19;
    optional google.protobuf.Timestamp end_time_dt = 20;
    repeated Enrichment enrichments = 21;
    FirewallRule firewall_rule = 22;
    repeated Malware malware = 23;
    optional string message = 24;
    Metadata metadata = 25;
    repeated Observable observables = 26;
    optional string raw_data = 27;
    optional string severity = 28;
    SeverityId severity_id = 29;
    optional int64 start_time = 30;
    optional google.protobuf.Timestamp start_time_dt = 31;
    optional string status = 32;
    optional string status_code = 33;
    optional string status_detail = 34;
    optional StatusId status_id = 35;
    int64 time = 36;
    google.protobuf.Timestamp time_dt = 37;
    optional int32 timezone_offset = 38;
    optional string type_name = 39;
    int64 type_uid = 40;
    google.protobuf.Struct unmapped = 41;
    WinResource win_resource = 2001;
}

// MemoryActivity is an OSF event in category "System Activity"
// called Memory Activity
// defined in ocsf events/system/memory.json
//
// Memory Activity events report when a process has memory allocated,
// read/modified, or other manipulation activities - such as a buffer overflow
// or turning off data execution protection (DEP).
message MemoryActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN         = 0; 
        ACTIVITY_ID_ALLOCATE_PAGE   = 1; 
        ACTIVITY_ID_MODIFY_PAGE     = 2; 
        ACTIVITY_ID_DELETE_PAGE     = 3; 
        ACTIVITY_ID_BUFFER_OVERFLOW = 4; 
        ACTIVITY_ID_DISABLE_DEP     = 5;  // Data Execution Permission
        ACTIVITY_ID_ENABLE_DEP      = 6;  // Data Execution Permission
        ACTIVITY_ID_READ            = 7;  // Read (Example:
                                          // <code>ReadProcessMemory</code>)
        ACTIVITY_ID_WRITE           = 8;  // Write (Example:
                                          // <code>WriteProcessMemory</code>)
        ACTIVITY_ID_OTHER           = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN         = 0;
        CATEGORY_UID_SYSTEM_ACTIVITY = 1;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN         = 0;   
        CLASS_UID_MEMORY_ACTIVITY = 1004;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    optional int32 actual_permissions = 6;
    Api api = 7;
    repeated Attack attacks = 8;
    repeated Authorization authorizations = 9;
    optional string base_address = 10;
    optional string category_name = 11;
    CategoryUid category_uid = 12;
    optional string class_name = 13;
    ClassUid class_uid = 14;
    Cloud cloud = 15;
    optional int32 count = 16;
    Device device = 17;
    optional string disposition = 18;
    optional DispositionId disposition_id = 19;
    optional int32 duration = 20;
    optional int64 end_time = 21;
    optional google.protobuf.Timestamp end_time_dt = 22;
    repeated Enrichment enrichments = 23;
    FirewallRule firewall_rule = 24;
    repeated Malware malware = 25;
    optional string message = 26;
    Metadata metadata = 27;
    repeated Observable observables = 28;
    Process process = 29;
    optional string raw_data = 30;
    optional int32 requested_permissions = 31;
    optional string severity = 32;
    SeverityId severity_id = 33;
    optional int64 size = 34;
    optional int64 start_time = 35;
    optional google.protobuf.Timestamp start_time_dt = 36;
    optional string status = 37;
    optional string status_code = 38;
    optional string status_detail = 39;
    optional StatusId status_id = 40;
    int64 time = 41;
    google.protobuf.Timestamp time_dt = 42;
    optional int32 timezone_offset = 43;
    optional string type_name = 44;
    int64 type_uid = 45;
    google.protobuf.Struct unmapped = 46;
}

// ModuleActivity is an OSF event in category "System Activity"
// called Module Activity
// defined in ocsf events/system/module.json
//
// Module  Activity events report when a process loads or unloads the
// <code>module</code>.
message ModuleActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_LOAD    = 1; 
        ACTIVITY_ID_UNLOAD  = 2; 
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN         = 0;
        CATEGORY_UID_SYSTEM_ACTIVITY = 1;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN         = 0;   
        CLASS_UID_MODULE_ACTIVITY = 1005;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    repeated Attack attacks = 7;
    repeated Authorization authorizations = 8;
    optional string category_name = 9;
    CategoryUid category_uid = 10;
    optional string class_name = 11;
    ClassUid class_uid = 12;
    Cloud cloud = 13;
    optional int32 count = 14;
    Device device = 15;
    optional string disposition = 16;
    optional DispositionId disposition_id = 17;
    optional int32 duration = 18;
    optional int64 end_time = 19;
    optional google.protobuf.Timestamp end_time_dt = 20;
    repeated Enrichment enrichments = 21;
    FirewallRule firewall_rule = 22;
    repeated Malware malware = 23;
    optional string message = 24;
    Metadata metadata = 25;
    Module module = 26;
    repeated Observable observables = 27;
    optional string raw_data = 28;
    optional string severity = 29;
    SeverityId severity_id = 30;
    optional int64 start_time = 31;
    optional google.protobuf.Timestamp start_time_dt = 32;
    optional string status = 33;
    optional string status_code = 34;
    optional string status_detail = 35;
    optional StatusId status_id = 36;
    int64 time = 37;
    google.protobuf.Timestamp time_dt = 38;
    optional int32 timezone_offset = 39;
    optional string type_name = 40;
    int64 type_uid = 41;
    google.protobuf.Struct unmapped = 42;
}

// ScheduledJobActivity is an OSF event in category "System Activity"
// called Scheduled Job Activity
// defined in ocsf events/system/scheduled_job.json
//
// Scheduled Job Activity events report activities related to scheduled jobs
// or tasks.
message ScheduledJobActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_CREATE  = 1; 
        ACTIVITY_ID_UPDATE  = 2; 
        ACTIVITY_ID_DELETE  = 3; 
        ACTIVITY_ID_ENABLE  = 4; 
        ACTIVITY_ID_DISABLE = 5; 
        ACTIVITY_ID_START   = 6; 
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN         = 0;
        CATEGORY_UID_SYSTEM_ACTIVITY = 1;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN                = 0;   
        CLASS_UID_SCHEDULED_JOB_ACTIVITY = 1006;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    repeated Attack attacks = 7;
    repeated Authorization authorizations = 8;
    optional string category_name = 9;
    CategoryUid category_uid = 10;
    optional string class_name = 11;
    ClassUid class_uid = 12;
    Cloud cloud = 13;
    optional int32 count = 14;
    Device device = 15;
    optional string disposition = 16;
    optional DispositionId disposition_id = 17;
    optional int32 duration = 18;
    optional int64 end_time = 19;
    optional google.protobuf.Timestamp end_time_dt = 20;
    repeated Enrichment enrichments = 21;
    FirewallRule firewall_rule = 22;
    Job job = 23;
    repeated Malware malware = 24;
    optional string message = 25;
    Metadata metadata = 26;
    repeated Observable observables = 27;
    optional string raw_data = 28;
    optional string severity = 29;
    SeverityId severity_id = 30;
    optional int64 start_time = 31;
    optional google.protobuf.Timestamp start_time_dt = 32;
    optional string status = 33;
    optional string status_code = 34;
    optional string status_detail = 35;
    optional StatusId status_id = 36;
    int64 time = 37;
    google.protobuf.Timestamp time_dt = 38;
    optional int32 timezone_offset = 39;
    optional string type_name = 40;
    int64 type_uid = 41;
    google.protobuf.Struct unmapped = 42;
}

// ProcessActivity is an OSF event in category "System Activity"
// called Process Activity
// defined in ocsf events/system/process.json
//
// Process Activity events report when a process launches, injects, opens or
// terminates another process, successful or otherwise.
message ProcessActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN     = 0; 
        ACTIVITY_ID_LAUNCH      = 1; 
        ACTIVITY_ID_TERMINATE   = 2; 
        ACTIVITY_ID_OPEN        = 3; 
        ACTIVITY_ID_INJECT      = 4; 
        ACTIVITY_ID_SET_USER_ID = 5; 
        ACTIVITY_ID_OTHER       = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN         = 0;
        CATEGORY_UID_SYSTEM_ACTIVITY = 1;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN          = 0;   
        CLASS_UID_PROCESS_ACTIVITY = 1007;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum InjectionTypeId {
        INJECTION_TYPE_ID_UNKNOWN       = 0;  // The injection type is unknown.
        INJECTION_TYPE_ID_REMOTE_THREAD = 1; 
        INJECTION_TYPE_ID_LOAD_LIBRARY  = 2; 
        INJECTION_TYPE_ID_OTHER         = 99; // The injection type is not mapped. See the
                                              // <code>injection_type</code> attribute,
                                              // which contains a data source specific
                                              // value.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    optional int32 actual_permissions = 6;
    Api api = 7;
    repeated Attack attacks = 8;
    repeated Authorization authorizations = 9;
    optional string category_name = 10;
    CategoryUid category_uid = 11;
    optional string class_name = 12;
    ClassUid class_uid = 13;
    Cloud cloud = 14;
    optional int32 count = 15;
    Device device = 16;
    optional string disposition = 17;
    optional DispositionId disposition_id = 18;
    optional int32 duration = 19;
    optional int64 end_time = 20;
    optional google.protobuf.Timestamp end_time_dt = 21;
    repeated Enrichment enrichments = 22;
    optional int32 exit_code = 23;
    FirewallRule firewall_rule = 24;
    optional string injection_type = 25;
    optional InjectionTypeId injection_type_id = 26;
    repeated Malware malware = 27;
    optional string message = 28;
    Metadata metadata = 29;
    Module module = 30;
    repeated Observable observables = 31;
    Process process = 32;
    optional string raw_data = 33;
    optional int32 requested_permissions = 34;
    optional string severity = 35;
    SeverityId severity_id = 36;
    optional int64 start_time = 37;
    optional google.protobuf.Timestamp start_time_dt = 38;
    optional string status = 39;
    optional string status_code = 40;
    optional string status_detail = 41;
    optional StatusId status_id = 42;
    int64 time = 43;
    google.protobuf.Timestamp time_dt = 44;
    optional int32 timezone_offset = 45;
    optional string type_name = 46;
    int64 type_uid = 47;
    google.protobuf.Struct unmapped = 48;
}

// SecurityFinding is an OSF event in category "Findings"
// called Security Finding
// defined in ocsf events/findings/security_finding.json
//
// Security Finding events describe findings, detections, anomalies, alerts
// and/or actions performed by security products
message SecurityFinding {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_CREATE  = 1;  // A security finding was created.
        ACTIVITY_ID_UPDATE  = 2;  // A security finding was updated.
        ACTIVITY_ID_CLOSE   = 3;  // A security finding was closed.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN  = 0;
        CATEGORY_UID_FINDINGS = 2;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN          = 0;   
        CLASS_UID_SECURITY_FINDING = 2001;
    }
    enum ConfidenceId {
        CONFIDENCE_ID_UNKNOWN = 0;  // The normalized confidence is unknown.
        CONFIDENCE_ID_LOW     = 1; 
        CONFIDENCE_ID_MEDIUM  = 2; 
        CONFIDENCE_ID_HIGH    = 3; 
        CONFIDENCE_ID_OTHER   = 99; // The confidence is not mapped to the defined enum
                                    // values. See the <code>confidence</code> attribute,
                                    // which contains a data source specific value.
    }
    enum ImpactId {
        IMPACT_ID_UNKNOWN  = 0;  // The normalized impact is unknown.
        IMPACT_ID_LOW      = 1; 
        IMPACT_ID_MEDIUM   = 2; 
        IMPACT_ID_HIGH     = 3; 
        IMPACT_ID_CRITICAL = 4; 
        IMPACT_ID_OTHER    = 99; // The impact is not mapped. See the <code>impact</code>
                                 // attribute, which contains a data source specific
                                 // value.
    }
    enum RiskLevelId {
        RISK_LEVEL_ID_INFO     = 0;
        RISK_LEVEL_ID_LOW      = 1;
        RISK_LEVEL_ID_MEDIUM   = 2;
        RISK_LEVEL_ID_HIGH     = 3;
        RISK_LEVEL_ID_CRITICAL = 4;
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StateId {
        STATE_ID_UNKNOWN     = 0;  // The state is unknown.
        STATE_ID_NEW         = 1;  // The finding is new and yet to be reviewed.
        STATE_ID_IN_PROGRESS = 2;  // The finding is under review.
        STATE_ID_SUPPRESSED  = 3;  // The finding was reviewed, considered as a false
                                   // positive and is now suppressed.
        STATE_ID_RESOLVED    = 4;  // The finding was reviewed and remediated and is now
                                   // considered resolved.
        STATE_ID_OTHER       = 99; // The state is not mapped. See the <code>state</code>
                                   // attribute, which contains a data source specific
                                   // value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Analytic analytic = 3;
    Api api = 4;
    repeated Attack attacks = 5;
    optional string category_name = 6;
    CategoryUid category_uid = 7;
    repeated CisCsc cis_csc = 8;
    optional string class_name = 9;
    ClassUid class_uid = 10;
    Cloud cloud = 11;
    Compliance compliance = 12;
    optional string confidence = 13;
    optional ConfidenceId confidence_id = 14;
    optional int32 confidence_score = 15;
    optional int32 count = 16;
    repeated string data_sources = 17;
    optional int32 duration = 18;
    optional int64 end_time = 19;
    optional google.protobuf.Timestamp end_time_dt = 20;
    repeated Enrichment enrichments = 21;
    optional google.protobuf.Value evidence = 22;
    Finding finding = 23;
    optional string impact = 24;
    optional ImpactId impact_id = 25;
    optional int32 impact_score = 26;
    repeated KillChainPhase kill_chain = 27;
    repeated Malware malware = 28;
    optional string message = 29;
    Metadata metadata = 30;
    repeated string nist = 31;
    repeated Observable observables = 32;
    Process process = 33;
    optional string raw_data = 34;
    repeated ResourceDetails resources = 35;
    optional string risk_level = 36;
    optional RiskLevelId risk_level_id = 37;
    optional int32 risk_score = 38;
    optional string severity = 39;
    SeverityId severity_id = 40;
    optional int64 start_time = 41;
    optional google.protobuf.Timestamp start_time_dt = 42;
    optional string state = 43;
    StateId state_id = 44;
    optional string status = 45;
    optional string status_code = 46;
    optional string status_detail = 47;
    optional StatusId status_id = 48;
    int64 time = 49;
    google.protobuf.Timestamp time_dt = 50;
    optional int32 timezone_offset = 51;
    optional string type_name = 52;
    int64 type_uid = 53;
    google.protobuf.Struct unmapped = 54;
    repeated Vulnerability vulnerabilities = 55;
}

// VulnerabilityFinding is an OSF event in category "Findings"
// called Vulnerability Finding
// defined in ocsf events/findings/vulnerability_finding.json
//
// The Vulnerability Finding event is a notification about weakness in an
// information system, system security procedures, internal controls, or
// implementation that could be exploited or triggered by a threat source.
message VulnerabilityFinding {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_CREATE  = 1;  // A finding was created.
        ACTIVITY_ID_UPDATE  = 2;  // A finding was updated.
        ACTIVITY_ID_CLOSE   = 3;  // A finding was closed.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN  = 0;
        CATEGORY_UID_FINDINGS = 2;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN               = 0;   
        CLASS_UID_VULNERABILITY_FINDING = 2002;
    }
    enum ConfidenceId {
        CONFIDENCE_ID_UNKNOWN = 0;  // The normalized confidence is unknown.
        CONFIDENCE_ID_LOW     = 1; 
        CONFIDENCE_ID_MEDIUM  = 2; 
        CONFIDENCE_ID_HIGH    = 3; 
        CONFIDENCE_ID_OTHER   = 99; // The confidence is not mapped to the defined enum
                                    // values. See the <code>confidence</code> attribute,
                                    // which contains a data source specific value.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN     = 0;  // The status is unknown.
        STATUS_ID_NEW         = 1;  // The Finding is new and yet to be reviewed.
        STATUS_ID_IN_PROGRESS = 2;  // The Finding is under review.
        STATUS_ID_SUPPRESSED  = 3;  // The Finding was reviewed, determined to be benign
                                    // or a false positive and is now suppressed.
        STATUS_ID_RESOLVED    = 4;  // The Finding was reviewed, remediated and is now
                                    // considered resolved.
        STATUS_ID_OTHER       = 99; // The event status is not mapped. See the
                                    // <code>status</code> attribute, which contains a
                                    // data source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional string comment = 10;
    optional string confidence = 11;
    optional ConfidenceId confidence_id = 12;
    optional int32 confidence_score = 13;
    optional int32 count = 14;
    Device device = 15;
    optional int32 duration = 16;
    optional int64 end_time = 17;
    optional google.protobuf.Timestamp end_time_dt = 18;
    repeated Enrichment enrichments = 19;
    FindingInfo finding_info = 20;
    optional string message = 21;
    Metadata metadata = 22;
    repeated Observable observables = 23;
    optional string raw_data = 24;
    ResourceDetails resource = 25;
    optional string severity = 26;
    SeverityId severity_id = 27;
    optional int64 start_time = 28;
    optional google.protobuf.Timestamp start_time_dt = 29;
    optional string status = 30;
    optional string status_code = 31;
    optional string status_detail = 32;
    optional StatusId status_id = 33;
    int64 time = 34;
    google.protobuf.Timestamp time_dt = 35;
    optional int32 timezone_offset = 36;
    optional string type_name = 37;
    int64 type_uid = 38;
    google.protobuf.Struct unmapped = 39;
    repeated Vulnerability vulnerabilities = 40;
}

// ComplianceFinding is an OSF event in category "Findings"
// called Compliance Finding
// defined in ocsf events/findings/compliance_finding.json
//
// Compliance Finding events describe results of evaluations performed against
// resources, to check compliance with various Industry Frameworks or Security
// Standards such as <code>NIST SP 800-53, CIS AWS Foundations Benchmark
// v1.4.0, ISO/IEC 27001</code> etc.
message ComplianceFinding {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_CREATE  = 1;  // A finding was created.
        ACTIVITY_ID_UPDATE  = 2;  // A finding was updated.
        ACTIVITY_ID_CLOSE   = 3;  // A finding was closed.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN  = 0;
        CATEGORY_UID_FINDINGS = 2;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN            = 0;   
        CLASS_UID_COMPLIANCE_FINDING = 2003;
    }
    enum ConfidenceId {
        CONFIDENCE_ID_UNKNOWN = 0;  // The normalized confidence is unknown.
        CONFIDENCE_ID_LOW     = 1; 
        CONFIDENCE_ID_MEDIUM  = 2; 
        CONFIDENCE_ID_HIGH    = 3; 
        CONFIDENCE_ID_OTHER   = 99; // The confidence is not mapped to the defined enum
                                    // values. See the <code>confidence</code> attribute,
                                    // which contains a data source specific value.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN     = 0;  // The status is unknown.
        STATUS_ID_NEW         = 1;  // The Finding is new and yet to be reviewed.
        STATUS_ID_IN_PROGRESS = 2;  // The Finding is under review.
        STATUS_ID_SUPPRESSED  = 3;  // The Finding was reviewed, determined to be benign
                                    // or a false positive and is now suppressed.
        STATUS_ID_RESOLVED    = 4;  // The Finding was reviewed, remediated and is now
                                    // considered resolved.
        STATUS_ID_OTHER       = 99; // The event status is not mapped. See the
                                    // <code>status</code> attribute, which contains a
                                    // data source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional string comment = 10;
    Compliance compliance = 11;
    optional string confidence = 12;
    optional ConfidenceId confidence_id = 13;
    optional int32 confidence_score = 14;
    optional int32 count = 15;
    Device device = 16;
    optional int32 duration = 17;
    optional int64 end_time = 18;
    optional google.protobuf.Timestamp end_time_dt = 19;
    repeated Enrichment enrichments = 20;
    FindingInfo finding_info = 21;
    optional string message = 22;
    Metadata metadata = 23;
    repeated Observable observables = 24;
    optional string raw_data = 25;
    Remediation remediation = 26;
    ResourceDetails resource = 27;
    optional string severity = 28;
    SeverityId severity_id = 29;
    optional int64 start_time = 30;
    optional google.protobuf.Timestamp start_time_dt = 31;
    optional string status = 32;
    optional string status_code = 33;
    optional string status_detail = 34;
    optional StatusId status_id = 35;
    int64 time = 36;
    google.protobuf.Timestamp time_dt = 37;
    optional int32 timezone_offset = 38;
    optional string type_name = 39;
    int64 type_uid = 40;
    google.protobuf.Struct unmapped = 41;
}

// DetectionFinding is an OSF event in category "Findings"
// called Detection Finding
// defined in ocsf events/findings/detection_finding.json
//
// A Detection Finding describes detections or alerts generated by security
// products using correlation engines, detection engines or other
// methodologies. Note: if the product is a security control, the
// <code>security_control</code> profile should be applied and its
// <code>attacks</code> information should be duplicated into the
// <code>finding_info</code> object.
message DetectionFinding {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_CREATE  = 1;  // A finding was created.
        ACTIVITY_ID_UPDATE  = 2;  // A finding was updated.
        ACTIVITY_ID_CLOSE   = 3;  // A finding was closed.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN  = 0;
        CATEGORY_UID_FINDINGS = 2;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN           = 0;   
        CLASS_UID_DETECTION_FINDING = 2004;
    }
    enum ConfidenceId {
        CONFIDENCE_ID_UNKNOWN = 0;  // The normalized confidence is unknown.
        CONFIDENCE_ID_LOW     = 1; 
        CONFIDENCE_ID_MEDIUM  = 2; 
        CONFIDENCE_ID_HIGH    = 3; 
        CONFIDENCE_ID_OTHER   = 99; // The confidence is not mapped to the defined enum
                                    // values. See the <code>confidence</code> attribute,
                                    // which contains a data source specific value.
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum ImpactId {
        IMPACT_ID_UNKNOWN  = 0;  // The normalized impact is unknown.
        IMPACT_ID_LOW      = 1; 
        IMPACT_ID_MEDIUM   = 2; 
        IMPACT_ID_HIGH     = 3; 
        IMPACT_ID_CRITICAL = 4; 
        IMPACT_ID_OTHER    = 99; // The impact is not mapped. See the <code>impact</code>
                                 // attribute, which contains a data source specific
                                 // value.
    }
    enum RiskLevelId {
        RISK_LEVEL_ID_INFO     = 0;
        RISK_LEVEL_ID_LOW      = 1;
        RISK_LEVEL_ID_MEDIUM   = 2;
        RISK_LEVEL_ID_HIGH     = 3;
        RISK_LEVEL_ID_CRITICAL = 4;
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN     = 0;  // The status is unknown.
        STATUS_ID_NEW         = 1;  // The Finding is new and yet to be reviewed.
        STATUS_ID_IN_PROGRESS = 2;  // The Finding is under review.
        STATUS_ID_SUPPRESSED  = 3;  // The Finding was reviewed, determined to be benign
                                    // or a false positive and is now suppressed.
        STATUS_ID_RESOLVED    = 4;  // The Finding was reviewed, remediated and is now
                                    // considered resolved.
        STATUS_ID_OTHER       = 99; // The event status is not mapped. See the
                                    // <code>status</code> attribute, which contains a
                                    // data source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    repeated Attack attacks = 7;
    repeated Authorization authorizations = 8;
    optional string category_name = 9;
    CategoryUid category_uid = 10;
    optional string class_name = 11;
    ClassUid class_uid = 12;
    Cloud cloud = 13;
    optional string comment = 14;
    optional string confidence = 15;
    optional ConfidenceId confidence_id = 16;
    optional int32 confidence_score = 17;
    optional int32 count = 18;
    Device device = 19;
    optional string disposition = 20;
    optional DispositionId disposition_id = 21;
    optional int32 duration = 22;
    optional int64 end_time = 23;
    optional google.protobuf.Timestamp end_time_dt = 24;
    repeated Enrichment enrichments = 25;
    repeated Evidences evidences = 26;
    FindingInfo finding_info = 27;
    FirewallRule firewall_rule = 28;
    optional string impact = 29;
    optional ImpactId impact_id = 30;
    optional int32 impact_score = 31;
    repeated Malware malware = 32;
    optional string message = 33;
    Metadata metadata = 34;
    repeated Observable observables = 35;
    optional string raw_data = 36;
    Remediation remediation = 37;
    repeated ResourceDetails resources = 38;
    optional string risk_details = 39;
    optional string risk_level = 40;
    optional RiskLevelId risk_level_id = 41;
    optional int32 risk_score = 42;
    optional string severity = 43;
    SeverityId severity_id = 44;
    optional int64 start_time = 45;
    optional google.protobuf.Timestamp start_time_dt = 46;
    optional string status = 47;
    optional string status_code = 48;
    optional string status_detail = 49;
    optional StatusId status_id = 50;
    int64 time = 51;
    google.protobuf.Timestamp time_dt = 52;
    optional int32 timezone_offset = 53;
    optional string type_name = 54;
    int64 type_uid = 55;
    google.protobuf.Struct unmapped = 56;
    repeated Vulnerability vulnerabilities = 57;
}

// IncidentFinding is an OSF event in category "Findings"
// called Incident Finding
// defined in ocsf events/findings/incident_finding.json
//
// An Incident Finding reports the creation, update, or closure of security
// incidents as a result of detections and/or analytics.
message IncidentFinding {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_CREATE  = 1;  // Reports the creation of an Incident.
        ACTIVITY_ID_UPDATE  = 2;  // Reports updates to an Incident.
        ACTIVITY_ID_CLOSE   = 3;  // Reports closure of an Incident .
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN  = 0;
        CATEGORY_UID_FINDINGS = 2;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN          = 0;   
        CLASS_UID_INCIDENT_FINDING = 2005;
    }
    enum ConfidenceId {
        CONFIDENCE_ID_UNKNOWN = 0;  // The normalized confidence is unknown.
        CONFIDENCE_ID_LOW     = 1; 
        CONFIDENCE_ID_MEDIUM  = 2; 
        CONFIDENCE_ID_HIGH    = 3; 
        CONFIDENCE_ID_OTHER   = 99; // The confidence is not mapped to the defined enum
                                    // values. See the <code>confidence</code> attribute,
                                    // which contains a data source specific value.
    }
    enum ImpactId {
        IMPACT_ID_UNKNOWN  = 0;  // The normalized impact is unknown.
        IMPACT_ID_LOW      = 1; 
        IMPACT_ID_MEDIUM   = 2; 
        IMPACT_ID_HIGH     = 3; 
        IMPACT_ID_CRITICAL = 4; 
        IMPACT_ID_OTHER    = 99; // The impact is not mapped. See the <code>impact</code>
                                 // attribute, which contains a data source specific
                                 // value.
    }
    enum PriorityId {
        PRIORITY_ID_UNKNOWN  = 0;  // No priority is assigned.
        PRIORITY_ID_LOW      = 1;  // Application or personal procedure is unusable, where
                                   // a workaround is available or a repair is possible.
        PRIORITY_ID_MEDIUM   = 2;  // Non-critical function or procedure is unusable or
                                   // hard to use causing operational disruptions with no
                                   // direct impact on a service's availability. A
                                   // workaround is available.
        PRIORITY_ID_HIGH     = 3;  // Critical functionality or network access is
                                   // interrupted, degraded or unusable, having a severe
                                   // impact on services availability. No acceptable
                                   // alternative is possible.
        PRIORITY_ID_CRITICAL = 4;  // Interruption making a critical functionality
                                   // inaccessible or a complete network interruption
                                   // causing a severe impact on services availability.
                                   // There is no possible alternative.
        PRIORITY_ID_OTHER    = 99; // The priority is not normalized.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN     = 0;  // The status is unknown.
        STATUS_ID_NEW         = 1;  // The service desk has received the incident but has
                                    // not assigned it to an agent.
        STATUS_ID_IN_PROGRESS = 2;  // The incident has been assigned to an agent but has
                                    // not been resolved. The agent is actively working
                                    // with the user to diagnose and resolve the incident.
        STATUS_ID_ON_HOLD     = 3;  // The incident requires some information or response
                                    // from the user or from a third party.
        STATUS_ID_RESOLVED    = 4;  // The service desk has confirmed that the incident is
                                    // resolved.
        STATUS_ID_CLOSED      = 5;  // The incident is resolved and no further action is
                                    // necessary.
        STATUS_ID_OTHER       = 99; // The event status is not mapped. See the
                                    // <code>status</code> attribute, which contains a
                                    // data source specific value.
    }
    enum VerdictId {
        VERDICT_ID_UNKNOWN            = 0;  // The type is unknown.
        VERDICT_ID_FALSE_POSITIVE     = 1;  // The incident is a false positive.
        VERDICT_ID_TRUE_POSITIVE      = 2;  // The incident is a true positive.
        VERDICT_ID_DISREGARD          = 3;  // The incident can be disregarded as it is
                                            // unimportant, an error or accident.
        VERDICT_ID_SUSPICIOUS         = 4;  // The incident is suspicious.
        VERDICT_ID_BENIGN             = 5;  // The incident is benign.
        VERDICT_ID_TEST               = 6;  // The incident is a test.
        VERDICT_ID_INSUFFICIENT_DATA  = 7;  // The incident has insufficient data to make
                                            // a verdict.
        VERDICT_ID_SECURITY_RISK      = 8;  // The incident is a security risk.
        VERDICT_ID_MANAGED_EXTERNALLY = 9;  // The incident remediation or required
                                            // actions are managed externally.
        VERDICT_ID_DUPLICATE          = 10; // The incident is a duplicate.
        VERDICT_ID_OTHER              = 99; // The type is not mapped. See the
                                            // <code>type</code> attribute, which contains
                                            // a data source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Api api = 3;
    User assignee = 4;
    Group assignee_group = 5;
    repeated Attack attacks = 6;
    optional string category_name = 7;
    CategoryUid category_uid = 8;
    optional string class_name = 9;
    ClassUid class_uid = 10;
    Cloud cloud = 11;
    optional string comment = 12;
    optional string confidence = 13;
    optional ConfidenceId confidence_id = 14;
    optional int32 confidence_score = 15;
    optional int32 count = 16;
    optional string desc = 17;
    optional int32 duration = 18;
    optional int64 end_time = 19;
    optional google.protobuf.Timestamp end_time_dt = 20;
    repeated Enrichment enrichments = 21;
    repeated FindingInfo finding_info_list = 22;
    optional string impact = 23;
    optional ImpactId impact_id = 24;
    optional int32 impact_score = 25;
    optional bool is_suspected_breach = 26;
    optional string message = 27;
    Metadata metadata = 28;
    repeated Observable observables = 29;
    optional string priority = 30;
    optional PriorityId priority_id = 31;
    optional string raw_data = 32;
    optional string severity = 33;
    SeverityId severity_id = 34;
    optional string src_url = 35;
    optional int64 start_time = 36;
    optional google.protobuf.Timestamp start_time_dt = 37;
    optional string status = 38;
    optional string status_code = 39;
    optional string status_detail = 40;
    StatusId status_id = 41;
    int64 time = 42;
    google.protobuf.Timestamp time_dt = 43;
    optional int32 timezone_offset = 44;
    optional string type_name = 45;
    int64 type_uid = 46;
    google.protobuf.Struct unmapped = 47;
    optional string verdict = 48;
    optional VerdictId verdict_id = 49;
}

// DataSecurityFinding is an OSF event in category "Findings"
// called Data Security Finding
// defined in ocsf events/findings/data_security_finding.json
//
// A Data Security Finding describes detections or alerts generated by various
// data security products such as Data Loss Prevention (DLP), Data
// Classification, Secrets Management, Digital Rights Management (DRM), Data
// Security Posture Management (DSPM), and similar tools. These detections or
// alerts can be created using fingerprinting, statistical analysis, machine
// learning or other methodologies. The finding describes the actors and
// endpoints who accessed or own the sensitive data, as well as the resources
// which store the sensitive data.
message DataSecurityFinding {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN    = 0; 
        ACTIVITY_ID_CREATE     = 1;  // A new Data Security finding is created.
        ACTIVITY_ID_UPDATE     = 2;  // An existing Data Security finding is updated with
                                     // more information.
        ACTIVITY_ID_CLOSE      = 3;  // An existing Data Security finding is closed, this
                                     // can be due to any resolution (e.g., True Positive,
                                     // False Positive, etc.).
        ACTIVITY_ID_SUPPRESSED = 4;  // An existing Data Security finding is suppressed
                                     // due to inaccurate detection techniques or a known
                                     // true negative.
        ACTIVITY_ID_OTHER      = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN  = 0;
        CATEGORY_UID_FINDINGS = 2;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN               = 0;   
        CLASS_UID_DATA_SECURITY_FINDING = 2006;
    }
    enum ConfidenceId {
        CONFIDENCE_ID_UNKNOWN = 0;  // The normalized confidence is unknown.
        CONFIDENCE_ID_LOW     = 1; 
        CONFIDENCE_ID_MEDIUM  = 2; 
        CONFIDENCE_ID_HIGH    = 3; 
        CONFIDENCE_ID_OTHER   = 99; // The confidence is not mapped to the defined enum
                                    // values. See the <code>confidence</code> attribute,
                                    // which contains a data source specific value.
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum ImpactId {
        IMPACT_ID_UNKNOWN  = 0;  // The normalized impact is unknown.
        IMPACT_ID_LOW      = 1; 
        IMPACT_ID_MEDIUM   = 2; 
        IMPACT_ID_HIGH     = 3; 
        IMPACT_ID_CRITICAL = 4; 
        IMPACT_ID_OTHER    = 99; // The impact is not mapped. See the <code>impact</code>
                                 // attribute, which contains a data source specific
                                 // value.
    }
    enum RiskLevelId {
        RISK_LEVEL_ID_INFO     = 0;
        RISK_LEVEL_ID_LOW      = 1;
        RISK_LEVEL_ID_MEDIUM   = 2;
        RISK_LEVEL_ID_HIGH     = 3;
        RISK_LEVEL_ID_CRITICAL = 4;
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN     = 0;  // The status is unknown.
        STATUS_ID_NEW         = 1;  // The Finding is new and yet to be reviewed.
        STATUS_ID_IN_PROGRESS = 2;  // The Finding is under review.
        STATUS_ID_SUPPRESSED  = 3;  // The Finding was reviewed, determined to be benign
                                    // or a false positive and is now suppressed.
        STATUS_ID_RESOLVED    = 4;  // The Finding was reviewed, remediated and is now
                                    // considered resolved.
        STATUS_ID_OTHER       = 99; // The event status is not mapped. See the
                                    // <code>status</code> attribute, which contains a
                                    // data source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    repeated Attack attacks = 7;
    repeated Authorization authorizations = 8;
    optional string category_name = 9;
    CategoryUid category_uid = 10;
    optional string class_name = 11;
    ClassUid class_uid = 12;
    Cloud cloud = 13;
    optional string comment = 14;
    optional string confidence = 15;
    optional ConfidenceId confidence_id = 16;
    optional int32 confidence_score = 17;
    optional int32 count = 18;
    DataSecurity data_security = 19;
    Database database = 20;
    Databucket databucket = 21;
    Device device = 22;
    optional string disposition = 23;
    optional DispositionId disposition_id = 24;
    NetworkEndpoint dst_endpoint = 25;
    optional int32 duration = 26;
    optional int64 end_time = 27;
    optional google.protobuf.Timestamp end_time_dt = 28;
    repeated Enrichment enrichments = 29;
    File file = 30;
    FindingInfo finding_info = 31;
    FirewallRule firewall_rule = 32;
    optional string impact = 33;
    optional ImpactId impact_id = 34;
    optional int32 impact_score = 35;
    repeated Malware malware = 36;
    optional string message = 37;
    Metadata metadata = 38;
    repeated Observable observables = 39;
    optional string raw_data = 40;
    repeated ResourceDetails resources = 41;
    optional string risk_level = 42;
    optional RiskLevelId risk_level_id = 43;
    optional int32 risk_score = 44;
    optional string severity = 45;
    SeverityId severity_id = 46;
    NetworkEndpoint src_endpoint = 47;
    optional int64 start_time = 48;
    optional google.protobuf.Timestamp start_time_dt = 49;
    optional string status = 50;
    optional string status_code = 51;
    optional string status_detail = 52;
    optional StatusId status_id = 53;
    Table table = 54;
    int64 time = 55;
    google.protobuf.Timestamp time_dt = 56;
    optional int32 timezone_offset = 57;
    optional string type_name = 58;
    int64 type_uid = 59;
    google.protobuf.Struct unmapped = 60;
}

// AccountChange is an OSF event in category "Identity & Access Management"
// called Account Change
// defined in ocsf events/iam/account_change.json
//
// Account Change events report when specific user account management tasks
// are performed, such as a user/role being created, changed, deleted,
// renamed, disabled, enabled, locked out or unlocked.
message AccountChange {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN            = 0; 
        ACTIVITY_ID_CREATE             = 1;  // A user/role was created.
        ACTIVITY_ID_ENABLE             = 2;  // A user/role was enabled.
        ACTIVITY_ID_PASSWORD_CHANGE    = 3;  // An attempt was made to change an account's
                                             // password.
        ACTIVITY_ID_PASSWORD_RESET     = 4;  // An attempt was made to reset an account's
                                             // password.
        ACTIVITY_ID_DISABLE            = 5;  // A user/role was disabled.
        ACTIVITY_ID_DELETE             = 6;  // A user/role was deleted.
        ACTIVITY_ID_ATTACH_POLICY      = 7;  // An IAM Policy was attached to a user/role.
        ACTIVITY_ID_DETACH_POLICY      = 8;  // An IAM Policy was detached from a
                                             // user/role.
        ACTIVITY_ID_LOCK               = 9;  // A user account was locked out.
        ACTIVITY_ID_MFA_FACTOR_ENABLE  = 10; // An authentication factor was enabled for
                                             // an account.
        ACTIVITY_ID_MFA_FACTOR_DISABLE = 11; // An authentication factor was disabled for
                                             // an account.
        ACTIVITY_ID_OTHER              = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN                    = 0;
        CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT = 3;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN        = 0;   
        CLASS_UID_ACCOUNT_CHANGE = 3001;
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    HttpRequest http_request = 16;
    optional string message = 17;
    Metadata metadata = 18;
    repeated Observable observables = 19;
    Policy policy = 20;
    optional string raw_data = 21;
    optional string severity = 22;
    SeverityId severity_id = 23;
    NetworkEndpoint src_endpoint = 24;
    optional int64 start_time = 25;
    optional google.protobuf.Timestamp start_time_dt = 26;
    optional string status = 27;
    optional string status_code = 28;
    optional string status_detail = 29;
    optional StatusId status_id = 30;
    int64 time = 31;
    google.protobuf.Timestamp time_dt = 32;
    optional int32 timezone_offset = 33;
    optional string type_name = 34;
    int64 type_uid = 35;
    google.protobuf.Struct unmapped = 36;
    User user = 37;
    User user_result = 38;
}

// Authentication is an OSF event in category "Identity & Access Management"
// called Authentication
// defined in ocsf events/iam/authentication.json
//
// Authentication events report authentication session activities such as user
// attempts a logon or logoff, successfully or otherwise.
message Authentication {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN                = 0; 
        ACTIVITY_ID_LOGON                  = 1;  // A new logon session was requested.
        ACTIVITY_ID_LOGOFF                 = 2;  // A logon session was terminated and no
                                                 // longer exists.
        ACTIVITY_ID_AUTHENTICATION_TICKET  = 3;  // A Kerberos authentication ticket (TGT)
                                                 // was requested.
        ACTIVITY_ID_SERVICE_TICKET_REQUEST = 4;  // A Kerberos service ticket was
                                                 // requested.
        ACTIVITY_ID_SERVICE_TICKET_RENEW   = 5;  // A Kerberos service ticket was renewed.
        ACTIVITY_ID_PREAUTH                = 6;  // A preauthentication stage was engaged.
        ACTIVITY_ID_OTHER                  = 99;
    }
    enum AuthProtocolId {
        AUTH_PROTOCOL_ID_UNKNOWN   = 0;  // The authentication protocol is unknown.
        AUTH_PROTOCOL_ID_NTLM      = 1; 
        AUTH_PROTOCOL_ID_KERBEROS  = 2; 
        AUTH_PROTOCOL_ID_DIGEST    = 3; 
        AUTH_PROTOCOL_ID_OPENID    = 4; 
        AUTH_PROTOCOL_ID_SAML      = 5; 
        AUTH_PROTOCOL_ID_OAUTH_2_0 = 6; 
        AUTH_PROTOCOL_ID_PAP       = 7; 
        AUTH_PROTOCOL_ID_CHAP      = 8; 
        AUTH_PROTOCOL_ID_EAP       = 9; 
        AUTH_PROTOCOL_ID_RADIUS    = 10;
        AUTH_PROTOCOL_ID_OTHER     = 99; // The authentication protocol is not mapped. See
                                         // the <code>auth_protocol</code> attribute,
                                         // which contains a data source specific value.
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN                    = 0;
        CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT = 3;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN        = 0;   
        CLASS_UID_AUTHENTICATION = 3002;
    }
    enum LogonTypeId {
        LOGON_TYPE_ID_UNKNOWN                   = 0;  // The logon type is unknown.
        LOGON_TYPE_ID_SYSTEM                    = 1;  // Used only by the System account,
                                                      // for example at system startup.
        LOGON_TYPE_ID_INTERACTIVE               = 2;  // A local logon to device console.
        LOGON_TYPE_ID_NETWORK                   = 3;  // A user or device logged onto this
                                                      // device from the network.
        LOGON_TYPE_ID_BATCH                     = 4;  // A batch server logon, where
                                                      // processes may be executing on
                                                      // behalf of a user without their
                                                      // direct intervention.
        LOGON_TYPE_ID_OS_SERVICE                = 5;  // A logon by a service or daemon
                                                      // that was started by the OS.
        LOGON_TYPE_ID_UNLOCK                    = 7;  // A user unlocked the device.
        LOGON_TYPE_ID_NETWORK_CLEARTEXT         = 8;  // A user logged on to this device
                                                      // from the network. The user's
                                                      // password in the authentication
                                                      // package was not hashed.
        LOGON_TYPE_ID_NEW_CREDENTIALS           = 9;  // A caller cloned its current token
                                                      // and specified new credentials for
                                                      // outbound connections. The new
                                                      // logon session has the same local
                                                      // identity, but uses different
                                                      // credentials for other network
                                                      // connections.
        LOGON_TYPE_ID_REMOTE_INTERACTIVE        = 10; // A remote logon using Terminal
                                                      // Services or remote desktop
                                                      // application.
        LOGON_TYPE_ID_CACHED_INTERACTIVE        = 11; // A user logged on to this device
                                                      // with network credentials that
                                                      // were stored locally on the device
                                                      // and the domain controller was not
                                                      // contacted to verify the
                                                      // credentials.
        LOGON_TYPE_ID_CACHED_REMOTE_INTERACTIVE = 12; // Same as Remote Interactive. This
                                                      // is used for internal auditing.
        LOGON_TYPE_ID_CACHED_UNLOCK             = 13; // Workstation logon.
        LOGON_TYPE_ID_OTHER                     = 99; // The logon type is not mapped. See
                                                      // the <code>logon_type</code>
                                                      // attribute, which contains a data
                                                      // source specific value.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    repeated AuthFactor auth_factors = 5;
    optional string auth_protocol = 6;
    optional AuthProtocolId auth_protocol_id = 7;
    optional string category_name = 8;
    CategoryUid category_uid = 9;
    Certificate certificate = 10;
    optional string class_name = 11;
    ClassUid class_uid = 12;
    Cloud cloud = 13;
    optional int32 count = 14;
    Device device = 15;
    NetworkEndpoint dst_endpoint = 16;
    optional int32 duration = 17;
    optional int64 end_time = 18;
    optional google.protobuf.Timestamp end_time_dt = 19;
    repeated Enrichment enrichments = 20;
    HttpRequest http_request = 21;
    optional bool is_cleartext = 22;
    optional bool is_mfa = 23;
    optional bool is_new_logon = 24;
    optional bool is_remote = 25;
    Process logon_process = 26;
    optional string logon_type = 27;
    optional LogonTypeId logon_type_id = 28;
    optional string message = 29;
    Metadata metadata = 30;
    repeated Observable observables = 31;
    optional string raw_data = 32;
    Service service = 33;
    Session session = 34;
    optional string severity = 35;
    SeverityId severity_id = 36;
    NetworkEndpoint src_endpoint = 37;
    optional int64 start_time = 38;
    optional google.protobuf.Timestamp start_time_dt = 39;
    optional string status = 40;
    optional string status_code = 41;
    optional string status_detail = 42;
    optional StatusId status_id = 43;
    int64 time = 44;
    google.protobuf.Timestamp time_dt = 45;
    optional int32 timezone_offset = 46;
    optional string type_name = 47;
    int64 type_uid = 48;
    google.protobuf.Struct unmapped = 49;
    User user = 50;
}

// AuthorizeSession is an OSF event in category "Identity & Access Management"
// called Authorize Session
// defined in ocsf events/iam/authorize_session.json
//
// Authorize Session events report privileges or groups assigned to a new user
// session, usually at login time.
message AuthorizeSession {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN           = 0; 
        ACTIVITY_ID_ASSIGN_PRIVILEGES = 1;  // Assign special privileges to a new logon.
        ACTIVITY_ID_ASSIGN_GROUPS     = 2;  // Assign special groups to a new logon.
        ACTIVITY_ID_OTHER             = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN                    = 0;
        CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT = 3;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN           = 0;   
        CLASS_UID_AUTHORIZE_SESSION = 3003;
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    NetworkEndpoint dst_endpoint = 12;
    optional int32 duration = 13;
    optional int64 end_time = 14;
    optional google.protobuf.Timestamp end_time_dt = 15;
    repeated Enrichment enrichments = 16;
    Group group = 17;
    HttpRequest http_request = 18;
    optional string message = 19;
    Metadata metadata = 20;
    repeated Observable observables = 21;
    repeated string privileges = 22;
    optional string raw_data = 23;
    Session session = 24;
    optional string severity = 25;
    SeverityId severity_id = 26;
    NetworkEndpoint src_endpoint = 27;
    optional int64 start_time = 28;
    optional google.protobuf.Timestamp start_time_dt = 29;
    optional string status = 30;
    optional string status_code = 31;
    optional string status_detail = 32;
    optional StatusId status_id = 33;
    int64 time = 34;
    google.protobuf.Timestamp time_dt = 35;
    optional int32 timezone_offset = 36;
    optional string type_name = 37;
    int64 type_uid = 38;
    google.protobuf.Struct unmapped = 39;
    User user = 40;
}

// EntityManagement is an OSF event in category "Identity & Access Management"
// called Entity Management
// defined in ocsf events/iam/entity_management.json
//
// Entity Management events report activity by a managed client, a micro
// service, or a user at a management console. The activity can be a create,
// read, update, and delete operation on a managed entity.
message EntityManagement {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_CREATE  = 1; 
        ACTIVITY_ID_READ    = 2; 
        ACTIVITY_ID_UPDATE  = 3; 
        ACTIVITY_ID_DELETE  = 4; 
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN                    = 0;
        CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT = 3;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN           = 0;   
        CLASS_UID_ENTITY_MANAGEMENT = 3004;
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional string comment = 10;
    optional int32 count = 11;
    Device device = 12;
    optional int32 duration = 13;
    optional int64 end_time = 14;
    optional google.protobuf.Timestamp end_time_dt = 15;
    repeated Enrichment enrichments = 16;
    ManagedEntity entity = 17;
    ManagedEntity entity_result = 18;
    HttpRequest http_request = 19;
    optional string message = 20;
    Metadata metadata = 21;
    repeated Observable observables = 22;
    optional string raw_data = 23;
    optional string severity = 24;
    SeverityId severity_id = 25;
    NetworkEndpoint src_endpoint = 26;
    optional int64 start_time = 27;
    optional google.protobuf.Timestamp start_time_dt = 28;
    optional string status = 29;
    optional string status_code = 30;
    optional string status_detail = 31;
    optional StatusId status_id = 32;
    int64 time = 33;
    google.protobuf.Timestamp time_dt = 34;
    optional int32 timezone_offset = 35;
    optional string type_name = 36;
    int64 type_uid = 37;
    google.protobuf.Struct unmapped = 38;
}

// UserAccess is an OSF event in category "Identity & Access Management"
// called User Access Management
// defined in ocsf events/iam/user_access.json
//
// User Access Management events report management updates to a user's
// privileges.
message UserAccess {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN           = 0; 
        ACTIVITY_ID_ASSIGN_PRIVILEGES = 1;  // Assign privileges to a user.
        ACTIVITY_ID_REVOKE_PRIVILEGES = 2;  // Revoke privileges from a user.
        ACTIVITY_ID_OTHER             = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN                    = 0;
        CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT = 3;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN                = 0;   
        CLASS_UID_USER_ACCESS_MANAGEMENT = 3005;
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    HttpRequest http_request = 16;
    optional string message = 17;
    Metadata metadata = 18;
    repeated Observable observables = 19;
    repeated string privileges = 20;
    optional string raw_data = 21;
    ResourceDetails resource = 22;
    optional string severity = 23;
    SeverityId severity_id = 24;
    NetworkEndpoint src_endpoint = 25;
    optional int64 start_time = 26;
    optional google.protobuf.Timestamp start_time_dt = 27;
    optional string status = 28;
    optional string status_code = 29;
    optional string status_detail = 30;
    optional StatusId status_id = 31;
    int64 time = 32;
    google.protobuf.Timestamp time_dt = 33;
    optional int32 timezone_offset = 34;
    optional string type_name = 35;
    int64 type_uid = 36;
    google.protobuf.Struct unmapped = 37;
    User user = 38;
}

// GroupManagement is an OSF event in category "Identity & Access Management"
// called Group Management
// defined in ocsf events/iam/group_management.json
//
// Group Management events report management updates to a group, including
// updates to membership and permissions.
message GroupManagement {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN           = 0; 
        ACTIVITY_ID_ASSIGN_PRIVILEGES = 1;  // Assign privileges to a group.
        ACTIVITY_ID_REVOKE_PRIVILEGES = 2;  // Revoke privileges from a group.
        ACTIVITY_ID_ADD_USER          = 3;  // Add user to a group.
        ACTIVITY_ID_REMOVE_USER       = 4;  // Remove user from a group.
        ACTIVITY_ID_DELETE            = 5;  // A group was deleted.
        ACTIVITY_ID_CREATE            = 6;  // A group was created.
        ACTIVITY_ID_OTHER             = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN                    = 0;
        CATEGORY_UID_IDENTITY_ACCESS_MANAGEMENT = 3;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN          = 0;   
        CLASS_UID_GROUP_MANAGEMENT = 3006;
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    Group group = 16;
    HttpRequest http_request = 17;
    optional string message = 18;
    Metadata metadata = 19;
    repeated Observable observables = 20;
    repeated string privileges = 21;
    optional string raw_data = 22;
    ResourceDetails resource = 23;
    optional string severity = 24;
    SeverityId severity_id = 25;
    NetworkEndpoint src_endpoint = 26;
    optional int64 start_time = 27;
    optional google.protobuf.Timestamp start_time_dt = 28;
    optional string status = 29;
    optional string status_code = 30;
    optional string status_detail = 31;
    optional StatusId status_id = 32;
    int64 time = 33;
    google.protobuf.Timestamp time_dt = 34;
    optional int32 timezone_offset = 35;
    optional string type_name = 36;
    int64 type_uid = 37;
    google.protobuf.Struct unmapped = 38;
    User user = 39;
}

// NetworkActivity is an OSF event in category "Network Activity"
// called Network Activity
// defined in ocsf events/network/network_activity.json
//
// Network Activity events report network connection and traffic activity.
message NetworkActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_OPEN    = 1;  // A new network connection was opened.
        ACTIVITY_ID_CLOSE   = 2;  // The network connection was closed.
        ACTIVITY_ID_RESET   = 3;  // The network connection was abnormally terminated or
                                  // closed by a middle device like firewalls.
        ACTIVITY_ID_FAIL    = 4;  // The network connection failed. For example a
                                  // connection timeout or no route to host.
        ACTIVITY_ID_REFUSE  = 5;  // The network connection was refused. For example an
                                  // attempt to connect to a server port which is not
                                  // open.
        ACTIVITY_ID_TRAFFIC = 6;  // Network traffic report.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN          = 0;
        CATEGORY_UID_NETWORK_ACTIVITY = 4;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN          = 0;   
        CLASS_UID_NETWORK_ACTIVITY = 4001;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    optional string app_name = 7;
    repeated Attack attacks = 8;
    repeated Authorization authorizations = 9;
    optional string category_name = 10;
    CategoryUid category_uid = 11;
    optional string class_name = 12;
    ClassUid class_uid = 13;
    Cloud cloud = 14;
    NetworkConnectionInfo connection_info = 15;
    optional int32 count = 16;
    Device device = 17;
    optional string disposition = 18;
    optional DispositionId disposition_id = 19;
    NetworkEndpoint dst_endpoint = 20;
    optional int32 duration = 21;
    optional int64 end_time = 22;
    optional google.protobuf.Timestamp end_time_dt = 23;
    repeated Enrichment enrichments = 24;
    FirewallRule firewall_rule = 25;
    LoadBalancer load_balancer = 26;
    repeated Malware malware = 27;
    optional string message = 28;
    Metadata metadata = 29;
    repeated Observable observables = 30;
    NetworkProxy proxy = 31;
    NetworkConnectionInfo proxy_connection_info = 32;
    NetworkProxy proxy_endpoint = 33;
    HttpRequest proxy_http_request = 34;
    HttpResponse proxy_http_response = 35;
    Tls proxy_tls = 36;
    NetworkTraffic proxy_traffic = 37;
    optional string raw_data = 38;
    optional string severity = 39;
    SeverityId severity_id = 40;
    NetworkEndpoint src_endpoint = 41;
    optional int64 start_time = 42;
    optional google.protobuf.Timestamp start_time_dt = 43;
    optional string status = 44;
    optional string status_code = 45;
    optional string status_detail = 46;
    optional StatusId status_id = 47;
    int64 time = 48;
    google.protobuf.Timestamp time_dt = 49;
    optional int32 timezone_offset = 50;
    Tls tls = 51;
    NetworkTraffic traffic = 52;
    optional string type_name = 53;
    int64 type_uid = 54;
    google.protobuf.Struct unmapped = 55;
    Url url = 56;
}

// HttpActivity is an OSF event in category "Network Activity"
// called HTTP Activity
// defined in ocsf events/network/http.json
//
// HTTP Activity events report HTTP connection and traffic information.
message HttpActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_CONNECT = 1;  // The CONNECT method establishes a tunnel to the server
                                  // identified by the target resource.
        ACTIVITY_ID_DELETE  = 2;  // The DELETE method deletes the specified resource.
        ACTIVITY_ID_GET     = 3;  // The GET method requests a representation of the
                                  // specified resource. Requests using GET should only
                                  // retrieve data.
        ACTIVITY_ID_HEAD    = 4;  // The HEAD method asks for a response identical to a
                                  // GET request, but without the response body.
        ACTIVITY_ID_OPTIONS = 5;  // The OPTIONS method describes the communication
                                  // options for the target resource.
        ACTIVITY_ID_POST    = 6;  // The POST method submits an entity to the specified
                                  // resource, often causing a change in state or side
                                  // effects on the server.
        ACTIVITY_ID_PUT     = 7;  // The PUT method replaces all current representations
                                  // of the target resource with the request payload.
        ACTIVITY_ID_TRACE   = 8;  // The TRACE method performs a message loop-back test
                                  // along the path to the target resource.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN          = 0;
        CATEGORY_UID_NETWORK_ACTIVITY = 4;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN       = 0;   
        CLASS_UID_HTTP_ACTIVITY = 4002;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    optional string app_name = 7;
    repeated Attack attacks = 8;
    repeated Authorization authorizations = 9;
    optional string category_name = 10;
    CategoryUid category_uid = 11;
    optional string class_name = 12;
    ClassUid class_uid = 13;
    Cloud cloud = 14;
    NetworkConnectionInfo connection_info = 15;
    optional int32 count = 16;
    Device device = 17;
    optional string disposition = 18;
    optional DispositionId disposition_id = 19;
    NetworkEndpoint dst_endpoint = 20;
    optional int32 duration = 21;
    optional int64 end_time = 22;
    optional google.protobuf.Timestamp end_time_dt = 23;
    repeated Enrichment enrichments = 24;
    File file = 25;
    FirewallRule firewall_rule = 26;
    repeated HttpCookie http_cookies = 27;
    HttpRequest http_request = 28;
    HttpResponse http_response = 29;
    optional int32 http_status = 30;
    LoadBalancer load_balancer = 31;
    repeated Malware malware = 32;
    optional string message = 33;
    Metadata metadata = 34;
    repeated Observable observables = 35;
    NetworkProxy proxy = 36;
    NetworkConnectionInfo proxy_connection_info = 37;
    NetworkProxy proxy_endpoint = 38;
    HttpRequest proxy_http_request = 39;
    HttpResponse proxy_http_response = 40;
    Tls proxy_tls = 41;
    NetworkTraffic proxy_traffic = 42;
    optional string raw_data = 43;
    optional string severity = 44;
    SeverityId severity_id = 45;
    NetworkEndpoint src_endpoint = 46;
    optional int64 start_time = 47;
    optional google.protobuf.Timestamp start_time_dt = 48;
    optional string status = 49;
    optional string status_code = 50;
    optional string status_detail = 51;
    optional StatusId status_id = 52;
    int64 time = 53;
    google.protobuf.Timestamp time_dt = 54;
    optional int32 timezone_offset = 55;
    Tls tls = 56;
    NetworkTraffic traffic = 57;
    optional string type_name = 58;
    int64 type_uid = 59;
    google.protobuf.Struct unmapped = 60;
}

// DnsActivity is an OSF event in category "Network Activity"
// called DNS Activity
// defined in ocsf events/network/dns.json
//
// DNS Activity events report DNS queries and answers as seen on the network.
message DnsActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN  = 0; 
        ACTIVITY_ID_QUERY    = 1;  // The DNS query request.
        ACTIVITY_ID_RESPONSE = 2;  // The DNS query response.
        ACTIVITY_ID_TRAFFIC  = 6;  // Bidirectional DNS request and response traffic.
        ACTIVITY_ID_OTHER    = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN          = 0;
        CATEGORY_UID_NETWORK_ACTIVITY = 4;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN      = 0;   
        CLASS_UID_DNS_ACTIVITY = 4003;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum RcodeId {
        RCODE_ID_NOERROR     = 0;  // No Error.
        RCODE_ID_FORMERROR   = 1;  // Format Error.
        RCODE_ID_SERVERROR   = 2;  // Server Failure.
        RCODE_ID_NXDOMAIN    = 3;  // Non-Existent Domain.
        RCODE_ID_NOTIMP      = 4;  // Not Implemented.
        RCODE_ID_REFUSED     = 5;  // Query Refused.
        RCODE_ID_YXDOMAIN    = 6;  // Name Exists when it should not.
        RCODE_ID_YXRRSET     = 7;  // RR Set Exists when it should not.
        RCODE_ID_NXRRSET     = 8;  // RR Set that should exist does not.
        RCODE_ID_NOTAUTH     = 9;  // Not Authorized or Server Not Authoritative for zone.
        RCODE_ID_NOTZONE     = 10; // Name not contained in zone.
        RCODE_ID_DSOTYPENI   = 11; // DSO-TYPE Not Implemented.
        RCODE_ID_BADSIG_VERS = 16; // TSIG Signature Failure or Bad OPT Version.
        RCODE_ID_BADKEY      = 17; // Key not recognized.
        RCODE_ID_BADTIME     = 18; // Signature out of time window.
        RCODE_ID_BADMODE     = 19; // Bad TKEY Mode.
        RCODE_ID_BADNAME     = 20; // Duplicate key name.
        RCODE_ID_BADALG      = 21; // Algorithm not supported.
        RCODE_ID_BADTRUNC    = 22; // Bad Truncation.
        RCODE_ID_BADCOOKIE   = 23; // Bad/missing Server Cookie.
        RCODE_ID_UNASSIGNED  = 24; // The codes deemed to be unassigned by the RFC
                                   // (unassigned codes: 12-15, 24-3840, 4096-65534).
        RCODE_ID_RESERVED    = 25; // The codes deemed to be reserved by the RFC (codes:
                                   // 3841-4095, 65535).
        RCODE_ID_OTHER       = 99; // The dns response code is not defined by the RFC.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    repeated DnsAnswer answers = 6;
    Api api = 7;
    optional string app_name = 8;
    repeated Attack attacks = 9;
    repeated Authorization authorizations = 10;
    optional string category_name = 11;
    CategoryUid category_uid = 12;
    optional string class_name = 13;
    ClassUid class_uid = 14;
    Cloud cloud = 15;
    NetworkConnectionInfo connection_info = 16;
    optional int32 count = 17;
    Device device = 18;
    optional string disposition = 19;
    optional DispositionId disposition_id = 20;
    NetworkEndpoint dst_endpoint = 21;
    optional int32 duration = 22;
    optional int64 end_time = 23;
    optional google.protobuf.Timestamp end_time_dt = 24;
    repeated Enrichment enrichments = 25;
    FirewallRule firewall_rule = 26;
    LoadBalancer load_balancer = 27;
    repeated Malware malware = 28;
    optional string message = 29;
    Metadata metadata = 30;
    repeated Observable observables = 31;
    NetworkProxy proxy = 32;
    NetworkConnectionInfo proxy_connection_info = 33;
    NetworkProxy proxy_endpoint = 34;
    HttpRequest proxy_http_request = 35;
    HttpResponse proxy_http_response = 36;
    Tls proxy_tls = 37;
    NetworkTraffic proxy_traffic = 38;
    DnsQuery query = 39;
    optional int64 query_time = 40;
    optional google.protobuf.Timestamp query_time_dt = 41;
    optional string raw_data = 42;
    optional string rcode = 43;
    optional RcodeId rcode_id = 44;
    optional int64 response_time = 45;
    optional google.protobuf.Timestamp response_time_dt = 46;
    optional string severity = 47;
    SeverityId severity_id = 48;
    NetworkEndpoint src_endpoint = 49;
    optional int64 start_time = 50;
    optional google.protobuf.Timestamp start_time_dt = 51;
    optional string status = 52;
    optional string status_code = 53;
    optional string status_detail = 54;
    optional StatusId status_id = 55;
    int64 time = 56;
    google.protobuf.Timestamp time_dt = 57;
    optional int32 timezone_offset = 58;
    Tls tls = 59;
    NetworkTraffic traffic = 60;
    optional string type_name = 61;
    int64 type_uid = 62;
    google.protobuf.Struct unmapped = 63;
}

// DhcpActivity is an OSF event in category "Network Activity"
// called DHCP Activity
// defined in ocsf events/network/dhcp.json
//
// DHCP Activity events report MAC to IP assignment via DHCP from a client or
// server.
message DhcpActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN  = 0; 
        ACTIVITY_ID_DISCOVER = 1;  // DHCPDISCOVER
        ACTIVITY_ID_OFFER    = 2;  // DHCPOFFER
        ACTIVITY_ID_REQUEST  = 3;  // DHCPREQUEST
        ACTIVITY_ID_DECLINE  = 4;  // DHCPDECLINE
        ACTIVITY_ID_ACK      = 5;  // DHCPACK: The server accepts the request by sending
                                   // the client a DHCP Acknowledgment message.
        ACTIVITY_ID_NAK      = 6;  // DHCPNAK
        ACTIVITY_ID_RELEASE  = 7;  // DHCPRELEASE: A DHCP client sends a DHCPRELEASE
                                   // packet to the server to release the IP address and
                                   // cancel any remaining lease.
        ACTIVITY_ID_INFORM   = 8;  // DHCPINFORM
        ACTIVITY_ID_EXPIRE   = 9;  // DHCPEXPIRE: A DHCP lease expired.
        ACTIVITY_ID_OTHER    = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN          = 0;
        CATEGORY_UID_NETWORK_ACTIVITY = 4;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN       = 0;   
        CLASS_UID_DHCP_ACTIVITY = 4004;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    optional string app_name = 7;
    repeated Attack attacks = 8;
    repeated Authorization authorizations = 9;
    optional string category_name = 10;
    CategoryUid category_uid = 11;
    optional string class_name = 12;
    ClassUid class_uid = 13;
    Cloud cloud = 14;
    NetworkConnectionInfo connection_info = 15;
    optional int32 count = 16;
    Device device = 17;
    optional string disposition = 18;
    optional DispositionId disposition_id = 19;
    NetworkEndpoint dst_endpoint = 20;
    optional int32 duration = 21;
    optional int64 end_time = 22;
    optional google.protobuf.Timestamp end_time_dt = 23;
    repeated Enrichment enrichments = 24;
    FirewallRule firewall_rule = 25;
    optional bool is_renewal = 26;
    optional int32 lease_dur = 27;
    LoadBalancer load_balancer = 28;
    repeated Malware malware = 29;
    optional string message = 30;
    Metadata metadata = 31;
    repeated Observable observables = 32;
    NetworkProxy proxy = 33;
    NetworkConnectionInfo proxy_connection_info = 34;
    NetworkProxy proxy_endpoint = 35;
    HttpRequest proxy_http_request = 36;
    HttpResponse proxy_http_response = 37;
    Tls proxy_tls = 38;
    NetworkTraffic proxy_traffic = 39;
    optional string raw_data = 40;
    NetworkInterface relay = 41;
    optional string severity = 42;
    SeverityId severity_id = 43;
    NetworkEndpoint src_endpoint = 44;
    optional int64 start_time = 45;
    optional google.protobuf.Timestamp start_time_dt = 46;
    optional string status = 47;
    optional string status_code = 48;
    optional string status_detail = 49;
    optional StatusId status_id = 50;
    int64 time = 51;
    google.protobuf.Timestamp time_dt = 52;
    optional int32 timezone_offset = 53;
    Tls tls = 54;
    NetworkTraffic traffic = 55;
    optional string transaction_uid = 56;
    optional string type_name = 57;
    int64 type_uid = 58;
    google.protobuf.Struct unmapped = 59;
}

// RdpActivity is an OSF event in category "Network Activity"
// called RDP Activity
// defined in ocsf events/network/rdp.json
//
// Remote Desktop Protocol (RDP) Activity events report remote client
// connections to a server as seen on the network.
message RdpActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN          = 0; 
        ACTIVITY_ID_INITIAL_REQUEST  = 1;  // The initial RDP request.
        ACTIVITY_ID_INITIAL_RESPONSE = 2;  // The initial RDP response.
        ACTIVITY_ID_CONNECT_REQUEST  = 3;  // An RDP connection request.
        ACTIVITY_ID_CONNECT_RESPONSE = 4;  // An RDP connection response.
        ACTIVITY_ID_TLS_HANDSHAKE    = 5;  // The TLS handshake.
        ACTIVITY_ID_TRAFFIC          = 6;  // Network traffic report.
        ACTIVITY_ID_OTHER            = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN          = 0;
        CATEGORY_UID_NETWORK_ACTIVITY = 4;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN      = 0;   
        CLASS_UID_RDP_ACTIVITY = 4005;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    optional string app_name = 7;
    repeated Attack attacks = 8;
    repeated Authorization authorizations = 9;
    repeated string capabilities = 10;
    optional string category_name = 11;
    CategoryUid category_uid = 12;
    repeated string certificate_chain = 13;
    optional string class_name = 14;
    ClassUid class_uid = 15;
    Cloud cloud = 16;
    NetworkConnectionInfo connection_info = 17;
    optional int32 count = 18;
    Device device = 19;
    optional string disposition = 20;
    optional DispositionId disposition_id = 21;
    NetworkEndpoint dst_endpoint = 22;
    optional int32 duration = 23;
    optional int64 end_time = 24;
    optional google.protobuf.Timestamp end_time_dt = 25;
    repeated Enrichment enrichments = 26;
    File file = 27;
    FirewallRule firewall_rule = 28;
    optional string identifier_cookie = 29;
    LoadBalancer load_balancer = 30;
    repeated Malware malware = 31;
    optional string message = 32;
    Metadata metadata = 33;
    repeated Observable observables = 34;
    optional string protocol_ver = 35;
    NetworkProxy proxy = 36;
    NetworkConnectionInfo proxy_connection_info = 37;
    NetworkProxy proxy_endpoint = 38;
    HttpRequest proxy_http_request = 39;
    HttpResponse proxy_http_response = 40;
    Tls proxy_tls = 41;
    NetworkTraffic proxy_traffic = 42;
    optional string raw_data = 43;
    Display remote_display = 44;
    Request request = 45;
    Response response = 46;
    optional string severity = 47;
    SeverityId severity_id = 48;
    NetworkEndpoint src_endpoint = 49;
    optional int64 start_time = 50;
    optional google.protobuf.Timestamp start_time_dt = 51;
    optional string status = 52;
    optional string status_code = 53;
    optional string status_detail = 54;
    optional StatusId status_id = 55;
    int64 time = 56;
    google.protobuf.Timestamp time_dt = 57;
    optional int32 timezone_offset = 58;
    Tls tls = 59;
    NetworkTraffic traffic = 60;
    optional string type_name = 61;
    int64 type_uid = 62;
    google.protobuf.Struct unmapped = 63;
}

// SmbActivity is an OSF event in category "Network Activity"
// called SMB Activity
// defined in ocsf events/network/smb.json
//
// Server Message Block (SMB) Protocol Activity events report client/server
// connections sharing resources within the network.
message SmbActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN           = 0; 
        ACTIVITY_ID_FILE_SUPERSEDE    = 1;  // The event pertains to file superseded
                                            // activity (overwritten if it exists and
                                            // created if not).
        ACTIVITY_ID_FILE_OPEN         = 2;  // The event pertains to file open activity
                                            // (the file is opened if it exists and fails
                                            // to open if it doesn't).
        ACTIVITY_ID_FILE_CREATE       = 3;  // The event pertains to file creation
                                            // activity (a file is created if it does not
                                            // exist and fails if it does).
        ACTIVITY_ID_FILE_OPEN_IF      = 4;  // The event pertains to file open activity
                                            // (the file is opened if it exists and is
                                            // created if it doesn't).
        ACTIVITY_ID_FILE_OVERWRITE    = 5;  // The event pertains to file overwrite
                                            // activity (the file is opened in a truncated
                                            // form if it exists and fails if it doesn't).
        ACTIVITY_ID_FILE_OVERWRITE_IF = 6;  // The event pertains to file overwrite
                                            // activity (the file is opened in a truncated
                                            // form if it exists and created otherwise)
        ACTIVITY_ID_OTHER             = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN          = 0;
        CATEGORY_UID_NETWORK_ACTIVITY = 4;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN      = 0;   
        CLASS_UID_SMB_ACTIVITY = 4006;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum ShareTypeId {
        SHARE_TYPE_ID_UNKNOWN = 0;  // The share type is unknown.
        SHARE_TYPE_ID_FILE    = 1; 
        SHARE_TYPE_ID_PIPE    = 2; 
        SHARE_TYPE_ID_PRINT   = 3; 
        SHARE_TYPE_ID_OTHER   = 99; // The share type is not mapped. See the
                                    // <code>share_type</code> attribute, which contains a
                                    // data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    optional string app_name = 7;
    repeated Attack attacks = 8;
    repeated Authorization authorizations = 9;
    optional string category_name = 10;
    CategoryUid category_uid = 11;
    optional string class_name = 12;
    ClassUid class_uid = 13;
    repeated string client_dialects = 14;
    Cloud cloud = 15;
    optional string command = 16;
    NetworkConnectionInfo connection_info = 17;
    optional int32 count = 18;
    DceRpc dce_rpc = 19;
    Device device = 20;
    optional string dialect = 21;
    optional string disposition = 22;
    optional DispositionId disposition_id = 23;
    NetworkEndpoint dst_endpoint = 24;
    optional int32 duration = 25;
    optional int64 end_time = 26;
    optional google.protobuf.Timestamp end_time_dt = 27;
    repeated Enrichment enrichments = 28;
    File file = 29;
    FirewallRule firewall_rule = 30;
    LoadBalancer load_balancer = 31;
    repeated Malware malware = 32;
    optional string message = 33;
    Metadata metadata = 34;
    repeated Observable observables = 35;
    optional string open_type = 36;
    NetworkProxy proxy = 37;
    NetworkConnectionInfo proxy_connection_info = 38;
    NetworkProxy proxy_endpoint = 39;
    HttpRequest proxy_http_request = 40;
    HttpResponse proxy_http_response = 41;
    Tls proxy_tls = 42;
    NetworkTraffic proxy_traffic = 43;
    optional string raw_data = 44;
    Response response = 45;
    optional string severity = 46;
    SeverityId severity_id = 47;
    optional string share = 48;
    optional string share_type = 49;
    optional ShareTypeId share_type_id = 50;
    NetworkEndpoint src_endpoint = 51;
    optional int64 start_time = 52;
    optional google.protobuf.Timestamp start_time_dt = 53;
    optional string status = 54;
    optional string status_code = 55;
    optional string status_detail = 56;
    optional StatusId status_id = 57;
    int64 time = 58;
    google.protobuf.Timestamp time_dt = 59;
    optional int32 timezone_offset = 60;
    Tls tls = 61;
    NetworkTraffic traffic = 62;
    optional string tree_uid = 63;
    optional string type_name = 64;
    int64 type_uid = 65;
    google.protobuf.Struct unmapped = 66;
}

// SshActivity is an OSF event in category "Network Activity"
// called SSH Activity
// defined in ocsf events/network/ssh.json
//
// SSH Activity events report remote client connections to a server using the
// Secure Shell (SSH) Protocol.
message SshActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_OPEN    = 1;  // A new network connection was opened.
        ACTIVITY_ID_CLOSE   = 2;  // The network connection was closed.
        ACTIVITY_ID_RESET   = 3;  // The network connection was abnormally terminated or
                                  // closed by a middle device like firewalls.
        ACTIVITY_ID_FAIL    = 4;  // The network connection failed. For example a
                                  // connection timeout or no route to host.
        ACTIVITY_ID_REFUSE  = 5;  // The network connection was refused. For example an
                                  // attempt to connect to a server port which is not
                                  // open.
        ACTIVITY_ID_TRAFFIC = 6;  // Network traffic report.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum AuthTypeId {
        AUTH_TYPE_ID_UNKNOWN              = 0; 
        AUTH_TYPE_ID_CERTIFICATE_BASED    = 1;  // Authentication using digital
                                                // certificates.
        AUTH_TYPE_ID_GSSAPI               = 2;  // GSSAPI for centralized authentication.
        AUTH_TYPE_ID_HOST_BASED           = 3;  // Authentication based on the client
                                                // host's identity.
        AUTH_TYPE_ID_KEYBOARD_INTERACTIVE = 4;  // Multi-step, interactive authentication.
        AUTH_TYPE_ID_PASSWORD             = 5;  // Password Authentication.
        AUTH_TYPE_ID_PUBLIC_KEY           = 6;  // Paired public key authentication.
        AUTH_TYPE_ID_OTHER                = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN          = 0;
        CATEGORY_UID_NETWORK_ACTIVITY = 4;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN      = 0;   
        CLASS_UID_SSH_ACTIVITY = 4007;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    optional string app_name = 7;
    repeated Attack attacks = 8;
    optional string auth_type = 9;
    optional AuthTypeId auth_type_id = 10;
    repeated Authorization authorizations = 11;
    optional string category_name = 12;
    CategoryUid category_uid = 13;
    optional string class_name = 14;
    ClassUid class_uid = 15;
    Hassh client_hassh = 16;
    Cloud cloud = 17;
    NetworkConnectionInfo connection_info = 18;
    optional int32 count = 19;
    Device device = 20;
    optional string disposition = 21;
    optional DispositionId disposition_id = 22;
    NetworkEndpoint dst_endpoint = 23;
    optional int32 duration = 24;
    optional int64 end_time = 25;
    optional google.protobuf.Timestamp end_time_dt = 26;
    repeated Enrichment enrichments = 27;
    File file = 28;
    FirewallRule firewall_rule = 29;
    LoadBalancer load_balancer = 30;
    repeated Malware malware = 31;
    optional string message = 32;
    Metadata metadata = 33;
    repeated Observable observables = 34;
    optional string protocol_ver = 35;
    NetworkProxy proxy = 36;
    NetworkConnectionInfo proxy_connection_info = 37;
    NetworkProxy proxy_endpoint = 38;
    HttpRequest proxy_http_request = 39;
    HttpResponse proxy_http_response = 40;
    Tls proxy_tls = 41;
    NetworkTraffic proxy_traffic = 42;
    optional string raw_data = 43;
    Hassh server_hassh = 44;
    optional string severity = 45;
    SeverityId severity_id = 46;
    NetworkEndpoint src_endpoint = 47;
    optional int64 start_time = 48;
    optional google.protobuf.Timestamp start_time_dt = 49;
    optional string status = 50;
    optional string status_code = 51;
    optional string status_detail = 52;
    optional StatusId status_id = 53;
    int64 time = 54;
    google.protobuf.Timestamp time_dt = 55;
    optional int32 timezone_offset = 56;
    Tls tls = 57;
    NetworkTraffic traffic = 58;
    optional string type_name = 59;
    int64 type_uid = 60;
    google.protobuf.Struct unmapped = 61;
}

// FtpActivity is an OSF event in category "Network Activity"
// called FTP Activity
// defined in ocsf events/network/ftp.json
//
// File Transfer Protocol (FTP) Activity events report file transfers between
// a server and a client as seen on the network.
message FtpActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_PUT     = 1;  // File upload to the FTP or SFTP site.
        ACTIVITY_ID_GET     = 2;  // File download from the FTP or SFTP site.
        ACTIVITY_ID_POLL    = 3;  // Poll directory for specific file(s) or folder(s) at
                                  // the FTP or SFTP site location.
        ACTIVITY_ID_DELETE  = 4;  // Delete file(s) from the FTP or SFTP site.
        ACTIVITY_ID_RENAME  = 5;  // Rename the file(s) in the FTP or SFTP site.
        ACTIVITY_ID_LIST    = 6;  // List files in a specified directory.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN          = 0;
        CATEGORY_UID_NETWORK_ACTIVITY = 4;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN      = 0;   
        CLASS_UID_FTP_ACTIVITY = 4008;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    optional string app_name = 7;
    repeated Attack attacks = 8;
    repeated Authorization authorizations = 9;
    optional string category_name = 10;
    CategoryUid category_uid = 11;
    optional string class_name = 12;
    ClassUid class_uid = 13;
    Cloud cloud = 14;
    repeated int32 codes = 15;
    optional string command = 16;
    repeated string command_responses = 17;
    NetworkConnectionInfo connection_info = 18;
    optional int32 count = 19;
    Device device = 20;
    optional string disposition = 21;
    optional DispositionId disposition_id = 22;
    NetworkEndpoint dst_endpoint = 23;
    optional int32 duration = 24;
    optional int64 end_time = 25;
    optional google.protobuf.Timestamp end_time_dt = 26;
    repeated Enrichment enrichments = 27;
    File file = 28;
    FirewallRule firewall_rule = 29;
    LoadBalancer load_balancer = 30;
    repeated Malware malware = 31;
    optional string message = 32;
    Metadata metadata = 33;
    optional string name = 34;
    repeated Observable observables = 35;
    optional int32 port = 36;
    NetworkProxy proxy = 37;
    NetworkConnectionInfo proxy_connection_info = 38;
    NetworkProxy proxy_endpoint = 39;
    HttpRequest proxy_http_request = 40;
    HttpResponse proxy_http_response = 41;
    Tls proxy_tls = 42;
    NetworkTraffic proxy_traffic = 43;
    optional string raw_data = 44;
    optional string severity = 45;
    SeverityId severity_id = 46;
    NetworkEndpoint src_endpoint = 47;
    optional int64 start_time = 48;
    optional google.protobuf.Timestamp start_time_dt = 49;
    optional string status = 50;
    optional string status_code = 51;
    optional string status_detail = 52;
    optional StatusId status_id = 53;
    int64 time = 54;
    google.protobuf.Timestamp time_dt = 55;
    optional int32 timezone_offset = 56;
    Tls tls = 57;
    NetworkTraffic traffic = 58;
    optional string type = 59;
    optional string type_name = 60;
    int64 type_uid = 61;
    google.protobuf.Struct unmapped = 62;
}

// EmailActivity is an OSF event in category "Network Activity"
// called Email Activity
// defined in ocsf events/network/email.json
//
// Email events report activities of emails.
message EmailActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_SEND    = 1; 
        ACTIVITY_ID_RECEIVE = 2; 
        ACTIVITY_ID_SCAN    = 3;  // Email being scanned (example: security scanning)
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN          = 0;
        CATEGORY_UID_NETWORK_ACTIVITY = 4;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN        = 0;   
        CLASS_UID_EMAIL_ACTIVITY = 4009;
    }
    enum DirectionId {
        DIRECTION_ID_UNKNOWN  = 0;  // The email direction is unknown.
        DIRECTION_ID_INBOUND  = 1;  // Email Inbound, from the Internet or outside network
                                    // destined for an entity inside network.
        DIRECTION_ID_OUTBOUND = 2;  // Email Outbound, from inside the network destined
                                    // for an entity outside network.
        DIRECTION_ID_INTERNAL = 3;  // Email Internal, from inside the network destined
                                    // for an entity inside network.
        DIRECTION_ID_OTHER    = 99;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    optional ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    repeated Attack attacks = 7;
    optional int32 attempt = 8;
    repeated Authorization authorizations = 9;
    optional string banner = 10;
    optional string category_name = 11;
    CategoryUid category_uid = 12;
    optional string class_name = 13;
    ClassUid class_uid = 14;
    Cloud cloud = 15;
    optional int32 count = 16;
    Device device = 17;
    optional string direction = 18;
    DirectionId direction_id = 19;
    optional string disposition = 20;
    optional DispositionId disposition_id = 21;
    NetworkEndpoint dst_endpoint = 22;
    optional int32 duration = 23;
    Email email = 24;
    EmailAuth email_auth = 25;
    optional int64 end_time = 26;
    optional google.protobuf.Timestamp end_time_dt = 27;
    repeated Enrichment enrichments = 28;
    FirewallRule firewall_rule = 29;
    repeated Malware malware = 30;
    optional string message = 31;
    Metadata metadata = 32;
    repeated Observable observables = 33;
    optional string raw_data = 34;
    optional string severity = 35;
    SeverityId severity_id = 36;
    optional string smtp_hello = 37;
    NetworkEndpoint src_endpoint = 38;
    optional int64 start_time = 39;
    optional google.protobuf.Timestamp start_time_dt = 40;
    optional string status = 41;
    optional string status_code = 42;
    optional string status_detail = 43;
    optional StatusId status_id = 44;
    int64 time = 45;
    google.protobuf.Timestamp time_dt = 46;
    optional int32 timezone_offset = 47;
    optional string type_name = 48;
    int64 type_uid = 49;
    google.protobuf.Struct unmapped = 50;
}

// NetworkFileActivity is an OSF event in category "Network Activity"
// called Network File Activity
// defined in ocsf events/network/file_activity.json
//
// Network File Activity events report file activities traversing the network,
// including file storage services such as Box, MS OneDrive, or Google Drive.
message NetworkFileActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN  = 0; 
        ACTIVITY_ID_UPLOAD   = 1;  // Upload a file.
        ACTIVITY_ID_DOWNLOAD = 2;  // Download a file.
        ACTIVITY_ID_UPDATE   = 3;  // Update a file.
        ACTIVITY_ID_DELETE   = 4;  // Delete a file.
        ACTIVITY_ID_RENAME   = 5;  // Rename a file.
        ACTIVITY_ID_COPY     = 6;  // Copy a file.
        ACTIVITY_ID_MOVE     = 7;  // Move a file.
        ACTIVITY_ID_RESTORE  = 8;  // Restore a file.
        ACTIVITY_ID_PREVIEW  = 9;  // Preview a file.
        ACTIVITY_ID_LOCK     = 10; // Lock a file.
        ACTIVITY_ID_UNLOCK   = 11; // Unlock a file.
        ACTIVITY_ID_SHARE    = 12; // Share a file.
        ACTIVITY_ID_UNSHARE  = 13; // Unshare a file.
        ACTIVITY_ID_OPEN     = 14; // Open a file.
        ACTIVITY_ID_SYNC     = 15; // Mark a file or folder to sync with a computer.
        ACTIVITY_ID_UNSYNC   = 16; // Mark a file or folder to not sync with a computer.
        ACTIVITY_ID_OTHER    = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN          = 0;
        CATEGORY_UID_NETWORK_ACTIVITY = 4;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN               = 0;   
        CLASS_UID_NETWORK_FILE_ACTIVITY = 4010;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    optional string app_name = 7;
    repeated Attack attacks = 8;
    repeated Authorization authorizations = 9;
    optional string category_name = 10;
    CategoryUid category_uid = 11;
    optional string class_name = 12;
    ClassUid class_uid = 13;
    Cloud cloud = 14;
    NetworkConnectionInfo connection_info = 15;
    optional int32 count = 16;
    Device device = 17;
    optional string disposition = 18;
    optional DispositionId disposition_id = 19;
    NetworkEndpoint dst_endpoint = 20;
    optional int32 duration = 21;
    optional int64 end_time = 22;
    optional google.protobuf.Timestamp end_time_dt = 23;
    repeated Enrichment enrichments = 24;
    optional int64 expiration_time = 25;
    optional google.protobuf.Timestamp expiration_time_dt = 26;
    File file = 27;
    FirewallRule firewall_rule = 28;
    LoadBalancer load_balancer = 29;
    repeated Malware malware = 30;
    optional string message = 31;
    Metadata metadata = 32;
    repeated Observable observables = 33;
    NetworkProxy proxy = 34;
    NetworkConnectionInfo proxy_connection_info = 35;
    NetworkProxy proxy_endpoint = 36;
    HttpRequest proxy_http_request = 37;
    HttpResponse proxy_http_response = 38;
    Tls proxy_tls = 39;
    NetworkTraffic proxy_traffic = 40;
    optional string raw_data = 41;
    optional string severity = 42;
    SeverityId severity_id = 43;
    NetworkEndpoint src_endpoint = 44;
    optional int64 start_time = 45;
    optional google.protobuf.Timestamp start_time_dt = 46;
    optional string status = 47;
    optional string status_code = 48;
    optional string status_detail = 49;
    optional StatusId status_id = 50;
    int64 time = 51;
    google.protobuf.Timestamp time_dt = 52;
    optional int32 timezone_offset = 53;
    Tls tls = 54;
    NetworkTraffic traffic = 55;
    optional string type_name = 56;
    int64 type_uid = 57;
    google.protobuf.Struct unmapped = 58;
}

// EmailFileActivity is an OSF event in category "Network Activity"
// called Email File Activity
// defined in ocsf events/network/email_file.json
//
// Email File Activity events report files within emails.
message EmailFileActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_SEND    = 1; 
        ACTIVITY_ID_RECEIVE = 2; 
        ACTIVITY_ID_SCAN    = 3;  // Email file being scanned (example: security
                                  // scanning).
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN          = 0;
        CATEGORY_UID_NETWORK_ACTIVITY = 4;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN             = 0;   
        CLASS_UID_EMAIL_FILE_ACTIVITY = 4011;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    optional ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    repeated Attack attacks = 7;
    repeated Authorization authorizations = 8;
    optional string category_name = 9;
    CategoryUid category_uid = 10;
    optional string class_name = 11;
    ClassUid class_uid = 12;
    Cloud cloud = 13;
    optional int32 count = 14;
    Device device = 15;
    optional string disposition = 16;
    optional DispositionId disposition_id = 17;
    optional int32 duration = 18;
    string email_uid = 19;
    optional int64 end_time = 20;
    optional google.protobuf.Timestamp end_time_dt = 21;
    repeated Enrichment enrichments = 22;
    File file = 23;
    FirewallRule firewall_rule = 24;
    repeated Malware malware = 25;
    optional string message = 26;
    Metadata metadata = 27;
    repeated Observable observables = 28;
    optional string raw_data = 29;
    optional string severity = 30;
    SeverityId severity_id = 31;
    optional int64 start_time = 32;
    optional google.protobuf.Timestamp start_time_dt = 33;
    optional string status = 34;
    optional string status_code = 35;
    optional string status_detail = 36;
    optional StatusId status_id = 37;
    int64 time = 38;
    google.protobuf.Timestamp time_dt = 39;
    optional int32 timezone_offset = 40;
    optional string type_name = 41;
    int64 type_uid = 42;
    google.protobuf.Struct unmapped = 43;
}

// EmailUrlActivity is an OSF event in category "Network Activity"
// called Email URL Activity
// defined in ocsf events/network/email_url.json
//
// Email URL Activity events report URLs within an email.
message EmailUrlActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_SEND    = 1; 
        ACTIVITY_ID_RECEIVE = 2; 
        ACTIVITY_ID_SCAN    = 3;  // Email URL being scanned (example: security scanning).
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN          = 0;
        CATEGORY_UID_NETWORK_ACTIVITY = 4;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN            = 0;   
        CLASS_UID_EMAIL_URL_ACTIVITY = 4012;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    optional ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    repeated Attack attacks = 7;
    repeated Authorization authorizations = 8;
    optional string category_name = 9;
    CategoryUid category_uid = 10;
    optional string class_name = 11;
    ClassUid class_uid = 12;
    Cloud cloud = 13;
    optional int32 count = 14;
    Device device = 15;
    optional string disposition = 16;
    optional DispositionId disposition_id = 17;
    optional int32 duration = 18;
    string email_uid = 19;
    optional int64 end_time = 20;
    optional google.protobuf.Timestamp end_time_dt = 21;
    repeated Enrichment enrichments = 22;
    FirewallRule firewall_rule = 23;
    repeated Malware malware = 24;
    optional string message = 25;
    Metadata metadata = 26;
    repeated Observable observables = 27;
    optional string raw_data = 28;
    optional string severity = 29;
    SeverityId severity_id = 30;
    optional int64 start_time = 31;
    optional google.protobuf.Timestamp start_time_dt = 32;
    optional string status = 33;
    optional string status_code = 34;
    optional string status_detail = 35;
    optional StatusId status_id = 36;
    int64 time = 37;
    google.protobuf.Timestamp time_dt = 38;
    optional int32 timezone_offset = 39;
    optional string type_name = 40;
    int64 type_uid = 41;
    google.protobuf.Struct unmapped = 42;
    Url url = 43;
}

// NtpActivity is an OSF event in category "Network Activity"
// called NTP Activity
// defined in ocsf events/network/ntp.json
//
// The Network Time Protocol (NTP) Activity events report instances of remote
// clients synchronizing their clocks with an NTP server, as observed on the
// network.
message NtpActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN                    = 0;  // Not used in standard NTP
                                                     // implementations.
        ACTIVITY_ID_SYMMETRIC_ACTIVE_EXCHANGE  = 1;  // Bidirectional time exchange
                                                     // between devices.
        ACTIVITY_ID_SYMMETRIC_PASSIVE_RESPONSE = 2;  // Device responds as a server to
                                                     // peers in symmetric active mode.
        ACTIVITY_ID_CLIENT_SYNCHRONIZATION     = 3;  // NTP client, syncs with servers.
        ACTIVITY_ID_SERVER_RESPONSE            = 4;  // Dedicated NTP time server,
                                                     // responds to clients.
        ACTIVITY_ID_BROADCAST                  = 5;  // Broadcast time info to network
                                                     // devices.
        ACTIVITY_ID_CONTROL                    = 6;  // Monitoring and control messaging.
        ACTIVITY_ID_PRIVATE_USE_CASE           = 7;  // Reserved - Not defined in standard
                                                     // NTP specifications.
        ACTIVITY_ID_OTHER                      = 99; // The event activity is not mapped.
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN          = 0;
        CATEGORY_UID_NETWORK_ACTIVITY = 4;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN      = 0;   
        CLASS_UID_NTP_ACTIVITY = 4013;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    enum StratumId {
        STRATUM_ID_UNKNOWN          = 0;  // Unspecified or invalid.
        STRATUM_ID_PRIMARY_SERVER   = 1;  // The highest precision primary server (e.g
                                          // atomic clock or GPS).
        STRATUM_ID_SECONDARY_SERVER = 2;  // A secondary level server (possible values: 2-
                                          // 15).
        STRATUM_ID_UNSYNCHRONIZED   = 16;
        STRATUM_ID_RESERVED         = 17; // Reserved stratum (possible values: 17-255).
        STRATUM_ID_OTHER            = 99; // The stratum level is not mapped. See the
                                          // <code>stratum</code> attribute, which
                                          // contains a data source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    optional string app_name = 7;
    repeated Attack attacks = 8;
    repeated Authorization authorizations = 9;
    optional string category_name = 10;
    CategoryUid category_uid = 11;
    optional string class_name = 12;
    ClassUid class_uid = 13;
    Cloud cloud = 14;
    NetworkConnectionInfo connection_info = 15;
    optional int32 count = 16;
    optional int32 delay = 17;
    Device device = 18;
    optional int32 dispersion = 19;
    optional string disposition = 20;
    optional DispositionId disposition_id = 21;
    NetworkEndpoint dst_endpoint = 22;
    optional int32 duration = 23;
    optional int64 end_time = 24;
    optional google.protobuf.Timestamp end_time_dt = 25;
    repeated Enrichment enrichments = 26;
    FirewallRule firewall_rule = 27;
    LoadBalancer load_balancer = 28;
    repeated Malware malware = 29;
    optional string message = 30;
    Metadata metadata = 31;
    repeated Observable observables = 32;
    optional int32 precision = 33;
    NetworkProxy proxy = 34;
    NetworkConnectionInfo proxy_connection_info = 35;
    NetworkProxy proxy_endpoint = 36;
    HttpRequest proxy_http_request = 37;
    HttpResponse proxy_http_response = 38;
    Tls proxy_tls = 39;
    NetworkTraffic proxy_traffic = 40;
    optional string raw_data = 41;
    optional string severity = 42;
    SeverityId severity_id = 43;
    NetworkEndpoint src_endpoint = 44;
    optional int64 start_time = 45;
    optional google.protobuf.Timestamp start_time_dt = 46;
    optional string status = 47;
    optional string status_code = 48;
    optional string status_detail = 49;
    optional StatusId status_id = 50;
    optional string stratum = 51;
    optional StratumId stratum_id = 52;
    int64 time = 53;
    google.protobuf.Timestamp time_dt = 54;
    optional int32 timezone_offset = 55;
    Tls tls = 56;
    NetworkTraffic traffic = 57;
    optional string type_name = 58;
    int64 type_uid = 59;
    google.protobuf.Struct unmapped = 60;
    string version = 61;
}

// TunnelActivity is an OSF event in category "Network Activity"
// called Tunnel Activity
// defined in ocsf events/network/tunnel_activity.json
//
// Tunnel Activity events report secure tunnel establishment (such as VPN),
// teardowns, renewals, and other network tunnel specific actions.
message TunnelActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0;  // The event activity is unknown.
        ACTIVITY_ID_OPEN    = 1;  // Open a tunnel.
        ACTIVITY_ID_CLOSE   = 2;  // Close a tunnel.
        ACTIVITY_ID_RENEW   = 3;  // Renew a tunnel.
        ACTIVITY_ID_OTHER   = 99; // The event activity is not mapped. See the
                                  // <code>activity_name</code> attribute, which contains
                                  // a data source specific value.
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN          = 0;
        CATEGORY_UID_NETWORK_ACTIVITY = 4;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN         = 0;   
        CLASS_UID_TUNNEL_ACTIVITY = 4014;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    enum TunnelTypeId {
        TUNNEL_TYPE_ID_UNKNOWN      = 0; 
        TUNNEL_TYPE_ID_SPLIT_TUNNEL = 1; 
        TUNNEL_TYPE_ID_FULL_TUNNEL  = 2; 
        TUNNEL_TYPE_ID_OTHER        = 99;
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    optional string app_name = 7;
    repeated Attack attacks = 8;
    repeated Authorization authorizations = 9;
    optional string category_name = 10;
    CategoryUid category_uid = 11;
    optional string class_name = 12;
    ClassUid class_uid = 13;
    Cloud cloud = 14;
    NetworkConnectionInfo connection_info = 15;
    optional int32 count = 16;
    Device device = 17;
    optional string disposition = 18;
    optional DispositionId disposition_id = 19;
    NetworkEndpoint dst_endpoint = 20;
    optional int32 duration = 21;
    optional int64 end_time = 22;
    optional google.protobuf.Timestamp end_time_dt = 23;
    repeated Enrichment enrichments = 24;
    FirewallRule firewall_rule = 25;
    LoadBalancer load_balancer = 26;
    repeated Malware malware = 27;
    optional string message = 28;
    Metadata metadata = 29;
    repeated Observable observables = 30;
    optional string protocol_name = 31;
    NetworkProxy proxy = 32;
    NetworkConnectionInfo proxy_connection_info = 33;
    NetworkProxy proxy_endpoint = 34;
    HttpRequest proxy_http_request = 35;
    HttpResponse proxy_http_response = 36;
    Tls proxy_tls = 37;
    NetworkTraffic proxy_traffic = 38;
    optional string raw_data = 39;
    Session session = 40;
    optional string severity = 41;
    SeverityId severity_id = 42;
    NetworkEndpoint src_endpoint = 43;
    optional int64 start_time = 44;
    optional google.protobuf.Timestamp start_time_dt = 45;
    optional string status = 46;
    optional string status_code = 47;
    optional string status_detail = 48;
    optional StatusId status_id = 49;
    int64 time = 50;
    google.protobuf.Timestamp time_dt = 51;
    optional int32 timezone_offset = 52;
    Tls tls = 53;
    NetworkTraffic traffic = 54;
    NetworkInterface tunnel_interface = 55;
    optional string tunnel_type = 56;
    optional TunnelTypeId tunnel_type_id = 57;
    optional string type_name = 58;
    int64 type_uid = 59;
    google.protobuf.Struct unmapped = 60;
    User user = 61;
}

// InventoryInfo is an OSF event in category "Discovery"
// called Device Inventory Info
// defined in ocsf events/discovery/inventory_info.json
//
// Device Inventory Info events report device inventory data that is either
// logged or proactively collected. For example, when collecting device
// information from a CMDB or running a network sweep of connected devices.
message InventoryInfo {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_LOG     = 1;  // The discovered information is via a log.
        ACTIVITY_ID_COLLECT = 2;  // The discovered information is via a collection
                                  // process.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN               = 0;   
        CLASS_UID_DEVICE_INVENTORY_INFO = 5001;
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    optional string message = 16;
    Metadata metadata = 17;
    repeated Observable observables = 18;
    optional string raw_data = 19;
    optional string severity = 20;
    SeverityId severity_id = 21;
    optional int64 start_time = 22;
    optional google.protobuf.Timestamp start_time_dt = 23;
    optional string status = 24;
    optional string status_code = 25;
    optional string status_detail = 26;
    optional StatusId status_id = 27;
    int64 time = 28;
    google.protobuf.Timestamp time_dt = 29;
    optional int32 timezone_offset = 30;
    optional string type_name = 31;
    int64 type_uid = 32;
    google.protobuf.Struct unmapped = 33;
}

// ConfigState is an OSF event in category "Discovery"
// called Device Config State
// defined in ocsf events/discovery/config_state.json
//
// Device Config State events report device configuration data and CIS
// Benchmark results.
message ConfigState {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_LOG     = 1;  // The discovered information is via a log.
        ACTIVITY_ID_COLLECT = 2;  // The discovered information is via a collection
                                  // process.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN             = 0;   
        CLASS_UID_DEVICE_CONFIG_STATE = 5002;
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    CisBenchmarkResult cis_benchmark_result = 7;
    optional string class_name = 8;
    ClassUid class_uid = 9;
    Cloud cloud = 10;
    optional int32 count = 11;
    Device device = 12;
    optional int32 duration = 13;
    optional int64 end_time = 14;
    optional google.protobuf.Timestamp end_time_dt = 15;
    repeated Enrichment enrichments = 16;
    optional string message = 17;
    Metadata metadata = 18;
    repeated Observable observables = 19;
    optional string raw_data = 20;
    optional string severity = 21;
    SeverityId severity_id = 22;
    optional int64 start_time = 23;
    optional google.protobuf.Timestamp start_time_dt = 24;
    optional string status = 25;
    optional string status_code = 26;
    optional string status_detail = 27;
    optional StatusId status_id = 28;
    int64 time = 29;
    google.protobuf.Timestamp time_dt = 30;
    optional int32 timezone_offset = 31;
    optional string type_name = 32;
    int64 type_uid = 33;
    google.protobuf.Struct unmapped = 34;
}

// UserInventory is an OSF event in category "Discovery"
// called User Inventory Info
// defined in ocsf events/discovery/user_inventory.json
//
// User Inventory Info events report user inventory data that is either logged
// or proactively collected. For example, when collecting user information
// from Active Directory entries.
message UserInventory {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_LOG     = 1;  // The discovered information is via a log.
        ACTIVITY_ID_COLLECT = 2;  // The discovered information is via a collection
                                  // process.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN             = 0;   
        CLASS_UID_USER_INVENTORY_INFO = 5003;
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    optional int32 duration = 11;
    optional int64 end_time = 12;
    optional google.protobuf.Timestamp end_time_dt = 13;
    repeated Enrichment enrichments = 14;
    optional string message = 15;
    Metadata metadata = 16;
    repeated Observable observables = 17;
    optional string raw_data = 18;
    optional string severity = 19;
    SeverityId severity_id = 20;
    optional int64 start_time = 21;
    optional google.protobuf.Timestamp start_time_dt = 22;
    optional string status = 23;
    optional string status_code = 24;
    optional string status_detail = 25;
    optional StatusId status_id = 26;
    int64 time = 27;
    google.protobuf.Timestamp time_dt = 28;
    optional int32 timezone_offset = 29;
    optional string type_name = 30;
    int64 type_uid = 31;
    google.protobuf.Struct unmapped = 32;
    User user = 33;
}

// PatchState is an OSF event in category "Discovery"
// called Operating System Patch State
// defined in ocsf events/discovery/patch_state.json
//
// Operating System Patch State reports the installation of an OS patch to a
// device and any associated knowledgebase articles.
message PatchState {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_LOG     = 1;  // The discovered information is via a log.
        ACTIVITY_ID_COLLECT = 2;  // The discovered information is via a collection
                                  // process.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN                      = 0;   
        CLASS_UID_OPERATING_SYSTEM_PATCH_STATE = 5004;
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Api api = 3;
    optional string category_name = 4;
    CategoryUid category_uid = 5;
    optional string class_name = 6;
    ClassUid class_uid = 7;
    Cloud cloud = 8;
    optional int32 count = 9;
    Device device = 10;
    optional int32 duration = 11;
    optional int64 end_time = 12;
    optional google.protobuf.Timestamp end_time_dt = 13;
    repeated Enrichment enrichments = 14;
    repeated KbArticle kb_article_list = 15;
    optional string message = 16;
    Metadata metadata = 17;
    repeated Observable observables = 18;
    optional string raw_data = 19;
    optional string severity = 20;
    SeverityId severity_id = 21;
    optional int64 start_time = 22;
    optional google.protobuf.Timestamp start_time_dt = 23;
    optional string status = 24;
    optional string status_code = 25;
    optional string status_detail = 26;
    optional StatusId status_id = 27;
    int64 time = 28;
    google.protobuf.Timestamp time_dt = 29;
    optional int32 timezone_offset = 30;
    optional string type_name = 31;
    int64 type_uid = 32;
    google.protobuf.Struct unmapped = 33;
}

// RegistryKeyQuery is an OSF event in category "Discovery"
// called Registry Key Query
// defined in win events/registry_key_query.json
//
// Registry Key Query events report information about discovered Windows
// registry keys.
message RegistryKeyQuery {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_QUERY   = 1;  // The discovered results are via a query request.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN            = 0;     
        CLASS_UID_REGISTRY_KEY_QUERY = 205004;
    }
    enum QueryResultId {
        QUERY_RESULT_ID_UNKNOWN        = 0;  // The query result is unknown.
        QUERY_RESULT_ID_EXISTS         = 1;  // The target was found.
        QUERY_RESULT_ID_PARTIAL        = 2;  // The target was partially found.
        QUERY_RESULT_ID_DOES_NOT_EXIST = 3;  // The target was not found.
        QUERY_RESULT_ID_ERROR          = 4;  // The discovery attempt failed.
        QUERY_RESULT_ID_UNSUPPORTED    = 5;  // Discovery of the target was not supported.
        QUERY_RESULT_ID_OTHER          = 99; // The query result is not mapped. See the
                                             // <code>query_result</code> attribute, which
                                             // contains a data source specific value.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    optional string message = 16;
    Metadata metadata = 17;
    repeated Observable observables = 18;
    QueryInfo query_info = 19;
    optional string query_result = 20;
    QueryResultId query_result_id = 21;
    optional string raw_data = 22;
    optional string severity = 23;
    SeverityId severity_id = 24;
    optional int64 start_time = 25;
    optional google.protobuf.Timestamp start_time_dt = 26;
    optional string status = 27;
    optional string status_code = 28;
    optional string status_detail = 29;
    optional StatusId status_id = 30;
    int64 time = 31;
    google.protobuf.Timestamp time_dt = 32;
    optional int32 timezone_offset = 33;
    optional string type_name = 34;
    int64 type_uid = 35;
    google.protobuf.Struct unmapped = 36;
    RegKey reg_key = 2001;
}

// RegistryValueQuery is an OSF event in category "Discovery"
// called Registry Value Query
// defined in win events/registry_value_query.json
//
// Registry Value Query events report information about discovered Windows
// registry values.
message RegistryValueQuery {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_QUERY   = 1;  // The discovered results are via a query request.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN              = 0;     
        CLASS_UID_REGISTRY_VALUE_QUERY = 205005;
    }
    enum QueryResultId {
        QUERY_RESULT_ID_UNKNOWN        = 0;  // The query result is unknown.
        QUERY_RESULT_ID_EXISTS         = 1;  // The target was found.
        QUERY_RESULT_ID_PARTIAL        = 2;  // The target was partially found.
        QUERY_RESULT_ID_DOES_NOT_EXIST = 3;  // The target was not found.
        QUERY_RESULT_ID_ERROR          = 4;  // The discovery attempt failed.
        QUERY_RESULT_ID_UNSUPPORTED    = 5;  // Discovery of the target was not supported.
        QUERY_RESULT_ID_OTHER          = 99; // The query result is not mapped. See the
                                             // <code>query_result</code> attribute, which
                                             // contains a data source specific value.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    optional string message = 16;
    Metadata metadata = 17;
    repeated Observable observables = 18;
    QueryInfo query_info = 19;
    optional string query_result = 20;
    QueryResultId query_result_id = 21;
    optional string raw_data = 22;
    optional string severity = 23;
    SeverityId severity_id = 24;
    optional int64 start_time = 25;
    optional google.protobuf.Timestamp start_time_dt = 26;
    optional string status = 27;
    optional string status_code = 28;
    optional string status_detail = 29;
    optional StatusId status_id = 30;
    int64 time = 31;
    google.protobuf.Timestamp time_dt = 32;
    optional int32 timezone_offset = 33;
    optional string type_name = 34;
    int64 type_uid = 35;
    google.protobuf.Struct unmapped = 36;
    RegValue reg_value = 2001;
}

// KernelObjectQuery is an OSF event in category "Discovery"
// called Kernel Object Query
// defined in ocsf events/discovery/kernel_object_query.json
//
// Kernel Object Query events report information about discovered kernel
// resources.
message KernelObjectQuery {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_QUERY   = 1;  // The discovered results are via a query request.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN             = 0;   
        CLASS_UID_KERNEL_OBJECT_QUERY = 5006;
    }
    enum QueryResultId {
        QUERY_RESULT_ID_UNKNOWN        = 0;  // The query result is unknown.
        QUERY_RESULT_ID_EXISTS         = 1;  // The target was found.
        QUERY_RESULT_ID_PARTIAL        = 2;  // The target was partially found.
        QUERY_RESULT_ID_DOES_NOT_EXIST = 3;  // The target was not found.
        QUERY_RESULT_ID_ERROR          = 4;  // The discovery attempt failed.
        QUERY_RESULT_ID_UNSUPPORTED    = 5;  // Discovery of the target was not supported.
        QUERY_RESULT_ID_OTHER          = 99; // The query result is not mapped. See the
                                             // <code>query_result</code> attribute, which
                                             // contains a data source specific value.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    Kernel kernel = 16;
    optional string message = 17;
    Metadata metadata = 18;
    repeated Observable observables = 19;
    QueryInfo query_info = 20;
    optional string query_result = 21;
    QueryResultId query_result_id = 22;
    optional string raw_data = 23;
    optional string severity = 24;
    SeverityId severity_id = 25;
    optional int64 start_time = 26;
    optional google.protobuf.Timestamp start_time_dt = 27;
    optional string status = 28;
    optional string status_code = 29;
    optional string status_detail = 30;
    optional StatusId status_id = 31;
    int64 time = 32;
    google.protobuf.Timestamp time_dt = 33;
    optional int32 timezone_offset = 34;
    optional string type_name = 35;
    int64 type_uid = 36;
    google.protobuf.Struct unmapped = 37;
}

// FileQuery is an OSF event in category "Discovery"
// called File Query
// defined in ocsf events/discovery/file_query.json
//
// File Query events report information about files that are present on the
// system.
message FileQuery {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_QUERY   = 1;  // The discovered results are via a query request.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN    = 0;   
        CLASS_UID_FILE_QUERY = 5007;
    }
    enum QueryResultId {
        QUERY_RESULT_ID_UNKNOWN        = 0;  // The query result is unknown.
        QUERY_RESULT_ID_EXISTS         = 1;  // The target was found.
        QUERY_RESULT_ID_PARTIAL        = 2;  // The target was partially found.
        QUERY_RESULT_ID_DOES_NOT_EXIST = 3;  // The target was not found.
        QUERY_RESULT_ID_ERROR          = 4;  // The discovery attempt failed.
        QUERY_RESULT_ID_UNSUPPORTED    = 5;  // Discovery of the target was not supported.
        QUERY_RESULT_ID_OTHER          = 99; // The query result is not mapped. See the
                                             // <code>query_result</code> attribute, which
                                             // contains a data source specific value.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    File file = 16;
    optional string message = 17;
    Metadata metadata = 18;
    repeated Observable observables = 19;
    QueryInfo query_info = 20;
    optional string query_result = 21;
    QueryResultId query_result_id = 22;
    optional string raw_data = 23;
    optional string severity = 24;
    SeverityId severity_id = 25;
    optional int64 start_time = 26;
    optional google.protobuf.Timestamp start_time_dt = 27;
    optional string status = 28;
    optional string status_code = 29;
    optional string status_detail = 30;
    optional StatusId status_id = 31;
    int64 time = 32;
    google.protobuf.Timestamp time_dt = 33;
    optional int32 timezone_offset = 34;
    optional string type_name = 35;
    int64 type_uid = 36;
    google.protobuf.Struct unmapped = 37;
}

// FolderQuery is an OSF event in category "Discovery"
// called Folder Query
// defined in ocsf events/discovery/folder_query.json
//
// Folder Query events report information about folders that are present on
// the system.
message FolderQuery {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_QUERY   = 1;  // The discovered results are via a query request.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN      = 0;   
        CLASS_UID_FOLDER_QUERY = 5008;
    }
    enum QueryResultId {
        QUERY_RESULT_ID_UNKNOWN        = 0;  // The query result is unknown.
        QUERY_RESULT_ID_EXISTS         = 1;  // The target was found.
        QUERY_RESULT_ID_PARTIAL        = 2;  // The target was partially found.
        QUERY_RESULT_ID_DOES_NOT_EXIST = 3;  // The target was not found.
        QUERY_RESULT_ID_ERROR          = 4;  // The discovery attempt failed.
        QUERY_RESULT_ID_UNSUPPORTED    = 5;  // Discovery of the target was not supported.
        QUERY_RESULT_ID_OTHER          = 99; // The query result is not mapped. See the
                                             // <code>query_result</code> attribute, which
                                             // contains a data source specific value.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    File folder = 16;
    optional string message = 17;
    Metadata metadata = 18;
    repeated Observable observables = 19;
    QueryInfo query_info = 20;
    optional string query_result = 21;
    QueryResultId query_result_id = 22;
    optional string raw_data = 23;
    optional string severity = 24;
    SeverityId severity_id = 25;
    optional int64 start_time = 26;
    optional google.protobuf.Timestamp start_time_dt = 27;
    optional string status = 28;
    optional string status_code = 29;
    optional string status_detail = 30;
    optional StatusId status_id = 31;
    int64 time = 32;
    google.protobuf.Timestamp time_dt = 33;
    optional int32 timezone_offset = 34;
    optional string type_name = 35;
    int64 type_uid = 36;
    google.protobuf.Struct unmapped = 37;
}

// AdminGroupQuery is an OSF event in category "Discovery"
// called Admin Group Query
// defined in ocsf events/discovery/group_query.json
//
// Admin Group Query events report information about administrative groups.
message AdminGroupQuery {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_QUERY   = 1;  // The discovered results are via a query request.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN           = 0;   
        CLASS_UID_ADMIN_GROUP_QUERY = 5009;
    }
    enum QueryResultId {
        QUERY_RESULT_ID_UNKNOWN        = 0;  // The query result is unknown.
        QUERY_RESULT_ID_EXISTS         = 1;  // The target was found.
        QUERY_RESULT_ID_PARTIAL        = 2;  // The target was partially found.
        QUERY_RESULT_ID_DOES_NOT_EXIST = 3;  // The target was not found.
        QUERY_RESULT_ID_ERROR          = 4;  // The discovery attempt failed.
        QUERY_RESULT_ID_UNSUPPORTED    = 5;  // Discovery of the target was not supported.
        QUERY_RESULT_ID_OTHER          = 99; // The query result is not mapped. See the
                                             // <code>query_result</code> attribute, which
                                             // contains a data source specific value.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    Group group = 16;
    optional string message = 17;
    Metadata metadata = 18;
    repeated Observable observables = 19;
    QueryInfo query_info = 20;
    optional string query_result = 21;
    QueryResultId query_result_id = 22;
    optional string raw_data = 23;
    optional string severity = 24;
    SeverityId severity_id = 25;
    optional int64 start_time = 26;
    optional google.protobuf.Timestamp start_time_dt = 27;
    optional string status = 28;
    optional string status_code = 29;
    optional string status_detail = 30;
    optional StatusId status_id = 31;
    int64 time = 32;
    google.protobuf.Timestamp time_dt = 33;
    optional int32 timezone_offset = 34;
    optional string type_name = 35;
    int64 type_uid = 36;
    google.protobuf.Struct unmapped = 37;
    repeated User users = 38;
}

// JobQuery is an OSF event in category "Discovery"
// called Job Query
// defined in ocsf events/discovery/job_query.json
//
// Job Query events report information about scheduled jobs.
message JobQuery {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_QUERY   = 1;  // The discovered results are via a query request.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN   = 0;   
        CLASS_UID_JOB_QUERY = 5010;
    }
    enum QueryResultId {
        QUERY_RESULT_ID_UNKNOWN        = 0;  // The query result is unknown.
        QUERY_RESULT_ID_EXISTS         = 1;  // The target was found.
        QUERY_RESULT_ID_PARTIAL        = 2;  // The target was partially found.
        QUERY_RESULT_ID_DOES_NOT_EXIST = 3;  // The target was not found.
        QUERY_RESULT_ID_ERROR          = 4;  // The discovery attempt failed.
        QUERY_RESULT_ID_UNSUPPORTED    = 5;  // Discovery of the target was not supported.
        QUERY_RESULT_ID_OTHER          = 99; // The query result is not mapped. See the
                                             // <code>query_result</code> attribute, which
                                             // contains a data source specific value.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    Job job = 16;
    optional string message = 17;
    Metadata metadata = 18;
    repeated Observable observables = 19;
    QueryInfo query_info = 20;
    optional string query_result = 21;
    QueryResultId query_result_id = 22;
    optional string raw_data = 23;
    optional string severity = 24;
    SeverityId severity_id = 25;
    optional int64 start_time = 26;
    optional google.protobuf.Timestamp start_time_dt = 27;
    optional string status = 28;
    optional string status_code = 29;
    optional string status_detail = 30;
    optional StatusId status_id = 31;
    int64 time = 32;
    google.protobuf.Timestamp time_dt = 33;
    optional int32 timezone_offset = 34;
    optional string type_name = 35;
    int64 type_uid = 36;
    google.protobuf.Struct unmapped = 37;
}

// ModuleQuery is an OSF event in category "Discovery"
// called Module Query
// defined in ocsf events/discovery/module_query.json
//
// Module Query events report information about loaded modules.
message ModuleQuery {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_QUERY   = 1;  // The discovered results are via a query request.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN      = 0;   
        CLASS_UID_MODULE_QUERY = 5011;
    }
    enum QueryResultId {
        QUERY_RESULT_ID_UNKNOWN        = 0;  // The query result is unknown.
        QUERY_RESULT_ID_EXISTS         = 1;  // The target was found.
        QUERY_RESULT_ID_PARTIAL        = 2;  // The target was partially found.
        QUERY_RESULT_ID_DOES_NOT_EXIST = 3;  // The target was not found.
        QUERY_RESULT_ID_ERROR          = 4;  // The discovery attempt failed.
        QUERY_RESULT_ID_UNSUPPORTED    = 5;  // Discovery of the target was not supported.
        QUERY_RESULT_ID_OTHER          = 99; // The query result is not mapped. See the
                                             // <code>query_result</code> attribute, which
                                             // contains a data source specific value.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    optional string message = 16;
    Metadata metadata = 17;
    Module module = 18;
    repeated Observable observables = 19;
    Process process = 20;
    QueryInfo query_info = 21;
    optional string query_result = 22;
    QueryResultId query_result_id = 23;
    optional string raw_data = 24;
    optional string severity = 25;
    SeverityId severity_id = 26;
    optional int64 start_time = 27;
    optional google.protobuf.Timestamp start_time_dt = 28;
    optional string status = 29;
    optional string status_code = 30;
    optional string status_detail = 31;
    optional StatusId status_id = 32;
    int64 time = 33;
    google.protobuf.Timestamp time_dt = 34;
    optional int32 timezone_offset = 35;
    optional string type_name = 36;
    int64 type_uid = 37;
    google.protobuf.Struct unmapped = 38;
}

// NetworkConnectionQuery is an OSF event in category "Discovery"
// called Network Connection Query
// defined in ocsf events/discovery/network_connection_query.json
//
// Network Connection Query events report information about active network
// connections.
message NetworkConnectionQuery {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_QUERY   = 1;  // The discovered results are via a query request.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN                  = 0;   
        CLASS_UID_NETWORK_CONNECTION_QUERY = 5012;
    }
    enum QueryResultId {
        QUERY_RESULT_ID_UNKNOWN        = 0;  // The query result is unknown.
        QUERY_RESULT_ID_EXISTS         = 1;  // The target was found.
        QUERY_RESULT_ID_PARTIAL        = 2;  // The target was partially found.
        QUERY_RESULT_ID_DOES_NOT_EXIST = 3;  // The target was not found.
        QUERY_RESULT_ID_ERROR          = 4;  // The discovery attempt failed.
        QUERY_RESULT_ID_UNSUPPORTED    = 5;  // Discovery of the target was not supported.
        QUERY_RESULT_ID_OTHER          = 99; // The query result is not mapped. See the
                                             // <code>query_result</code> attribute, which
                                             // contains a data source specific value.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StateId {
        STATE_ID_UNKNOWN     = 0;  // The socket state is unknown.
        STATE_ID_ESTABLISHED = 1;  // The socket has an established connection between a
                                   // local application and a remote peer.
        STATE_ID_SYN_SENT    = 2;  // The socket is actively trying to establish a
                                   // connection to a remote peer.
        STATE_ID_SYN_RECV    = 3;  // The socket has passively received a connection
                                   // request from a remote peer.
        STATE_ID_FIN_WAIT1   = 4;  // The socket connection has been closed by the local
                                   // application, the remote peer has not yet
                                   // acknowledged the close, and the system is waiting
                                   // for it to close its half of the connection.
        STATE_ID_FIN_WAIT2   = 5;  // The socket connection has been closed by the local
                                   // application, the remote peer has acknowledged the
                                   // close, and the system is waiting for it to close its
                                   // half of the connection.
        STATE_ID_TIME_WAIT   = 6;  // The socket connection has been closed by the local
                                   // application, the remote peer has closed its half of
                                   // the connection, and the system is waiting to be sure
                                   // that the remote peer received the last
                                   // acknowledgement.
        STATE_ID_CLOSED      = 7;  // The socket is not in use.
        STATE_ID_CLOSE_WAIT  = 8;  // The socket connection has been closed by the remote
                                   // peer, and the system is waiting for the local
                                   // application to close its half of the connection.
        STATE_ID_LAST_ACK    = 9;  // The socket connection has been closed by the remote
                                   // peer, the local application has closed its half of
                                   // the connection, and the system is waiting for the
                                   // remote peer to acknowledge the close.
        STATE_ID_LISTEN      = 10; // The socket is listening for incoming connections.
        STATE_ID_CLOSING     = 11; // The socket connection has been closed by the local
                                   // application and the remote peer simultaneously, and
                                   // the remote peer has not yet acknowledged the close
                                   // attempt of the local application.
        STATE_ID_OTHER       = 99; // The state is not mapped. See the <code>state</code>
                                   // attribute, which contains a data source specific
                                   // value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    NetworkConnectionInfo connection_info = 10;
    optional int32 count = 11;
    Device device = 12;
    optional int32 duration = 13;
    optional int64 end_time = 14;
    optional google.protobuf.Timestamp end_time_dt = 15;
    repeated Enrichment enrichments = 16;
    optional string message = 17;
    Metadata metadata = 18;
    repeated Observable observables = 19;
    Process process = 20;
    QueryInfo query_info = 21;
    optional string query_result = 22;
    QueryResultId query_result_id = 23;
    optional string raw_data = 24;
    optional string severity = 25;
    SeverityId severity_id = 26;
    optional int64 start_time = 27;
    optional google.protobuf.Timestamp start_time_dt = 28;
    optional string state = 29;
    StateId state_id = 30;
    optional string status = 31;
    optional string status_code = 32;
    optional string status_detail = 33;
    optional StatusId status_id = 34;
    int64 time = 35;
    google.protobuf.Timestamp time_dt = 36;
    optional int32 timezone_offset = 37;
    optional string type_name = 38;
    int64 type_uid = 39;
    google.protobuf.Struct unmapped = 40;
}

// NetworksQuery is an OSF event in category "Discovery"
// called Networks Query
// defined in ocsf events/discovery/networks_query.json
//
// Networks Query events report information about network adapters.
message NetworksQuery {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_QUERY   = 1;  // The discovered results are via a query request.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN        = 0;   
        CLASS_UID_NETWORKS_QUERY = 5013;
    }
    enum QueryResultId {
        QUERY_RESULT_ID_UNKNOWN        = 0;  // The query result is unknown.
        QUERY_RESULT_ID_EXISTS         = 1;  // The target was found.
        QUERY_RESULT_ID_PARTIAL        = 2;  // The target was partially found.
        QUERY_RESULT_ID_DOES_NOT_EXIST = 3;  // The target was not found.
        QUERY_RESULT_ID_ERROR          = 4;  // The discovery attempt failed.
        QUERY_RESULT_ID_UNSUPPORTED    = 5;  // Discovery of the target was not supported.
        QUERY_RESULT_ID_OTHER          = 99; // The query result is not mapped. See the
                                             // <code>query_result</code> attribute, which
                                             // contains a data source specific value.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    optional string message = 16;
    Metadata metadata = 17;
    repeated NetworkInterface network_interfaces = 18;
    repeated Observable observables = 19;
    QueryInfo query_info = 20;
    optional string query_result = 21;
    QueryResultId query_result_id = 22;
    optional string raw_data = 23;
    optional string severity = 24;
    SeverityId severity_id = 25;
    optional int64 start_time = 26;
    optional google.protobuf.Timestamp start_time_dt = 27;
    optional string status = 28;
    optional string status_code = 29;
    optional string status_detail = 30;
    optional StatusId status_id = 31;
    int64 time = 32;
    google.protobuf.Timestamp time_dt = 33;
    optional int32 timezone_offset = 34;
    optional string type_name = 35;
    int64 type_uid = 36;
    google.protobuf.Struct unmapped = 37;
}

// PeripheralDeviceQuery is an OSF event in category "Discovery"
// called Peripheral Device Query
// defined in ocsf events/discovery/peripheral_device_query.json
//
// Peripheral Device Query events report information about peripheral devices.
message PeripheralDeviceQuery {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_QUERY   = 1;  // The discovered results are via a query request.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN                 = 0;   
        CLASS_UID_PERIPHERAL_DEVICE_QUERY = 5014;
    }
    enum QueryResultId {
        QUERY_RESULT_ID_UNKNOWN        = 0;  // The query result is unknown.
        QUERY_RESULT_ID_EXISTS         = 1;  // The target was found.
        QUERY_RESULT_ID_PARTIAL        = 2;  // The target was partially found.
        QUERY_RESULT_ID_DOES_NOT_EXIST = 3;  // The target was not found.
        QUERY_RESULT_ID_ERROR          = 4;  // The discovery attempt failed.
        QUERY_RESULT_ID_UNSUPPORTED    = 5;  // Discovery of the target was not supported.
        QUERY_RESULT_ID_OTHER          = 99; // The query result is not mapped. See the
                                             // <code>query_result</code> attribute, which
                                             // contains a data source specific value.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    optional string message = 16;
    Metadata metadata = 17;
    repeated Observable observables = 18;
    PeripheralDevice peripheral_device = 19;
    QueryInfo query_info = 20;
    optional string query_result = 21;
    QueryResultId query_result_id = 22;
    optional string raw_data = 23;
    optional string severity = 24;
    SeverityId severity_id = 25;
    optional int64 start_time = 26;
    optional google.protobuf.Timestamp start_time_dt = 27;
    optional string status = 28;
    optional string status_code = 29;
    optional string status_detail = 30;
    optional StatusId status_id = 31;
    int64 time = 32;
    google.protobuf.Timestamp time_dt = 33;
    optional int32 timezone_offset = 34;
    optional string type_name = 35;
    int64 type_uid = 36;
    google.protobuf.Struct unmapped = 37;
}

// ProcessQuery is an OSF event in category "Discovery"
// called Process Query
// defined in ocsf events/discovery/process_query.json
//
// Process Query events report information about running processes.
message ProcessQuery {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_QUERY   = 1;  // The discovered results are via a query request.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN       = 0;   
        CLASS_UID_PROCESS_QUERY = 5015;
    }
    enum QueryResultId {
        QUERY_RESULT_ID_UNKNOWN        = 0;  // The query result is unknown.
        QUERY_RESULT_ID_EXISTS         = 1;  // The target was found.
        QUERY_RESULT_ID_PARTIAL        = 2;  // The target was partially found.
        QUERY_RESULT_ID_DOES_NOT_EXIST = 3;  // The target was not found.
        QUERY_RESULT_ID_ERROR          = 4;  // The discovery attempt failed.
        QUERY_RESULT_ID_UNSUPPORTED    = 5;  // Discovery of the target was not supported.
        QUERY_RESULT_ID_OTHER          = 99; // The query result is not mapped. See the
                                             // <code>query_result</code> attribute, which
                                             // contains a data source specific value.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    optional string message = 16;
    Metadata metadata = 17;
    repeated Observable observables = 18;
    Process process = 19;
    QueryInfo query_info = 20;
    optional string query_result = 21;
    QueryResultId query_result_id = 22;
    optional string raw_data = 23;
    optional string severity = 24;
    SeverityId severity_id = 25;
    optional int64 start_time = 26;
    optional google.protobuf.Timestamp start_time_dt = 27;
    optional string status = 28;
    optional string status_code = 29;
    optional string status_detail = 30;
    optional StatusId status_id = 31;
    int64 time = 32;
    google.protobuf.Timestamp time_dt = 33;
    optional int32 timezone_offset = 34;
    optional string type_name = 35;
    int64 type_uid = 36;
    google.protobuf.Struct unmapped = 37;
}

// ServiceQuery is an OSF event in category "Discovery"
// called Service Query
// defined in ocsf events/discovery/service_query.json
//
// Service Query events report information about running services.
message ServiceQuery {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_QUERY   = 1;  // The discovered results are via a query request.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN       = 0;   
        CLASS_UID_SERVICE_QUERY = 5016;
    }
    enum QueryResultId {
        QUERY_RESULT_ID_UNKNOWN        = 0;  // The query result is unknown.
        QUERY_RESULT_ID_EXISTS         = 1;  // The target was found.
        QUERY_RESULT_ID_PARTIAL        = 2;  // The target was partially found.
        QUERY_RESULT_ID_DOES_NOT_EXIST = 3;  // The target was not found.
        QUERY_RESULT_ID_ERROR          = 4;  // The discovery attempt failed.
        QUERY_RESULT_ID_UNSUPPORTED    = 5;  // Discovery of the target was not supported.
        QUERY_RESULT_ID_OTHER          = 99; // The query result is not mapped. See the
                                             // <code>query_result</code> attribute, which
                                             // contains a data source specific value.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    optional string message = 16;
    Metadata metadata = 17;
    repeated Observable observables = 18;
    QueryInfo query_info = 19;
    optional string query_result = 20;
    QueryResultId query_result_id = 21;
    optional string raw_data = 22;
    Service service = 23;
    optional string severity = 24;
    SeverityId severity_id = 25;
    optional int64 start_time = 26;
    optional google.protobuf.Timestamp start_time_dt = 27;
    optional string status = 28;
    optional string status_code = 29;
    optional string status_detail = 30;
    optional StatusId status_id = 31;
    int64 time = 32;
    google.protobuf.Timestamp time_dt = 33;
    optional int32 timezone_offset = 34;
    optional string type_name = 35;
    int64 type_uid = 36;
    google.protobuf.Struct unmapped = 37;
}

// SessionQuery is an OSF event in category "Discovery"
// called User Session Query
// defined in ocsf events/discovery/session_query.json
//
// User Session Query events report information about existing user sessions.
message SessionQuery {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_QUERY   = 1;  // The discovered results are via a query request.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN            = 0;   
        CLASS_UID_USER_SESSION_QUERY = 5017;
    }
    enum QueryResultId {
        QUERY_RESULT_ID_UNKNOWN        = 0;  // The query result is unknown.
        QUERY_RESULT_ID_EXISTS         = 1;  // The target was found.
        QUERY_RESULT_ID_PARTIAL        = 2;  // The target was partially found.
        QUERY_RESULT_ID_DOES_NOT_EXIST = 3;  // The target was not found.
        QUERY_RESULT_ID_ERROR          = 4;  // The discovery attempt failed.
        QUERY_RESULT_ID_UNSUPPORTED    = 5;  // Discovery of the target was not supported.
        QUERY_RESULT_ID_OTHER          = 99; // The query result is not mapped. See the
                                             // <code>query_result</code> attribute, which
                                             // contains a data source specific value.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    optional string message = 16;
    Metadata metadata = 17;
    repeated Observable observables = 18;
    QueryInfo query_info = 19;
    optional string query_result = 20;
    QueryResultId query_result_id = 21;
    optional string raw_data = 22;
    Session session = 23;
    optional string severity = 24;
    SeverityId severity_id = 25;
    optional int64 start_time = 26;
    optional google.protobuf.Timestamp start_time_dt = 27;
    optional string status = 28;
    optional string status_code = 29;
    optional string status_detail = 30;
    optional StatusId status_id = 31;
    int64 time = 32;
    google.protobuf.Timestamp time_dt = 33;
    optional int32 timezone_offset = 34;
    optional string type_name = 35;
    int64 type_uid = 36;
    google.protobuf.Struct unmapped = 37;
}

// UserQuery is an OSF event in category "Discovery"
// called User Query
// defined in ocsf events/discovery/user_query.json
//
// User Query events report user data that have been discovered, queried,
// polled or searched. This event differs from User Inventory as it describes
// the result of a targeted search by filtering a subset of user attributes.
message UserQuery {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_QUERY   = 1;  // The discovered results are via a query request.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN    = 0;   
        CLASS_UID_USER_QUERY = 5018;
    }
    enum QueryResultId {
        QUERY_RESULT_ID_UNKNOWN        = 0;  // The query result is unknown.
        QUERY_RESULT_ID_EXISTS         = 1;  // The target was found.
        QUERY_RESULT_ID_PARTIAL        = 2;  // The target was partially found.
        QUERY_RESULT_ID_DOES_NOT_EXIST = 3;  // The target was not found.
        QUERY_RESULT_ID_ERROR          = 4;  // The discovery attempt failed.
        QUERY_RESULT_ID_UNSUPPORTED    = 5;  // Discovery of the target was not supported.
        QUERY_RESULT_ID_OTHER          = 99; // The query result is not mapped. See the
                                             // <code>query_result</code> attribute, which
                                             // contains a data source specific value.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    optional string message = 16;
    Metadata metadata = 17;
    repeated Observable observables = 18;
    QueryInfo query_info = 19;
    optional string query_result = 20;
    QueryResultId query_result_id = 21;
    optional string raw_data = 22;
    optional string severity = 23;
    SeverityId severity_id = 24;
    optional int64 start_time = 25;
    optional google.protobuf.Timestamp start_time_dt = 26;
    optional string status = 27;
    optional string status_code = 28;
    optional string status_detail = 29;
    optional StatusId status_id = 30;
    int64 time = 31;
    google.protobuf.Timestamp time_dt = 32;
    optional int32 timezone_offset = 33;
    optional string type_name = 34;
    int64 type_uid = 35;
    google.protobuf.Struct unmapped = 36;
    User user = 37;
}

// DeviceConfigStateChange is an OSF event in category "Discovery"
// called Device Config State Change
// defined in ocsf events/discovery/device_config_state_change.json
//
// Device Config State Change events report state changes that impact the
// security of the device.
message DeviceConfigStateChange {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_LOG     = 1;  // The discovered information is via a log.
        ACTIVITY_ID_COLLECT = 2;  // The discovered information is via a collection
                                  // process.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN                    = 0;   
        CLASS_UID_DEVICE_CONFIG_STATE_CHANGE = 5019;
    }
    enum PrevSecurityLevelId {
        PREV_SECURITY_LEVEL_ID_UNKNOWN     = 0; 
        PREV_SECURITY_LEVEL_ID_SECURE      = 1; 
        PREV_SECURITY_LEVEL_ID_AT_RISK     = 2; 
        PREV_SECURITY_LEVEL_ID_COMPROMISED = 3; 
        PREV_SECURITY_LEVEL_ID_OTHER       = 99; // The security level is not mapped. See
                                                 // the <code>prev_security_level</code>
                                                 // attribute, which contains data source
                                                 // specific values.
    }
    enum SecurityLevelId {
        SECURITY_LEVEL_ID_UNKNOWN     = 0; 
        SECURITY_LEVEL_ID_SECURE      = 1; 
        SECURITY_LEVEL_ID_AT_RISK     = 2; 
        SECURITY_LEVEL_ID_COMPROMISED = 3; 
        SECURITY_LEVEL_ID_OTHER       = 99; // The security level is not mapped. See the
                                            // <code>security_level</code> attribute,
                                            // which contains data source specific values.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    optional string message = 16;
    Metadata metadata = 17;
    repeated Observable observables = 18;
    optional string prev_security_level = 19;
    optional PrevSecurityLevelId prev_security_level_id = 20;
    repeated SecurityState prev_security_states = 21;
    optional string raw_data = 22;
    optional string security_level = 23;
    optional SecurityLevelId security_level_id = 24;
    repeated SecurityState security_states = 25;
    optional string severity = 26;
    SeverityId severity_id = 27;
    optional int64 start_time = 28;
    optional google.protobuf.Timestamp start_time_dt = 29;
    optional string status = 30;
    optional string status_code = 31;
    optional string status_detail = 32;
    optional StatusId status_id = 33;
    int64 time = 34;
    google.protobuf.Timestamp time_dt = 35;
    optional int32 timezone_offset = 36;
    optional string type_name = 37;
    int64 type_uid = 38;
    google.protobuf.Struct unmapped = 39;
}

// PrefetchQuery is an OSF event in category "Discovery"
// called Prefetch Query
// defined in win events/prefetch_query.json
//
// Prefetch Query events report information about Windows prefetch files.
message PrefetchQuery {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_QUERY   = 1;  // The discovered results are via a query request.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN   = 0;
        CATEGORY_UID_DISCOVERY = 5;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN        = 0;     
        CLASS_UID_PREFETCH_QUERY = 205019;
    }
    enum QueryResultId {
        QUERY_RESULT_ID_UNKNOWN        = 0;  // The query result is unknown.
        QUERY_RESULT_ID_EXISTS         = 1;  // The target was found.
        QUERY_RESULT_ID_PARTIAL        = 2;  // The target was partially found.
        QUERY_RESULT_ID_DOES_NOT_EXIST = 3;  // The target was not found.
        QUERY_RESULT_ID_ERROR          = 4;  // The discovery attempt failed.
        QUERY_RESULT_ID_UNSUPPORTED    = 5;  // Discovery of the target was not supported.
        QUERY_RESULT_ID_OTHER          = 99; // The query result is not mapped. See the
                                             // <code>query_result</code> attribute, which
                                             // contains a data source specific value.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    optional int64 last_run_time = 16;
    optional google.protobuf.Timestamp last_run_time_dt = 17;
    optional string message = 18;
    Metadata metadata = 19;
    string name = 20;
    repeated Observable observables = 21;
    QueryInfo query_info = 22;
    optional string query_result = 23;
    QueryResultId query_result_id = 24;
    optional string raw_data = 25;
    optional string severity = 26;
    SeverityId severity_id = 27;
    optional int64 start_time = 28;
    optional google.protobuf.Timestamp start_time_dt = 29;
    optional string status = 30;
    optional string status_code = 31;
    optional string status_detail = 32;
    optional StatusId status_id = 33;
    int64 time = 34;
    google.protobuf.Timestamp time_dt = 35;
    optional int32 timezone_offset = 36;
    optional string type_name = 37;
    int64 type_uid = 38;
    google.protobuf.Struct unmapped = 39;
    optional int32 run_count = 2001;
}

// WebResourcesActivity is an OSF event in category "Application Activity"
// called Web Resources Activity
// defined in ocsf events/application/web_resources_activity.json
//
// Web Resources Activity events describe actions executed on a set of Web
// Resources.
message WebResourcesActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_CREATE  = 1;  // One or more web resources were created.
        ACTIVITY_ID_READ    = 2;  // One or more web resources were read / viewed.
        ACTIVITY_ID_UPDATE  = 3;  // One or more web resources were updated.
        ACTIVITY_ID_DELETE  = 4;  // One or more web resources were deleted.
        ACTIVITY_ID_SEARCH  = 5;  // A search was performed on one or more web resources.
        ACTIVITY_ID_IMPORT  = 6;  // One or more web resources were imported into an
                                  // Application.
        ACTIVITY_ID_EXPORT  = 7;  // One or more web resources were exported from an
                                  // Application.
        ACTIVITY_ID_SHARE   = 8;  // One or more web resources were shared.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN              = 0;
        CATEGORY_UID_APPLICATION_ACTIVITY = 6;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN                = 0;   
        CLASS_UID_WEB_RESOURCES_ACTIVITY = 6001;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    repeated Attack attacks = 7;
    repeated Authorization authorizations = 8;
    optional string category_name = 9;
    CategoryUid category_uid = 10;
    optional string class_name = 11;
    ClassUid class_uid = 12;
    Cloud cloud = 13;
    optional int32 count = 14;
    Device device = 15;
    optional string disposition = 16;
    optional DispositionId disposition_id = 17;
    NetworkEndpoint dst_endpoint = 18;
    optional int32 duration = 19;
    optional int64 end_time = 20;
    optional google.protobuf.Timestamp end_time_dt = 21;
    repeated Enrichment enrichments = 22;
    FirewallRule firewall_rule = 23;
    HttpRequest http_request = 24;
    HttpResponse http_response = 25;
    repeated Malware malware = 26;
    optional string message = 27;
    Metadata metadata = 28;
    repeated Observable observables = 29;
    NetworkConnectionInfo proxy_connection_info = 30;
    NetworkProxy proxy_endpoint = 31;
    HttpRequest proxy_http_request = 32;
    HttpResponse proxy_http_response = 33;
    Tls proxy_tls = 34;
    NetworkTraffic proxy_traffic = 35;
    optional string raw_data = 36;
    optional string severity = 37;
    SeverityId severity_id = 38;
    NetworkEndpoint src_endpoint = 39;
    optional int64 start_time = 40;
    optional google.protobuf.Timestamp start_time_dt = 41;
    optional string status = 42;
    optional string status_code = 43;
    optional string status_detail = 44;
    optional StatusId status_id = 45;
    int64 time = 46;
    google.protobuf.Timestamp time_dt = 47;
    optional int32 timezone_offset = 48;
    Tls tls = 49;
    optional string type_name = 50;
    int64 type_uid = 51;
    google.protobuf.Struct unmapped = 52;
    repeated WebResource web_resources = 53;
    repeated WebResource web_resources_result = 54;
}

// ApplicationLifecycle is an OSF event in category "Application Activity"
// called Application Lifecycle
// defined in ocsf events/application/application_lifecycle.json
//
// Application Lifecycle events report installation, removal, start, stop of
// an application or service.
message ApplicationLifecycle {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_INSTALL = 1; 
        ACTIVITY_ID_REMOVE  = 2; 
        ACTIVITY_ID_START   = 3; 
        ACTIVITY_ID_STOP    = 4; 
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN              = 0;
        CATEGORY_UID_APPLICATION_ACTIVITY = 6;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN               = 0;   
        CLASS_UID_APPLICATION_LIFECYCLE = 6002;
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    Product app = 5;
    optional string category_name = 6;
    CategoryUid category_uid = 7;
    optional string class_name = 8;
    ClassUid class_uid = 9;
    Cloud cloud = 10;
    optional int32 count = 11;
    Device device = 12;
    optional int32 duration = 13;
    optional int64 end_time = 14;
    optional google.protobuf.Timestamp end_time_dt = 15;
    repeated Enrichment enrichments = 16;
    optional string message = 17;
    Metadata metadata = 18;
    repeated Observable observables = 19;
    optional string raw_data = 20;
    optional string severity = 21;
    SeverityId severity_id = 22;
    optional int64 start_time = 23;
    optional google.protobuf.Timestamp start_time_dt = 24;
    optional string status = 25;
    optional string status_code = 26;
    optional string status_detail = 27;
    optional StatusId status_id = 28;
    int64 time = 29;
    google.protobuf.Timestamp time_dt = 30;
    optional int32 timezone_offset = 31;
    optional string type_name = 32;
    int64 type_uid = 33;
    google.protobuf.Struct unmapped = 34;
}

// ApiActivity is an OSF event in category "Application Activity"
// called API Activity
// defined in ocsf events/application/api.json
//
// API events describe general CRUD (Create, Read, Update, Delete) API
// activities, e.g. (AWS Cloudtrail)
message ApiActivity {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_CREATE  = 1;  // The API call in the event pertains to a 'create'
                                  // activity.
        ACTIVITY_ID_READ    = 2;  // The API call in the event pertains to a 'read'
                                  // activity.
        ACTIVITY_ID_UPDATE  = 3;  // The API call in the event pertains to a 'update'
                                  // activity.
        ACTIVITY_ID_DELETE  = 4;  // The API call in the event pertains to a 'delete'
                                  // activity.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN              = 0;
        CATEGORY_UID_APPLICATION_ACTIVITY = 6;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN      = 0;   
        CLASS_UID_API_ACTIVITY = 6003;
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    NetworkEndpoint dst_endpoint = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    HttpRequest http_request = 16;
    optional string message = 17;
    Metadata metadata = 18;
    repeated Observable observables = 19;
    optional string raw_data = 20;
    repeated ResourceDetails resources = 21;
    optional string severity = 22;
    SeverityId severity_id = 23;
    NetworkEndpoint src_endpoint = 24;
    optional int64 start_time = 25;
    optional google.protobuf.Timestamp start_time_dt = 26;
    optional string status = 27;
    optional string status_code = 28;
    optional string status_detail = 29;
    optional StatusId status_id = 30;
    int64 time = 31;
    google.protobuf.Timestamp time_dt = 32;
    optional int32 timezone_offset = 33;
    optional string type_name = 34;
    int64 type_uid = 35;
    google.protobuf.Struct unmapped = 36;
}

// WebResourceAccessActivity is an OSF event in category "Application Activity"
// called Web Resource Access Activity
// defined in ocsf events/application/web_resource_access_activity.json
//
// Web Resource Access Activity events describe successful/failed attempts to
// access a web resource over HTTP.
message WebResourceAccessActivity {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN       = 0; 
        ACTIVITY_ID_ACCESS_GRANT  = 1;  // The incoming request has permission to the web
                                        // resource.
        ACTIVITY_ID_ACCESS_DENY   = 2;  // The incoming request does not have permission
                                        // to the web resource.
        ACTIVITY_ID_ACCESS_REVOKE = 3;  // The incoming request's access has been revoked
                                        // due to security policy enforcements.
        ACTIVITY_ID_ACCESS_ERROR  = 4;  // An error occurred during processing the
                                        // request.
        ACTIVITY_ID_OTHER         = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN              = 0;
        CATEGORY_UID_APPLICATION_ACTIVITY = 6;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN                      = 0;   
        CLASS_UID_WEB_RESOURCE_ACCESS_ACTIVITY = 6004;
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional int32 count = 10;
    Device device = 11;
    optional int32 duration = 12;
    optional int64 end_time = 13;
    optional google.protobuf.Timestamp end_time_dt = 14;
    repeated Enrichment enrichments = 15;
    HttpRequest http_request = 16;
    HttpResponse http_response = 17;
    optional string message = 18;
    Metadata metadata = 19;
    repeated Observable observables = 20;
    NetworkProxy proxy = 21;
    NetworkConnectionInfo proxy_connection_info = 22;
    NetworkProxy proxy_endpoint = 23;
    HttpRequest proxy_http_request = 24;
    HttpResponse proxy_http_response = 25;
    Tls proxy_tls = 26;
    NetworkTraffic proxy_traffic = 27;
    optional string raw_data = 28;
    optional string severity = 29;
    SeverityId severity_id = 30;
    NetworkEndpoint src_endpoint = 31;
    optional int64 start_time = 32;
    optional google.protobuf.Timestamp start_time_dt = 33;
    optional string status = 34;
    optional string status_code = 35;
    optional string status_detail = 36;
    optional StatusId status_id = 37;
    int64 time = 38;
    google.protobuf.Timestamp time_dt = 39;
    optional int32 timezone_offset = 40;
    Tls tls = 41;
    optional string type_name = 42;
    int64 type_uid = 43;
    google.protobuf.Struct unmapped = 44;
    repeated WebResource web_resources = 45;
}

// DatastoreActivity is an OSF event in category "Application Activity"
// called Datastore Activity
// defined in ocsf events/application/datastore_activity.json
//
// Datastore events describe general activities (Read, Update, Query, Delete,
// etc.) which affect datastores or data within those datastores, e.g. (AWS
// RDS, AWS S3).
message DatastoreActivity {
    enum ActionId {
        ACTION_ID_UNKNOWN = 0;  // The action was unknown. The <code>disposition_id</code>
                                // attribute may still be set to a non-unknown value, for
                                // example 'Count', 'Uncorrected', 'Isolated',
                                // 'Quarantined' or 'Exonerated'.
        ACTION_ID_ALLOWED = 1;  // The activity was allowed. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Allowed', 'Approved', 'Delayed', 'No Action', 'Count'
                                // etc.
        ACTION_ID_DENIED  = 2;  // The attempted activity was denied. The
                                // <code>disposition_id</code> attribute should be set to
                                // a value that conforms to this action, for example
                                // 'Blocked', 'Rejected', 'Quarantined', 'Isolated',
                                // 'Dropped', 'Access Revoked, etc.
        ACTION_ID_OTHER   = 99; // The action was not mapped. See the <code>action</code>
                                // attribute, which contains a data source specific value.
    }
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN = 0; 
        ACTIVITY_ID_READ    = 1;  // The 'Read' activity involves accessing specific data
                                  // record details.
        ACTIVITY_ID_UPDATE  = 2;  // The 'Update' activity pertains to modifying specific
                                  // data record details.
        ACTIVITY_ID_CONNECT = 3;  // The 'Connect' activity involves establishing a
                                  // connection to the datastore.
        ACTIVITY_ID_QUERY   = 4;  // The 'Query' activity involves retrieving a filtered
                                  // subset of data based on specific criteria.
        ACTIVITY_ID_WRITE   = 5;  // The 'Write' activity involves writing specific data
                                  // record details.
        ACTIVITY_ID_CREATE  = 6;  // The 'Create' activity involves generating new data
                                  // record details.
        ACTIVITY_ID_DELETE  = 7;  // The 'Delete' activity involves removing specific data
                                  // record details.
        ACTIVITY_ID_LIST    = 8;  // The 'List' activity provides an overview of existing
                                  // data records.
        ACTIVITY_ID_ENCRYPT = 9;  // The 'Encrypt' activity involves securing data by
                                  // encrypting a specific data record.
        ACTIVITY_ID_DECRYPT = 10; // The 'Decrypt' activity involves converting encrypted
                                  // data back to its original format.
        ACTIVITY_ID_OTHER   = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN              = 0;
        CATEGORY_UID_APPLICATION_ACTIVITY = 6;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN            = 0;   
        CLASS_UID_DATASTORE_ACTIVITY = 6005;
    }
    enum DispositionId {
        DISPOSITION_ID_UNKNOWN             = 0;  // The disposition was not known.
        DISPOSITION_ID_ALLOWED             = 1;  // Granted access or allowed the action
                                                 // to the protected resource.
        DISPOSITION_ID_BLOCKED             = 2;  // Denied access or blocked the action to
                                                 // the protected resource.
        DISPOSITION_ID_QUARANTINED         = 3;  // A suspicious file or other content was
                                                 // moved to a benign location.
        DISPOSITION_ID_ISOLATED            = 4;  // A session was isolated on the network
                                                 // or within a browser.
        DISPOSITION_ID_DELETED             = 5;  // A file or other content was deleted.
        DISPOSITION_ID_DROPPED             = 6;  // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // dropped.
        DISPOSITION_ID_CUSTOM_ACTION       = 7;  // A custom action was executed such as
                                                 // running of a command script. Use the
                                                 // <code>message</code> attribute of the
                                                 // base class for details.
        DISPOSITION_ID_APPROVED            = 8;  // A request or submission was approved.
                                                 // For example, when a form was properly
                                                 // filled out and submitted. This is
                                                 // distinct from <code>1</code>
                                                 // 'Allowed'.
        DISPOSITION_ID_RESTORED            = 9;  // A quarantined file or other content
                                                 // was restored to its original location.
        DISPOSITION_ID_EXONERATED          = 10; // A suspicious or risky entity was
                                                 // deemed to no longer be suspicious (re-
                                                 // scored).
        DISPOSITION_ID_CORRECTED           = 11; // A corrupt file or configuration was
                                                 // corrected.
        DISPOSITION_ID_PARTIALLY_CORRECTED = 12; // A corrupt file or configuration was
                                                 // partially corrected.
        DISPOSITION_ID_UNCORRECTED         = 13; // A corrupt file or configuration was
                                                 // not corrected.
        DISPOSITION_ID_DELAYED             = 14; // An operation was delayed, for example
                                                 // if a restart was required to finish
                                                 // the operation.
        DISPOSITION_ID_DETECTED            = 15; // Suspicious activity or a policy
                                                 // violation was detected without further
                                                 // action.
        DISPOSITION_ID_NO_ACTION           = 16; // The outcome of an operation had no
                                                 // action taken.
        DISPOSITION_ID_LOGGED              = 17; // The operation or action was logged
                                                 // without further action.
        DISPOSITION_ID_TAGGED              = 18; // A file or other entity was marked with
                                                 // extended attributes.
        DISPOSITION_ID_ALERT               = 19; // The request or activity was detected
                                                 // as a threat and resulted in a
                                                 // notification but request was not
                                                 // blocked.
        DISPOSITION_ID_COUNT               = 20; // Counted the request or activity but
                                                 // did not determine whether to allow it
                                                 // or block it.
        DISPOSITION_ID_RESET               = 21; // The request was detected as a threat
                                                 // and resulted in the connection being
                                                 // reset.
        DISPOSITION_ID_CAPTCHA             = 22; // Required the end user to solve a
                                                 // CAPTCHA puzzle to prove that a human
                                                 // being is sending the request.
        DISPOSITION_ID_CHALLENGE           = 23; // Ran a silent challenge that required
                                                 // the client session to verify that it's
                                                 // a browser, and not a bot.
        DISPOSITION_ID_ACCESS_REVOKED      = 24; // The requestor's access has been
                                                 // revoked due to security policy
                                                 // enforcements. Note: use the
                                                 // <code>Host</code> profile if the
                                                 // <code>User</code> or
                                                 // <code>Actor</code> requestor is not
                                                 // present in the event class.
        DISPOSITION_ID_REJECTED            = 25; // A request or submission was rejected.
                                                 // For example, when a form was
                                                 // improperly filled out and submitted.
                                                 // This is distinct from <code>2</code>
                                                 // 'Blocked'.
        DISPOSITION_ID_UNAUTHORIZED        = 26; // An attempt to access a resource was
                                                 // denied due to an authorization check
                                                 // that failed. This is a more specific
                                                 // disposition than <code>2</code>
                                                 // 'Blocked' and can be complemented with
                                                 // the <code>authorizations</code>
                                                 // attribute for more detail.
        DISPOSITION_ID_ERROR               = 27; // An error occurred during the
                                                 // processing of the activity or request.
                                                 // Use the <code>message</code> attribute
                                                 // of the base class for details.
        DISPOSITION_ID_OTHER               = 99; // The disposition is not listed. The
                                                 // <code>disposition</code> attribute
                                                 // should be populated with a source
                                                 // specific caption.
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    enum TypeId {
        TYPE_ID_UNKNOWN    = 0;  // The datastore resource type is unknown.
        TYPE_ID_DATABASE   = 1; 
        TYPE_ID_DATABUCKET = 2; 
        TYPE_ID_TABLE      = 3; 
        TYPE_ID_OTHER      = 99; // The datastore resource type is not mapped.
    }
    optional string action = 1;
    ActionId action_id = 2;
    ActivityId activity_id = 3;
    optional string activity_name = 4;
    Actor actor = 5;
    Api api = 6;
    repeated Attack attacks = 7;
    repeated Authorization authorizations = 8;
    optional string category_name = 9;
    CategoryUid category_uid = 10;
    optional string class_name = 11;
    ClassUid class_uid = 12;
    Cloud cloud = 13;
    optional int32 count = 14;
    Database database = 15;
    Databucket databucket = 16;
    optional string disposition = 17;
    optional DispositionId disposition_id = 18;
    NetworkEndpoint dst_endpoint = 19;
    optional int32 duration = 20;
    optional int64 end_time = 21;
    optional google.protobuf.Timestamp end_time_dt = 22;
    repeated Enrichment enrichments = 23;
    FirewallRule firewall_rule = 24;
    HttpRequest http_request = 25;
    repeated Malware malware = 26;
    optional string message = 27;
    Metadata metadata = 28;
    repeated Observable observables = 29;
    QueryInfo query_info = 30;
    optional string raw_data = 31;
    optional string severity = 32;
    SeverityId severity_id = 33;
    NetworkEndpoint src_endpoint = 34;
    optional int64 start_time = 35;
    optional google.protobuf.Timestamp start_time_dt = 36;
    optional string status = 37;
    optional string status_code = 38;
    optional string status_detail = 39;
    optional StatusId status_id = 40;
    Table table = 41;
    int64 time = 42;
    google.protobuf.Timestamp time_dt = 43;
    optional int32 timezone_offset = 44;
    optional string type = 45;
    optional TypeId type_id = 46;
    optional string type_name = 47;
    int64 type_uid = 48;
    google.protobuf.Struct unmapped = 49;
}

// FileHosting is an OSF event in category "Application Activity"
// called File Hosting Activity
// defined in ocsf events/application/file_hosting.json
//
// File Hosting Activity events report the actions taken by file management
// applications, including file sharing servers like Sharepoint and services
// such as Box, MS OneDrive, or Google Drive.
message FileHosting {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN  = 0; 
        ACTIVITY_ID_UPLOAD   = 1;  // Upload a file.
        ACTIVITY_ID_DOWNLOAD = 2;  // Download a file.
        ACTIVITY_ID_UPDATE   = 3;  // Update a file.
        ACTIVITY_ID_DELETE   = 4;  // Delete a file.
        ACTIVITY_ID_RENAME   = 5;  // Rename a file.
        ACTIVITY_ID_COPY     = 6;  // Copy a file.
        ACTIVITY_ID_MOVE     = 7;  // Move a file.
        ACTIVITY_ID_RESTORE  = 8;  // Restore a file.
        ACTIVITY_ID_PREVIEW  = 9;  // Preview a file.
        ACTIVITY_ID_LOCK     = 10; // Lock a file.
        ACTIVITY_ID_UNLOCK   = 11; // Unlock a file.
        ACTIVITY_ID_SHARE    = 12; // Share a file.
        ACTIVITY_ID_UNSHARE  = 13; // Unshare a file.
        ACTIVITY_ID_OPEN     = 14; // Open a file.
        ACTIVITY_ID_SYNC     = 15; // Mark a file or folder to sync with a computer.
        ACTIVITY_ID_UNSYNC   = 16; // Mark a file or folder to not sync with a computer.
        ACTIVITY_ID_OTHER    = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN              = 0;
        CATEGORY_UID_APPLICATION_ACTIVITY = 6;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN               = 0;   
        CLASS_UID_FILE_HOSTING_ACTIVITY = 6006;
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    NetworkConnectionInfo connection_info = 10;
    optional int32 count = 11;
    NetworkEndpoint dst_endpoint = 12;
    optional int32 duration = 13;
    optional int64 end_time = 14;
    optional google.protobuf.Timestamp end_time_dt = 15;
    repeated Enrichment enrichments = 16;
    optional int64 expiration_time = 17;
    optional google.protobuf.Timestamp expiration_time_dt = 18;
    File file = 19;
    optional string message = 20;
    Metadata metadata = 21;
    repeated Observable observables = 22;
    optional string raw_data = 23;
    optional string severity = 24;
    SeverityId severity_id = 25;
    NetworkEndpoint src_endpoint = 26;
    optional int64 start_time = 27;
    optional google.protobuf.Timestamp start_time_dt = 28;
    optional string status = 29;
    optional string status_code = 30;
    optional string status_detail = 31;
    optional StatusId status_id = 32;
    int64 time = 33;
    google.protobuf.Timestamp time_dt = 34;
    optional int32 timezone_offset = 35;
    optional string type_name = 36;
    int64 type_uid = 37;
    google.protobuf.Struct unmapped = 38;
}

// ScanActivity is an OSF event in category "Application Activity"
// called Scan Activity
// defined in ocsf events/application/scan_activity.json
//
// Scan events report the start, completion, and results of a scan job. The
// scan event includes the number of items that were scanned and the number of
// detections that were resolved.
message ScanActivity {
    enum ActivityId {
        ACTIVITY_ID_UNKNOWN            = 0; 
        ACTIVITY_ID_STARTED            = 1;  // The scan was started.
        ACTIVITY_ID_COMPLETED          = 2;  // The scan was completed.
        ACTIVITY_ID_CANCELLED          = 3;  // The scan was cancelled.
        ACTIVITY_ID_DURATION_VIOLATION = 4;  // The allocated scan time was insufficient
                                             // to complete the requested scan.
        ACTIVITY_ID_PAUSE_VIOLATION    = 5;  // The scan was paused, either by the user or
                                             // by program constraints (e.g. scans that
                                             // are suspended during certain time
                                             // intervals), and not resumed within the
                                             // allotted time.
        ACTIVITY_ID_ERROR              = 6;  // The scan could not be completed due to an
                                             // internal error.
        ACTIVITY_ID_PAUSED             = 7;  // The scan was paused.
        ACTIVITY_ID_RESUMED            = 8;  // The scan was resumed from the pause point.
        ACTIVITY_ID_RESTARTED          = 9;  // The scan restarted from the beginning of
                                             // the file enumeration.
        ACTIVITY_ID_DELAYED            = 10; // The user delayed the scan.
        ACTIVITY_ID_OTHER              = 99;
    }
    enum CategoryUid {
        CATEGORY_UID_UNKNOWN              = 0;
        CATEGORY_UID_APPLICATION_ACTIVITY = 6;
    }
    enum ClassUid {
        CLASS_UID_UNKNOWN       = 0;   
        CLASS_UID_SCAN_ACTIVITY = 6007;
    }
    enum SeverityId {
        SEVERITY_ID_UNKNOWN       = 0;  // The event/finding severity is unknown.
        SEVERITY_ID_INFORMATIONAL = 1;  // Informational message. No action required.
        SEVERITY_ID_LOW           = 2;  // The user decides if action is needed.
        SEVERITY_ID_MEDIUM        = 3;  // Action is required but the situation is not
                                        // serious at this time.
        SEVERITY_ID_HIGH          = 4;  // Action is required immediately.
        SEVERITY_ID_CRITICAL      = 5;  // Action is required immediately and the scope is
                                        // broad.
        SEVERITY_ID_FATAL         = 6;  // An error occurred but it is too late to take
                                        // remedial action.
        SEVERITY_ID_OTHER         = 99; // The event/finding severity is not mapped. See
                                        // the <code>severity</code> attribute, which
                                        // contains a data source specific value.
    }
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_SUCCESS = 1; 
        STATUS_ID_FAILURE = 2; 
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    ActivityId activity_id = 1;
    optional string activity_name = 2;
    Actor actor = 3;
    Api api = 4;
    optional string category_name = 5;
    CategoryUid category_uid = 6;
    optional string class_name = 7;
    ClassUid class_uid = 8;
    Cloud cloud = 9;
    optional string command_uid = 10;
    optional int32 count = 11;
    Device device = 12;
    optional int32 duration = 13;
    optional int64 end_time = 14;
    optional google.protobuf.Timestamp end_time_dt = 15;
    repeated Enrichment enrichments = 16;
    optional string message = 17;
    Metadata metadata = 18;
    optional int32 num_detections = 19;
    optional int32 num_files = 20;
    optional int32 num_folders = 21;
    optional int32 num_network_items = 22;
    optional int32 num_processes = 23;
    optional int32 num_registry_items = 24;
    optional int32 num_resolutions = 25;
    optional int32 num_skipped_items = 26;
    optional int32 num_trusted_items = 27;
    repeated Observable observables = 28;
    Policy policy = 29;
    optional string raw_data = 30;
    Scan scan = 31;
    optional string schedule_uid = 32;
    optional string severity = 33;
    SeverityId severity_id = 34;
    optional int64 start_time = 35;
    optional google.protobuf.Timestamp start_time_dt = 36;
    optional string status = 37;
    optional string status_code = 38;
    optional string status_detail = 39;
    optional StatusId status_id = 40;
    int64 time = 41;
    google.protobuf.Timestamp time_dt = 42;
    optional int32 timezone_offset = 43;
    optional int32 total = 44;
    optional string type_name = 45;
    int64 type_uid = 46;
    google.protobuf.Struct unmapped = 47;
}

// Actor is an OSF object
// defined in ocsf objects/actor.json
//
// The Actor object contains details about the user, role, application,
// service, or process that initiated or performed a specific activity.
message Actor {
    optional string app_name = 1;
    optional string app_uid = 2;
    repeated Authorization authorizations = 3;
    Idp idp = 4;
    optional string invoked_by = 5;
    Process process = 6;
    Session session = 7;
    User user = 8;
}

// Api is an OSF object
// defined in ocsf objects/api.json
//
// The API, or Application Programming Interface, object represents
// information pertaining to an API request and response.
message Api {
    Group group = 1;
    string operation = 2;
    Request request = 3;
    Response response = 4;
    Service service = 5;
    optional string version = 6;
}

// Attack is an OSF object
// defined in ocsf objects/attack.json
//
// The <a target='_blank' href='https://attack.mitre.org'>MITRE ATT&CK®</a>
// object describes the tactic, technique & sub-technique associated to an
// attack as defined in <a target='_blank'
// href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK
// Matrix<sup>TM</sup></a>.
message Attack {
    SubTechnique sub_technique = 1;
    Tactic tactic = 2;
    repeated Tactic tactics = 3;
    Technique technique = 4;
    optional string version = 5;
}

// Authorization is an OSF object
// defined in ocsf objects/authorization.json
//
// The Authorization Result object provides details about the authorization
// outcome and associated policies related to activity.
message Authorization {
    optional string decision = 1;
    Policy policy = 2;
}

// Cloud is an OSF object
// defined in ocsf objects/cloud.json
//
// The Cloud object contains information about a cloud account such as AWS
// Account ID, regions, etc.
message Cloud {
    Account account = 1;
    Organization org = 2;
    optional string project_uid = 3;
    string provider = 4;
    optional string region = 5;
    optional string zone = 6;
}

// Device is an OSF object
// defined in ocsf objects/device.json
//
// The Device object represents an addressable computer system or host, which
// is typically connected to a computer network and participates in the
// transmission or processing of data within the computer network. Defined by
// D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:Host/'>d3f:Host</a>.
message Device {
    enum RiskLevelId {
        RISK_LEVEL_ID_INFO     = 0;
        RISK_LEVEL_ID_LOW      = 1;
        RISK_LEVEL_ID_MEDIUM   = 2;
        RISK_LEVEL_ID_HIGH     = 3;
        RISK_LEVEL_ID_CRITICAL = 4;
    }
    enum TypeId {
        TYPE_ID_UNKNOWN  = 0;  // The type is unknown.
        TYPE_ID_SERVER   = 1;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:Server/'>server</a>.
        TYPE_ID_DESKTOP  = 2;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:DesktopComputer/'>desktop
                               // computer</a>.
        TYPE_ID_LAPTOP   = 3;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:LaptopComputer/'>laptop
                               // computer</a>.
        TYPE_ID_TABLET   = 4;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:TabletComputer/'>tablet
                               // computer</a>.
        TYPE_ID_MOBILE   = 5;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:MobilePhone/'>mobile
                               // phone</a>.
        TYPE_ID_VIRTUAL  = 6;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:VirtualizationSoftware/'>virtual
                               // machine</a>.
        TYPE_ID_IOT      = 7;  // A <a target='_blank'
                               // href='https://www.techtarget.com/iotagenda/definition/IoT-
                               // device'>IOT (Internet of Things) device</a>.
        TYPE_ID_BROWSER  = 8;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:Browser/'>web
                               // browser</a>.
        TYPE_ID_FIREWALL = 9;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:Firewall/'>networking
                               // firewall</a>.
        TYPE_ID_SWITCH   = 10; // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:Switch/'>networking
                               // switch</a>.
        TYPE_ID_HUB      = 11; // A <a target='_blank'
                               // href='https://en.wikipedia.org/wiki/Ethernet_hub'>networking
                               // hub</a>.
        TYPE_ID_OTHER    = 99; // The type is not mapped. See the <code>type</code>
                               // attribute, which contains a data source specific value.
    }
    repeated Agent agent_list = 1;
    optional string autoscale_uid = 2;
    Container container = 3;
    optional int64 created_time = 4;
    optional google.protobuf.Timestamp created_time_dt = 5;
    optional string desc = 6;
    optional string domain = 7;
    optional int64 first_seen_time = 8;
    optional google.protobuf.Timestamp first_seen_time_dt = 9;
    repeated Group groups = 10;
    optional string hostname = 11;
    DeviceHwInfo hw_info = 12;
    optional string hypervisor = 13;
    Image image = 14;
    optional string imei = 15;
    optional string instance_uid = 16;
    optional string interface_name = 17;
    optional string interface_uid = 18;
    optional string ip = 19;
    optional bool is_compliant = 20;
    optional bool is_managed = 21;
    optional bool is_personal = 22;
    optional bool is_trusted = 23;
    optional int64 last_seen_time = 24;
    optional google.protobuf.Timestamp last_seen_time_dt = 25;
    Location location = 26;
    optional string mac = 27;
    optional int64 modified_time = 28;
    optional google.protobuf.Timestamp modified_time_dt = 29;
    optional string name = 30;
    optional int32 namespace_pid = 31;
    repeated NetworkInterface network_interfaces = 32;
    Organization org = 33;
    Os os = 34;
    User owner = 35;
    optional string region = 36;
    optional string risk_level = 37;
    optional RiskLevelId risk_level_id = 38;
    optional int32 risk_score = 39;
    optional string subnet = 40;
    optional string subnet_uid = 41;
    optional string type = 42;
    TypeId type_id = 43;
    optional string uid = 44;
    optional string uid_alt = 45;
    optional string vlan_uid = 46;
    optional string vpc_uid = 47;
    optional string zone = 48;
}

// Enrichment is an OSF object
// defined in ocsf objects/enrichment.json
//
// The Enrichment object provides inline enrichment data for specific
// attributes of interest within an event. It serves as a mechanism to enhance
// or supplement the information associated with the event by adding
// additional relevant details or context.
message Enrichment {
    google.protobuf.Value data = 1;
    string name = 2;
    optional string provider = 3;
    optional string type = 4;
    string value = 5;
}

// File is an OSF object
// defined in ocsf objects/file.json
//
// The File object represents the metadata associated with a file stored in a
// computer system. It encompasses information about the file itself,
// including its attributes, properties, and organizational details. Defined
// by D3FEND <a target='_blank'
// href='https://next.d3fend.mitre.org/dao/artifact/d3f:File/'>d3f:File</a>.
message File {
    enum ConfidentialityId {
        CONFIDENTIALITY_ID_UNKNOWN          = 0;  // The confidentiality is unknown.
        CONFIDENTIALITY_ID_NOT_CONFIDENTIAL = 1; 
        CONFIDENTIALITY_ID_CONFIDENTIAL     = 2; 
        CONFIDENTIALITY_ID_SECRET           = 3; 
        CONFIDENTIALITY_ID_TOP_SECRET       = 4; 
        CONFIDENTIALITY_ID_PRIVATE          = 5; 
        CONFIDENTIALITY_ID_RESTRICTED       = 6; 
        CONFIDENTIALITY_ID_OTHER            = 99; // The confidentiality is not mapped.
                                                  // See the <code>confidentiality</code>
                                                  // attribute, which contains a data
                                                  // source specific value.
    }
    enum TypeId {
        TYPE_ID_UNKNOWN          = 0; 
        TYPE_ID_REGULAR_FILE     = 1; 
        TYPE_ID_FOLDER           = 2; 
        TYPE_ID_CHARACTER_DEVICE = 3; 
        TYPE_ID_BLOCK_DEVICE     = 4; 
        TYPE_ID_LOCAL_SOCKET     = 5; 
        TYPE_ID_NAMED_PIPE       = 6; 
        TYPE_ID_SYMBOLIC_LINK    = 7; 
        TYPE_ID_OTHER            = 99;
    }
    optional int64 accessed_time = 1;
    optional google.protobuf.Timestamp accessed_time_dt = 2;
    User accessor = 3;
    optional int32 attributes = 4;
    optional string company_name = 5;
    optional string confidentiality = 6;
    optional ConfidentialityId confidentiality_id = 7;
    optional int64 created_time = 8;
    optional google.protobuf.Timestamp created_time_dt = 9;
    User creator = 10;
    DataClassification data_classification = 11;
    optional string desc = 12;
    repeated Fingerprint hashes = 13;
    optional bool is_system = 14;
    optional string mime_type = 15;
    optional int64 modified_time = 16;
    optional google.protobuf.Timestamp modified_time_dt = 17;
    User modifier = 18;
    string name = 19;
    User owner = 20;
    optional string parent_folder = 21;
    optional string path = 22;
    Product product = 23;
    optional string security_descriptor = 24;
    DigitalSignature signature = 25;
    optional int64 size = 26;
    optional string type = 27;
    TypeId type_id = 28;
    optional string uid = 29;
    optional string version = 30;
    google.protobuf.Struct xattributes = 31;
}

// FirewallRule is an OSF object
// defined in ocsf objects/firewall_rule.json
//
// The Firewall Rule object represents a specific rule within a firewall
// policy or event. It contains information about a rule's configuration,
// properties, and associated actions that define how network traffic is
// handled by the firewall.
message FirewallRule {
    optional string category = 1;
    optional string condition = 2;
    optional string desc = 3;
    optional int32 duration = 4;
    repeated string match_details = 5;
    optional string match_location = 6;
    optional string name = 7;
    optional int32 rate_limit = 8;
    optional string sensitivity = 9;
    optional string type = 10;
    optional string uid = 11;
    optional string version = 12;
}

// Malware is an OSF object
// defined in ocsf objects/malware.json
//
// The Malware object describes the classification of known malicious
// software, which is intentionally designed to cause damage to a computer,
// server, client, or computer network.
message Malware {
    enum ClassificationIds {
        CLASSIFICATION_IDS_UNKNOWN                 = 0; 
        CLASSIFICATION_IDS_ADWARE                  = 1; 
        CLASSIFICATION_IDS_BACKDOOR                = 2; 
        CLASSIFICATION_IDS_BOT                     = 3; 
        CLASSIFICATION_IDS_BOOTKIT                 = 4; 
        CLASSIFICATION_IDS_DDOS                    = 5; 
        CLASSIFICATION_IDS_DOWNLOADER              = 6; 
        CLASSIFICATION_IDS_DROPPER                 = 7; 
        CLASSIFICATION_IDS_EXPLOIT_KIT             = 8; 
        CLASSIFICATION_IDS_KEYLOGGER               = 9; 
        CLASSIFICATION_IDS_RANSOMWARE              = 10;
        CLASSIFICATION_IDS_REMOTE_ACCESS_TROJAN    = 11;
        CLASSIFICATION_IDS_RESOURCE_EXPLOITATION   = 13;
        CLASSIFICATION_IDS_ROGUE_SECURITY_SOFTWARE = 14;
        CLASSIFICATION_IDS_ROOTKIT                 = 15;
        CLASSIFICATION_IDS_SCREEN_CAPTURE          = 16;
        CLASSIFICATION_IDS_SPYWARE                 = 17;
        CLASSIFICATION_IDS_TROJAN                  = 18;
        CLASSIFICATION_IDS_VIRUS                   = 19;
        CLASSIFICATION_IDS_WEBSHELL                = 20;
        CLASSIFICATION_IDS_WIPER                   = 21;
        CLASSIFICATION_IDS_WORM                    = 22;
        CLASSIFICATION_IDS_OTHER                   = 99;
    }
    repeated ClassificationIds classification_ids = 1;
    repeated string classifications = 2;
    repeated Cve cves = 3;
    optional string name = 4;
    optional string path = 5;
    optional string provider = 6;
    optional string uid = 7;
}

// Metadata is an OSF object
// defined in ocsf objects/metadata.json
//
// The Metadata object describes the metadata associated with the event.
// Defined by D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:Metadata/'>d3f:Metadata</a>.
message Metadata {
    optional string correlation_uid = 1;
    DataClassification data_classification = 2;
    optional string event_code = 3;
    Extension extension = 4;
    repeated Extension extensions = 5;
    repeated string labels = 6;
    optional string log_level = 7;
    optional string log_name = 8;
    optional string log_provider = 9;
    optional string log_version = 10;
    optional int64 logged_time = 11;
    optional google.protobuf.Timestamp logged_time_dt = 12;
    repeated Logger loggers = 13;
    optional int64 modified_time = 14;
    optional google.protobuf.Timestamp modified_time_dt = 15;
    optional string original_time = 16;
    optional int64 processed_time = 17;
    optional google.protobuf.Timestamp processed_time_dt = 18;
    Product product = 19;
    repeated string profiles = 20;
    optional int32 sequence = 21;
    optional string tenant_uid = 22;
    optional string uid = 23;
    string version = 24;
}

// Observable is an OSF object
// defined in ocsf objects/observable.json
//
// The observable object is a pivot element that contains related information
// found in many places in the event.
message Observable {
    enum TypeId {
        TYPE_ID_UNKNOWN         = 0;  // Unknown observable data type.
        TYPE_ID_HOSTNAME        = 1; 
        TYPE_ID_IP_ADDRESS      = 2; 
        TYPE_ID_MAC_ADDRESS     = 3; 
        TYPE_ID_USER_NAME       = 4; 
        TYPE_ID_EMAIL_ADDRESS   = 5; 
        TYPE_ID_URL_STRING      = 6; 
        TYPE_ID_FILE_NAME       = 7; 
        TYPE_ID_HASH            = 8; 
        TYPE_ID_PROCESS_NAME    = 9; 
        TYPE_ID_RESOURCE_UID    = 10;
        TYPE_ID_PORT            = 11;
        TYPE_ID_SUBNET          = 12;
        TYPE_ID_COMMAND_LINE    = 13;
        TYPE_ID_COUNTRY         = 14;
        TYPE_ID_PROCESS_ID      = 15;
        TYPE_ID_HTTP_USER_AGENT = 16;
        TYPE_ID_OTHER           = 99; // The observable data type is not mapped. See the
                                      // <code>type</code> attribute, which may contain
                                      // data source specific value.
    }
    string name = 1;
    Reputation reputation = 2;
    optional string type = 3;
    TypeId type_id = 4;
    optional string value = 5;
}

// RegKey is an OSF object
// defined in win objects/registry_key.json
//
// The registry key object describes a Windows registry key. Defined by D3FEND
// <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:WindowsRegistryKey/'>d3f:WindowsRegistryKey</a>.
message RegKey {
    optional bool is_system = 1;
    optional int64 modified_time = 2;
    optional google.protobuf.Timestamp modified_time_dt = 3;
    string path = 4;
    optional string security_descriptor = 5;
}

// RegValue is an OSF object
// defined in win objects/registry_value.json
//
// The registry value object describes a Windows registry value.
message RegValue {
    enum TypeId {
        TYPE_ID_UNKNOWN                 = 0;  // The type is unknown.
        TYPE_ID_REG_BINARY              = 1; 
        TYPE_ID_REG_DWORD               = 2; 
        TYPE_ID_REG_DWORD_BIG_ENDIAN    = 3; 
        TYPE_ID_REG_EXPAND_SZ           = 4; 
        TYPE_ID_REG_LINK                = 5; 
        TYPE_ID_REG_MULTI_SZ            = 6; 
        TYPE_ID_REG_NONE                = 7; 
        TYPE_ID_REG_QWORD               = 8; 
        TYPE_ID_REG_QWORD_LITTLE_ENDIAN = 9; 
        TYPE_ID_REG_SZ                  = 10;
        TYPE_ID_OTHER                   = 99; // The type is not mapped. See the
                                              // <code>type</code> attribute, which
                                              // contains a data source specific value.
    }
    optional google.protobuf.Value data = 1;
    optional bool is_default = 2;
    optional bool is_system = 3;
    optional int64 modified_time = 4;
    optional google.protobuf.Timestamp modified_time_dt = 5;
    string name = 6;
    string path = 7;
    optional string type = 8;
    optional TypeId type_id = 9;
}

// KernelDriver is an OSF object
// defined in ocsf objects/kernel_driver.json
//
// The Kernel Extension object describes a kernel driver that has been loaded
// or unloaded into the operating system (OS) kernel. Defined by D3FEND <a
// target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:KernelModule/'>d3f:KernelModule</a>.
message KernelDriver {
    File file = 1;
}

// Kernel is an OSF object
// defined in ocsf objects/kernel.json
//
// The Kernel Resource object provides information about a specific kernel
// resource, including its name and type. It describes essential attributes
// associated with a resource managed by the kernel of an operating system.
// Defined by D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:Kernel/'>d3f:Kernel</a>.
message Kernel {
    enum TypeId {
        TYPE_ID_UNKNOWN      = 0;  // The type is unknown.
        TYPE_ID_SHARED_MUTEX = 1; 
        TYPE_ID_SYSTEM_CALL  = 2; 
        TYPE_ID_OTHER        = 99; // The type is not mapped. See the <code>type</code>
                                   // attribute, which contains a data source specific
                                   // value.
    }
    optional bool is_system = 1;
    string name = 2;
    optional string path = 3;
    optional string system_call = 4;
    optional string type = 5;
    TypeId type_id = 6;
}

// WinResource is an OSF object
// defined in win objects/win_resource.json
//
// The Windows resource object describes a resource object managed by Windows,
// such as mutant or timer.
message WinResource {
    enum TypeId {
        TYPE_ID_UNKNOWN                 = 0;  // The resource object type is unknown.
        TYPE_ID_DIRECTORY               = 1; 
        TYPE_ID_EVENT                   = 2; 
        TYPE_ID_TIMER                   = 3; 
        TYPE_ID_DEVICE                  = 4; 
        TYPE_ID_MUTANT                  = 5; 
        TYPE_ID_TYPE                    = 6; 
        TYPE_ID_FILE                    = 7; 
        TYPE_ID_TOKEN                   = 8; 
        TYPE_ID_THREAD                  = 9; 
        TYPE_ID_SECTION                 = 10;
        TYPE_ID_WINDOWSTATION           = 11;
        TYPE_ID_DEBUGOBJECT             = 12;
        TYPE_ID_FILTERCOMMUNICATIONPORT = 13;
        TYPE_ID_EVENTPAIR               = 14;
        TYPE_ID_DRIVER                  = 15;
        TYPE_ID_IOCOMPLETION            = 16;
        TYPE_ID_CONTROLLER              = 17;
        TYPE_ID_SYMBOLICLINK            = 18;
        TYPE_ID_WMIGUID                 = 19;
        TYPE_ID_PROCESS                 = 20;
        TYPE_ID_PROFILE                 = 21;
        TYPE_ID_DESKTOP                 = 22;
        TYPE_ID_KEYEDEVENT              = 23;
        TYPE_ID_ADAPTER                 = 24;
        TYPE_ID_KEY                     = 25;
        TYPE_ID_WAITABLEPORT            = 26;
        TYPE_ID_CALLBACK                = 27;
        TYPE_ID_SEMAPHORE               = 28;
        TYPE_ID_JOB                     = 29;
        TYPE_ID_PORT                    = 30;
        TYPE_ID_FILTERCONNECTIONPORT    = 31;
        TYPE_ID_ALPC_PORT               = 32;
        TYPE_ID_SAM_ALIAS               = 33;
        TYPE_ID_SAM_GROUP               = 34;
        TYPE_ID_SAM_USER                = 35;
        TYPE_ID_SAM_DOMAIN              = 36;
        TYPE_ID_SAM_SERVER              = 37;
        TYPE_ID_OTHER                   = 99; // The resource object type is not mapped.
                                              // See the <code>type</code> attribute,
                                              // which may contain a data source specific
                                              // value.
    }
    optional google.protobuf.Value data = 1;
    DataClassification data_classification = 2;
    optional string details = 3;
    repeated string labels = 4;
    optional string name = 5;
    optional string svc_name = 6;
    optional string type = 7;
    TypeId type_id = 8;
    optional string uid = 9;
}

// Process is an OSF object
// defined in ocsf objects/process.json
// and linux objects/process.json
//
// Extends the process object to add Linux specific fields
message Process {
    enum IntegrityId {
        INTEGRITY_ID_UNKNOWN   = 0; 
        INTEGRITY_ID_UNTRUSTED = 1; 
        INTEGRITY_ID_LOW       = 2; 
        INTEGRITY_ID_MEDIUM    = 3; 
        INTEGRITY_ID_HIGH      = 4; 
        INTEGRITY_ID_SYSTEM    = 5; 
        INTEGRITY_ID_PROTECTED = 6; 
        INTEGRITY_ID_OTHER     = 99;
    }
    optional string cmd_line = 1;
    Container container = 2;
    optional int64 created_time = 3;
    optional google.protobuf.Timestamp created_time_dt = 4;
    File file = 5;
    Group group = 6;
    optional string integrity = 7;
    optional IntegrityId integrity_id = 8;
    repeated string lineage = 9;
    repeated string loaded_modules = 10;
    optional string name = 11;
    optional int32 namespace_pid = 12;
    Process parent_process = 13;
    optional int32 pid = 14;
    optional string sandbox = 15;
    Session session = 16;
    optional int64 terminated_time = 17;
    optional google.protobuf.Timestamp terminated_time_dt = 18;
    optional int32 tid = 19;
    optional string uid = 20;
    User user = 21;
    google.protobuf.Struct xattributes = 22;
    optional int32 auid = 1001;
    optional int32 egid = 1002;
    optional int32 euid = 1003;
}

// Module is an OSF object
// defined in ocsf objects/module.json
//
// The Module object describes the load attributes of a module.
message Module {
    enum LoadTypeId {
        LOAD_TYPE_ID_UNKNOWN            = 0; 
        LOAD_TYPE_ID_STANDARD           = 1;  // A normal module loaded by the normal
                                              // windows loading mechanism i.e.
                                              // LoadLibrary.
        LOAD_TYPE_ID_NON_STANDARD       = 2;  // A module loaded in a way avoidant of
                                              // normal windows procedures. i.e.
                                              // Bootstrapped Loading/Manual Dll Loading.
        LOAD_TYPE_ID_SHELLCODE          = 3;  // A raw module in process memory that is
                                              // READWRITE_EXECUTE and had a thread
                                              // started in its range.
        LOAD_TYPE_ID_MAPPED             = 4;  // A memory mapped file, typically created
                                              // with CreatefileMapping/MapViewOfFile.
        LOAD_TYPE_ID_NONSTANDARD_BACKED = 5;  // A module loaded in a non standard way.
                                              // However, GetModuleFileName succeeds on
                                              // this allocation.
        LOAD_TYPE_ID_OTHER              = 99;
    }
    optional string base_address = 1;
    File file = 2;
    optional string function_name = 3;
    optional string load_type = 4;
    LoadTypeId load_type_id = 5;
    optional string start_address = 6;
    optional string type = 7;
}

// Job is an OSF object
// defined in ocsf objects/job.json
//
// The Job object provides information about a scheduled job or task,
// including its name, command line, and state. It encompasses attributes that
// describe the properties and status of the scheduled job.
message Job {
    enum RunStateId {
        RUN_STATE_ID_UNKNOWN = 0; 
        RUN_STATE_ID_READY   = 1; 
        RUN_STATE_ID_QUEUED  = 2; 
        RUN_STATE_ID_RUNNING = 3; 
        RUN_STATE_ID_STOPPED = 4; 
        RUN_STATE_ID_OTHER   = 99;
    }
    optional string cmd_line = 1;
    optional int64 created_time = 2;
    optional google.protobuf.Timestamp created_time_dt = 3;
    optional string desc = 4;
    File file = 5;
    optional int64 last_run_time = 6;
    optional google.protobuf.Timestamp last_run_time_dt = 7;
    string name = 8;
    optional int64 next_run_time = 9;
    optional google.protobuf.Timestamp next_run_time_dt = 10;
    optional string run_state = 11;
    optional RunStateId run_state_id = 12;
    User user = 13;
}

// Analytic is an OSF object
// defined in ocsf objects/analytic.json
//
// The Analytic object contains details about the analytic technique used to
// analyze and derive insights from the data or information that led to the
// creation of a finding or conclusion.
message Analytic {
    enum TypeId {
        TYPE_ID_UNKNOWN             = 0; 
        TYPE_ID_RULE                = 1;  // A Rule in security analytics refers to
                                          // predefined criteria or conditions set to
                                          // monitor, alert, or enforce policies, playing
                                          // a crucial role in access control, threat
                                          // detection, and regulatory compliance across
                                          // security systems.
        TYPE_ID_BEHAVIORAL          = 2;  // Behavioral analytics focus on monitoring and
                                          // analyzing user or system actions to identify
                                          // deviations from established patterns, aiding
                                          // in the detection of insider threats, fraud,
                                          // and advanced persistent threats (APTs).
        TYPE_ID_STATISTICAL         = 3;  // Statistical analytics pertains to analyzing
                                          // data patterns and anomalies using statistical
                                          // models to predict, detect, and respond to
                                          // potential threats, enhancing overall security
                                          // posture through informed decision-making.
        TYPE_ID_FINGERPRINTING      = 5;  // Fingerprinting is the technique of collecting
                                          // detailed system data, including software
                                          // versions and configurations, to enhance
                                          // threat detection, data loss prevention (DLP),
                                          // and endpoint detection and response (EDR)
                                          // capabilities.
        TYPE_ID_TAGGING             = 6;  // Tagging refers to the practice of assigning
                                          // labels or identifiers to data, users, assets,
                                          // or activities to monitor, control access, and
                                          // facilitate incident response across various
                                          // security domains such as DLP and EDR.
        TYPE_ID_KEYWORD_MATCH       = 7;  // Keyword Match involves scanning content for
                                          // specific terms to identify sensitive
                                          // information, potential threats, or policy
                                          // violations, aiding in DLP and compliance
                                          // monitoring.
        TYPE_ID_REGULAR_EXPRESSIONS = 8;  // Regular Expressions are used to define
                                          // complex search patterns for identifying,
                                          // validating, and extracting specific data sets
                                          // or threats within digital content, enhancing
                                          // DLP, EDR, and threat detection mechanisms.
        TYPE_ID_EXACT_DATA_MATCH    = 9;  // Exact Data Match is a precise comparison
                                          // technique used to detect the unauthorized use
                                          // or exposure of specific, sensitive
                                          // information, crucial for enforcing DLP
                                          // policies and protecting against data
                                          // breaches.
        TYPE_ID_PARTIAL_DATA_MATCH  = 10; // Partial Data Match involves identifying
                                          // instances where segments of sensitive
                                          // information or patterns match, facilitating
                                          // nuanced DLP and threat detection without
                                          // requiring complete data conformity.
        TYPE_ID_INDEXED_DATA_MATCH  = 11; // Indexed Data Match refers to comparing
                                          // content against a pre-compiled index of
                                          // sensitive information to efficiently detect
                                          // and prevent unauthorized access or breaches,
                                          // streamlining DLP and compliance efforts.
        TYPE_ID_OTHER               = 99;
    }
    optional string category = 1;
    optional string desc = 2;
    optional string name = 3;
    repeated Analytic related_analytics = 4;
    optional string type = 5;
    TypeId type_id = 6;
    optional string uid = 7;
    optional string version = 8;
}

// CisCsc is an OSF object
// defined in ocsf objects/cis_csc.json
//
// The CIS Critical Security Control (CSC) contains information as defined by
// the Center for Internet Security Critical Security Control <a
// target='_blank' href='https://www.cisecurity.org/controls'>(CIS CSC)</a>.
// Prioritized set of actions to protect your organization and data from cyber-
// attack vectors.
message CisCsc {
    string control = 1;
    optional string version = 2;
}

// Compliance is an OSF object
// defined in ocsf objects/compliance.json
//
// The Compliance object contains information about Industry and Regulatory
// Framework standards, controls and requirements.
message Compliance {
    enum StatusId {
        STATUS_ID_UNKNOWN = 0;  // The status is unknown.
        STATUS_ID_PASS    = 1;  // The compliance check passed for all the evaluated
                                // resources.
        STATUS_ID_WARNING = 2;  // The compliance check did not yield a result due to
                                // missing information.
        STATUS_ID_FAIL    = 3;  // The compliance check failed for at least one of the
                                // evaluated resources.
        STATUS_ID_OTHER   = 99; // The event status is not mapped. See the
                                // <code>status</code> attribute, which contains a data
                                // source specific value.
    }
    optional string control = 1;
    repeated string requirements = 2;
    repeated string standards = 3;
    optional string status = 4;
    optional string status_code = 5;
    optional string status_detail = 6;
    optional StatusId status_id = 7;
}

// Finding is an OSF object
// defined in ocsf objects/finding.json
//
// The Finding object describes metadata related to a security finding
// generated by a security tool or system.
message Finding {
    optional int64 created_time = 1;
    optional google.protobuf.Timestamp created_time_dt = 2;
    optional string desc = 3;
    optional int64 first_seen_time = 4;
    optional google.protobuf.Timestamp first_seen_time_dt = 5;
    optional int64 last_seen_time = 6;
    optional google.protobuf.Timestamp last_seen_time_dt = 7;
    optional int64 modified_time = 8;
    optional google.protobuf.Timestamp modified_time_dt = 9;
    optional string product_uid = 10;
    repeated RelatedEvent related_events = 11;
    Remediation remediation = 12;
    optional string src_url = 13;
    optional google.protobuf.Value supporting_data = 14;
    string title = 15;
    repeated string types = 16;
    string uid = 17;
}

// KillChainPhase is an OSF object
// defined in ocsf objects/kill_chain_phase.json
//
// The Kill Chain Phase object represents a single phase of a cyber attack,
// including the initial reconnaissance and planning stages up to the final
// objective of the attacker. It provides a detailed description of each phase
// and its associated activities within the broader context of a cyber attack.
// See <a target='_blank' href='https://www.lockheedmartin.com/en-
// us/capabilities/cyber/cyber-kill-chain.html'>Cyber Kill Chain®</a>.
message KillChainPhase {
    enum PhaseId {
        PHASE_ID_UNKNOWN               = 0;  // The kill chain phase is unknown.
        PHASE_ID_RECONNAISSANCE        = 1;  // The attackers pick a target and perform a
                                             // detailed analysis, start collecting
                                             // information (email addresses, conferences
                                             // information, etc.) and evaluate the
                                             // victim’s vulnerabilities to determine how
                                             // to exploit them.
        PHASE_ID_WEAPONIZATION         = 2;  // The attackers develop a malware weapon and
                                             // aim to exploit the discovered
                                             // vulnerabilities.
        PHASE_ID_DELIVERY              = 3;  // The intruders will use various tactics,
                                             // such as phishing, infected USB drives,
                                             // etc.
        PHASE_ID_EXPLOITATION          = 4;  // The intruders start leveraging
                                             // vulnerabilities to executed code on the
                                             // victim’s system.
        PHASE_ID_INSTALLATION          = 5;  // The intruders install malware on the
                                             // victim’s system.
        PHASE_ID_COMMAND_CONTROL       = 6;  // Malware opens a command channel to enable
                                             // the intruders to remotely manipulate the
                                             // victim's system.
        PHASE_ID_ACTIONS_ON_OBJECTIVES = 7;  // With hands-on keyboard access, intruders
                                             // accomplish the mission’s goal.
        PHASE_ID_OTHER                 = 99; // The kill chain phase is not mapped. See
                                             // the <code>phase</code> attribute, which
                                             // contains a data source specific value.
    }
    optional string phase = 1;
    PhaseId phase_id = 2;
}

// ResourceDetails is an OSF object
// defined in ocsf objects/resource_details.json
//
// The Resource Details object describes details about resources that were
// affected by the activity/event.
message ResourceDetails {
    repeated Agent agent_list = 1;
    optional string cloud_partition = 2;
    optional string criticality = 3;
    optional google.protobuf.Value data = 4;
    DataClassification data_classification = 5;
    Group group = 6;
    repeated string labels = 7;
    optional string name = 8;
    optional string namespace = 9;
    User owner = 10;
    optional string region = 11;
    optional string type = 12;
    optional string uid = 13;
    optional string version = 14;
}

// Vulnerability is an OSF object
// defined in ocsf objects/vulnerability.json
//
// The vulnerability is an unintended characteristic of a computing component
// or system configuration that multiplies the risk of an adverse event or a
// loss occurring either due to accidental exposure, deliberate attack, or
// conflict with new system components.
message Vulnerability {
    repeated AffectedCode affected_code = 1;
    repeated AffectedPackage affected_packages = 2;
    Cve cve = 3;
    Cwe cwe = 4;
    optional string desc = 5;
    optional int64 first_seen_time = 6;
    optional google.protobuf.Timestamp first_seen_time_dt = 7;
    optional bool fix_available = 8;
    optional bool is_exploit_available = 9;
    optional bool is_fix_available = 10;
    repeated KbArticle kb_article_list = 11;
    repeated string kb_articles = 12;
    optional int64 last_seen_time = 13;
    optional google.protobuf.Timestamp last_seen_time_dt = 14;
    repeated Package packages = 15;
    repeated string references = 16;
    repeated string related_vulnerabilities = 17;
    Remediation remediation = 18;
    optional string severity = 19;
    optional string title = 20;
    optional string vendor_name = 21;
}

// FindingInfo is an OSF object
// defined in ocsf objects/finding_info.json
//
// The Finding Information object describes metadata related to a security
// finding generated by a security tool or system.
message FindingInfo {
    Analytic analytic = 1;
    repeated Attack attacks = 2;
    optional int64 created_time = 3;
    optional google.protobuf.Timestamp created_time_dt = 4;
    repeated string data_sources = 5;
    optional string desc = 6;
    optional int64 first_seen_time = 7;
    optional google.protobuf.Timestamp first_seen_time_dt = 8;
    repeated KillChainPhase kill_chain = 9;
    optional int64 last_seen_time = 10;
    optional google.protobuf.Timestamp last_seen_time_dt = 11;
    optional int64 modified_time = 12;
    optional google.protobuf.Timestamp modified_time_dt = 13;
    optional string product_uid = 14;
    repeated Analytic related_analytics = 15;
    repeated RelatedEvent related_events = 16;
    optional string src_url = 17;
    string title = 18;
    repeated string types = 19;
    string uid = 20;
}

// Remediation is an OSF object
// defined in ocsf objects/remediation.json
//
// The Remediation object describes the recommended remediation steps to
// address identified issue(s).
message Remediation {
    string desc = 1;
    repeated KbArticle kb_article_list = 2;
    repeated string kb_articles = 3;
    repeated string references = 4;
}

// Evidences is an OSF object
// defined in ocsf objects/evidences.json
//
// A collection of evidence artifacts associated to the activity/activities
// that triggered a security detection.
message Evidences {
    Actor actor = 1;
    Api api = 2;
    NetworkConnectionInfo connection_info = 3;
    Container container = 4;
    optional google.protobuf.Value data = 5;
    Database database = 6;
    Databucket databucket = 7;
    NetworkEndpoint dst_endpoint = 8;
    File file = 9;
    Process process = 10;
    DnsQuery query = 11;
    NetworkEndpoint src_endpoint = 12;
}

// User is an OSF object
// defined in ocsf objects/user.json
//
// The User object describes the characteristics of a user/person or a
// security principal. Defined by D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:UserAccount/'>d3f:UserAccount</a>.
message User {
    enum RiskLevelId {
        RISK_LEVEL_ID_INFO     = 0;
        RISK_LEVEL_ID_LOW      = 1;
        RISK_LEVEL_ID_MEDIUM   = 2;
        RISK_LEVEL_ID_HIGH     = 3;
        RISK_LEVEL_ID_CRITICAL = 4;
    }
    enum TypeId {
        TYPE_ID_UNKNOWN = 0; 
        TYPE_ID_USER    = 1;  // Regular user account.
        TYPE_ID_ADMIN   = 2;  // Admin/root user account.
        TYPE_ID_SYSTEM  = 3;  // System account. For example, Windows computer accounts
                              // with a trailing dollar sign ($).
        TYPE_ID_OTHER   = 99;
    }
    Account account = 1;
    optional string credential_uid = 2;
    optional string domain = 3;
    optional string email_addr = 4;
    optional string full_name = 5;
    repeated Group groups = 6;
    LdapPerson ldap_person = 7;
    optional string name = 8;
    Organization org = 9;
    optional string risk_level = 10;
    optional RiskLevelId risk_level_id = 11;
    optional int32 risk_score = 12;
    optional string type = 13;
    optional TypeId type_id = 14;
    optional string uid = 15;
    optional string uid_alt = 16;
}

// Group is an OSF object
// defined in ocsf objects/group.json
//
// The Group object represents a collection or association of entities, such
// as users, policies, or devices. It serves as a logical grouping mechanism
// to organize and manage entities with similar characteristics or permissions
// within a system or organization.
message Group {
    optional string desc = 1;
    optional string domain = 2;
    optional string name = 3;
    repeated string privileges = 4;
    optional string type = 5;
    optional string uid = 6;
}

// DataSecurity is an OSF object
// defined in ocsf objects/data_security.json
//
// The Data Security object describes the characteristics, techniques and
// content of a Data Loss Prevention (DLP), Data Loss Detection (DLD), Data
// Classification, or similar tools' finding, alert, or detection
// mechanism(s).
message DataSecurity {
    enum CategoryId {
        CATEGORY_ID_UNKNOWN                      = 0;  // The type is not mapped. See the
                                                       // <code>data_type</code>
                                                       // attribute, which contains a data
                                                       // source specific value.
        CATEGORY_ID_PERSONAL                     = 1;  // Any Personally Identifiable
                                                       // Information (PII), Electronic
                                                       // Personal Health Information
                                                       // (ePHI), or similarly personal
                                                       // information. E.g., full name,
                                                       // home address, date of birth,
                                                       // etc.
        CATEGORY_ID_GOVERNMENTAL                 = 2;  // Any sensitive government
                                                       // identification number related to
                                                       // a person or other classified
                                                       // material. E.g., Passport
                                                       // numbers, driver license numbers,
                                                       // business identification,
                                                       // taxation identifiers, etc.
        CATEGORY_ID_FINANCIAL                    = 3;  // Any financially-related sensitive
                                                       // information or Cardholder Data
                                                       // (CHD). E.g., banking account
                                                       // numbers, credit card numbers,
                                                       // International Banking Account
                                                       // Numbers (IBAN), SWIFT codes,
                                                       // etc.
        CATEGORY_ID_BUSINESS                     = 4;  // Any business-specific sensitive
                                                       // data such as intellectual
                                                       // property, trademarks,
                                                       // copyrights, human resource data,
                                                       // Board of Directors meeting
                                                       // minutes, and similar.
        CATEGORY_ID_MILITARY_AND_LAW_ENFORCEMENT = 5;  // Any mission-specific sensitive
                                                       // data for military, law
                                                       // enforcement, or other government
                                                       // agencies such as specifically
                                                       // classified data, weapon systems
                                                       // information, or other planning
                                                       // data.
        CATEGORY_ID_SECURITY                     = 6;  // Any sensitive security-related
                                                       // data such as passwords,
                                                       // passkeys, IP addresses, API
                                                       // keys, credentials and similar
                                                       // secrets. E.g., AWS Access Secret
                                                       // Key, SaaS API Keys, user
                                                       // passwords, database credentials,
                                                       // etc.
        CATEGORY_ID_OTHER                        = 99; // Any other type of data
                                                       // classification or a multi-variate
                                                       // classification made up of
                                                       // several other classification
                                                       // categories.
    }
    enum ConfidentialityId {
        CONFIDENTIALITY_ID_UNKNOWN          = 0;  // The confidentiality is unknown.
        CONFIDENTIALITY_ID_NOT_CONFIDENTIAL = 1; 
        CONFIDENTIALITY_ID_CONFIDENTIAL     = 2; 
        CONFIDENTIALITY_ID_SECRET           = 3; 
        CONFIDENTIALITY_ID_TOP_SECRET       = 4; 
        CONFIDENTIALITY_ID_PRIVATE          = 5; 
        CONFIDENTIALITY_ID_RESTRICTED       = 6; 
        CONFIDENTIALITY_ID_OTHER            = 99; // The confidentiality is not mapped.
                                                  // See the <code>confidentiality</code>
                                                  // attribute, which contains a data
                                                  // source specific value.
    }
    enum DataLifecycleStateId {
        DATA_LIFECYCLE_STATE_ID_UNKNOWN         = 0; // The type is not mapped. See the
                                                     // <code>data_lifecycle_state</code>
                                                     // attribute, which contains a data
                                                     // source specific value.
        DATA_LIFECYCLE_STATE_ID_DATA_AT_REST    = 1; // The data was stored on physical or
                                                     // logcial media and was not actively
                                                     // moving through the network nor was
                                                     // being processed. E.g., data stored
                                                     // in a database, PDF files in a file
                                                     // share, or EHR records in object
                                                     // storage.
        DATA_LIFECYCLE_STATE_ID_DATA_IN_TRANSIT = 2; // The data was actively moving
                                                     // through the network or from one
                                                     // physical or logical location to
                                                     // another. E.g., emails being send,
                                                     // data replication or Change Data
                                                     // Capture (CDC) streams, or
                                                     // sensitive data processed on an
                                                     // API.
        DATA_LIFECYCLE_STATE_ID_DATA_IN_USE     = 3; // The data was being processed,
                                                     // accessed, or read by a system,
                                                     // making it active in memory or CPU.
                                                     // E.g., sensitive data in a Business
                                                     // Intelligence tool, ePHI being
                                                     // processed in an EHR application or
                                                     // a user viewing data stored in a
                                                     // spreadsheet or PDF.
    }
    enum DetectionSystemId {
        DETECTION_SYSTEM_ID_UNKNOWN                          = 0;  // The type is not
                                                                   // mapped. See the
                                                                   // <code>detection_system</code>
                                                                   // attribute, which
                                                                   // contains a data
                                                                   // source specific
                                                                   // value.
        DETECTION_SYSTEM_ID_ENDPOINT                         = 1;  // A dedicated agent or
                                                                   // sensor installed on
                                                                   // a device, either a
                                                                   // dedicated data
                                                                   // security tool or an
                                                                   // Endpoint Detection &
                                                                   // Response (EDR) tool
                                                                   // that can detect
                                                                   // sensitive data
                                                                   // and/or enforce data
                                                                   // security policies.
                                                                   // E.g., Forcepoint
                                                                   // DLP, Symantec DLP,
                                                                   // Microsoft Defender
                                                                   // for Endpoint (MDE).
        DETECTION_SYSTEM_ID_DLP_GATEWAY                      = 2;  // A Data Loss
                                                                   // Prevention (DLP)
                                                                   // gateway that is
                                                                   // positioned in-line of
                                                                   // an information store
                                                                   // such as a network
                                                                   // share, a database,
                                                                   // or otherwise that
                                                                   // can detect sensitive
                                                                   // data and/or enforce
                                                                   // data security
                                                                   // policies.
        DETECTION_SYSTEM_ID_MOBILE_DEVICE_MANAGEMENT         = 3;  // A Mobile Device
                                                                   // Management (MDM) or
                                                                   // Enterprise Mobility
                                                                   // Management (EMM)
                                                                   // tool that can detect
                                                                   // sensitive data
                                                                   // and/or enforce data
                                                                   // security policies on
                                                                   // mobile devices
                                                                   // (e.g., cellphones,
                                                                   // tablets, End User
                                                                   // Devices [EUDs]).
        DETECTION_SYSTEM_ID_DATA_DISCOVERY_CLASSIFICATION    = 4;  // A tool that actively
                                                                   // identifies and
                                                                   // classifies sensitive
                                                                   // data in digitial
                                                                   // media and
                                                                   // information stores
                                                                   // in accordance with a
                                                                   // policy or automated
                                                                   // functionality. E.g,
                                                                   // Amazon Macie,
                                                                   // Microsoft Purview.
        DETECTION_SYSTEM_ID_SECURE_WEB_GATEWAY               = 5;  // A Secure Web Gateway
                                                                   // (SWG) is any tool
                                                                   // that can detect
                                                                   // sensitive data
                                                                   // and/or enforce data
                                                                   // security policies at
                                                                   // a network-edge such
                                                                   // as within a proxy or
                                                                   // firewall service.
        DETECTION_SYSTEM_ID_SECURE_EMAIL_GATEWAY             = 6;  // A Secure Email
                                                                   // Gateway (SEG) is any
                                                                   // tool that can detect
                                                                   // sensitive data
                                                                   // and/or enforce data
                                                                   // security policies
                                                                   // within email
                                                                   // systems. E.g.,
                                                                   // Microsoft Defender
                                                                   // for Office, Google
                                                                   // Workspaces.
        DETECTION_SYSTEM_ID_DIGITAL_RIGHTS_MANAGEMENT        = 7;  // A Digital Rights
                                                                   // Management (DRM) or
                                                                   // a dedicated
                                                                   // Information Rights
                                                                   // Management (IRM) are
                                                                   // tools which can
                                                                   // detect sensitive
                                                                   // data and/or enforce
                                                                   // data security
                                                                   // policies on digitial
                                                                   // media via policy or
                                                                   // user access rights.
        DETECTION_SYSTEM_ID_CLOUD_ACCESS_SECURITY_BROKER     = 8;  // A Cloud Access
                                                                   // Security Broker
                                                                   // (CASB) that can
                                                                   // detect sensitive
                                                                   // data and/or enforce
                                                                   // data security
                                                                   // policies in-line to
                                                                   // cloud systems such
                                                                   // as the public cloud
                                                                   // or Software-as-a-
                                                                   // Service (SaaS) tool.
                                                                   // E.g., Forcepoint
                                                                   // CASB, SkyHigh
                                                                   // Security.
        DETECTION_SYSTEM_ID_DATABASE_ACTIVITY_MONITORING     = 9;  // A Database Activity
                                                                   // Monitoring (DAM)
                                                                   // tool that can detect
                                                                   // sensitive data
                                                                   // and/or enforce data
                                                                   // security policies as
                                                                   // part of a dedicated
                                                                   // database or
                                                                   // warehouse monitoring
                                                                   // solution.
        DETECTION_SYSTEM_ID_APPLICATION_LEVEL_DLP            = 10; // A built in Data Loss
                                                                   // Prevention (DLP) or
                                                                   // other data security
                                                                   // capability within a
                                                                   // tool or platform
                                                                   // such as an
                                                                   // Enterprise Resource
                                                                   // Planning (ERP) or
                                                                   // Customer Relations
                                                                   // Management (CRM)
                                                                   // tool that can detect
                                                                   // sensitive data
                                                                   // and/or enforce data
                                                                   // security policies.
        DETECTION_SYSTEM_ID_DEVELOPER_SECURITY               = 11; // Any Developer
                                                                   // Security tool such
                                                                   // as an Infrastrucre-as-
                                                                   // Securty (IAC)
                                                                   // scanner, Secrets
                                                                   // Detection, or Secure
                                                                   // Software Development
                                                                   // Lifecycle (SSDLC)
                                                                   // tool that can detect
                                                                   // sensitive data
                                                                   // and/or enforce data
                                                                   // security policies.
                                                                   // E.g., TruffleHog,
                                                                   // GitGuardian, Git-
                                                                   // Secrets.
        DETECTION_SYSTEM_ID_DATA_SECURITY_POSTURE_MANAGEMENT = 12; // A Data Security
                                                                   // Posture Management
                                                                   // (DSPM) tool is a
                                                                   // continuous
                                                                   // monitoring and data
                                                                   // discovery solution
                                                                   // that can detect
                                                                   // sensitive data
                                                                   // and/or enforce data
                                                                   // security policies
                                                                   // for local and cloud
                                                                   // environments. E.g.,
                                                                   // Cyera, Sentra, IBM
                                                                   // Polar Security.
        DETECTION_SYSTEM_ID_OTHER                            = 99; // Any other type of
                                                                   // detection system or
                                                                   // a multi-variate
                                                                   // system made up of
                                                                   // several other
                                                                   // systems.
    }
    optional string category = 1;
    optional CategoryId category_id = 2;
    optional string confidentiality = 3;
    optional ConfidentialityId confidentiality_id = 4;
    optional string data_lifecycle_state = 5;
    optional DataLifecycleStateId data_lifecycle_state_id = 6;
    optional string detection_pattern = 7;
    optional string detection_system = 8;
    optional DetectionSystemId detection_system_id = 9;
    optional string pattern_match = 10;
    Policy policy = 11;
}

// Database is an OSF object
// defined in ocsf objects/database.json
//
// The database object is used for databases which are typically datastore
// services that contain an organized collection of structured and
// unstructured data or a types of data.
message Database {
    enum TypeId {
        TYPE_ID_UNKNOWN         = 0; 
        TYPE_ID_RELATIONAL      = 1; 
        TYPE_ID_NETWORK         = 2; 
        TYPE_ID_OBJECT_ORIENTED = 3; 
        TYPE_ID_CENTRALIZED     = 4; 
        TYPE_ID_OPERATIONAL     = 5; 
        TYPE_ID_NOSQL           = 6; 
        TYPE_ID_OTHER           = 99;
    }
    optional int64 created_time = 1;
    optional google.protobuf.Timestamp created_time_dt = 2;
    DataClassification data_classification = 3;
    optional string desc = 4;
    repeated Group groups = 5;
    optional int64 modified_time = 6;
    optional google.protobuf.Timestamp modified_time_dt = 7;
    optional string name = 8;
    optional int64 size = 9;
    optional string type = 10;
    TypeId type_id = 11;
    optional string uid = 12;
}

// Databucket is an OSF object
// defined in ocsf objects/databucket.json
//
// The databucket object is a basic container that holds data, typically
// organized through the use of data partitions.
message Databucket {
    enum TypeId {
        TYPE_ID_UNKNOWN    = 0; 
        TYPE_ID_S3         = 1; 
        TYPE_ID_AZURE_BLOB = 2; 
        TYPE_ID_GCP_BUCKET = 3; 
        TYPE_ID_OTHER      = 99;
    }
    optional int64 created_time = 1;
    optional google.protobuf.Timestamp created_time_dt = 2;
    DataClassification data_classification = 3;
    optional string desc = 4;
    File file = 5;
    repeated Group groups = 6;
    optional int64 modified_time = 7;
    optional google.protobuf.Timestamp modified_time_dt = 8;
    optional string name = 9;
    optional int64 size = 10;
    optional string type = 11;
    TypeId type_id = 12;
    optional string uid = 13;
}

// NetworkEndpoint is an OSF object
// defined in ocsf objects/network_endpoint.json
//
// The Network Endpoint object describes characteristics of a network
// endpoint. These can be a source or destination of a network connection.
message NetworkEndpoint {
    enum TypeId {
        TYPE_ID_UNKNOWN  = 0;  // The type is unknown.
        TYPE_ID_SERVER   = 1;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:Server/'>server</a>.
        TYPE_ID_DESKTOP  = 2;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:DesktopComputer/'>desktop
                               // computer</a>.
        TYPE_ID_LAPTOP   = 3;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:LaptopComputer/'>laptop
                               // computer</a>.
        TYPE_ID_TABLET   = 4;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:TabletComputer/'>tablet
                               // computer</a>.
        TYPE_ID_MOBILE   = 5;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:MobilePhone/'>mobile
                               // phone</a>.
        TYPE_ID_VIRTUAL  = 6;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:VirtualizationSoftware/'>virtual
                               // machine</a>.
        TYPE_ID_IOT      = 7;  // A <a target='_blank'
                               // href='https://www.techtarget.com/iotagenda/definition/IoT-
                               // device'>IOT (Internet of Things) device</a>.
        TYPE_ID_BROWSER  = 8;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:Browser/'>web
                               // browser</a>.
        TYPE_ID_FIREWALL = 9;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:Firewall/'>networking
                               // firewall</a>.
        TYPE_ID_SWITCH   = 10; // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:Switch/'>networking
                               // switch</a>.
        TYPE_ID_HUB      = 11; // A <a target='_blank'
                               // href='https://en.wikipedia.org/wiki/Ethernet_hub'>networking
                               // hub</a>.
        TYPE_ID_OTHER    = 99; // The type is not mapped. See the <code>type</code>
                               // attribute, which contains a data source specific value.
    }
    repeated Agent agent_list = 1;
    AutonomousSystem autonomous_system = 2;
    Container container = 3;
    optional string domain = 4;
    optional string hostname = 5;
    DeviceHwInfo hw_info = 6;
    optional string instance_uid = 7;
    optional string interface_name = 8;
    optional string interface_uid = 9;
    repeated string intermediate_ips = 10;
    optional string ip = 11;
    Location location = 12;
    optional string mac = 13;
    optional string name = 14;
    optional int32 namespace_pid = 15;
    Os os = 16;
    User owner = 17;
    optional int32 port = 18;
    NetworkProxy proxy_endpoint = 19;
    optional string subnet_uid = 20;
    optional string svc_name = 21;
    optional string type = 22;
    optional TypeId type_id = 23;
    optional string uid = 24;
    optional string vlan_uid = 25;
    optional string vpc_uid = 26;
    optional string zone = 27;
}

// Table is an OSF object
// defined in ocsf objects/table.json
//
// The table object represents a table within a structured relational database
// or datastore, which contains columns and rows of data that are able to be
// create, updated, deleted and queried.
message Table {
    optional int64 created_time = 1;
    optional google.protobuf.Timestamp created_time_dt = 2;
    optional string desc = 3;
    repeated Group groups = 4;
    optional int64 modified_time = 5;
    optional google.protobuf.Timestamp modified_time_dt = 6;
    optional string name = 7;
    optional int64 size = 8;
    optional string uid = 9;
}

// HttpRequest is an OSF object
// defined in ocsf objects/http_request.json
//
// The HTTP Request object represents the attributes of a request made to a
// web server. It encapsulates the details and metadata associated with an
// HTTP request, including the request method, headers, URL, query parameters,
// body content, and other relevant information.
message HttpRequest {
    optional string args = 1;
    repeated HttpHeader http_headers = 2;
    optional string http_method = 3;
    optional int32 length = 4;
    optional string referrer = 5;
    optional string uid = 6;
    Url url = 7;
    optional string user_agent = 8;
    optional string version = 9;
    repeated string x_forwarded_for = 10;
}

// Policy is an OSF object
// defined in ocsf objects/policy.json
//
// The Policy object describes the policies that are applicable. <p>Policy
// attributes provide traceability to the operational state of the security
// product at the time that the event was captured, facilitating forensics,
// troubleshooting, and policy tuning/adjustments.</p>
message Policy {
    optional string desc = 1;
    Group group = 2;
    optional bool is_applied = 3;
    optional string name = 4;
    optional string uid = 5;
    optional string version = 6;
}

// AuthFactor is an OSF object
// defined in ocsf objects/auth_factor.json
//
// An Authentication Factor object describes a category of methods used for
// identity verification in an authentication attempt.
message AuthFactor {
    enum FactorTypeId {
        FACTOR_TYPE_ID_UNKNOWN           = 0; 
        FACTOR_TYPE_ID_SMS               = 1;  // User receives and inputs a code sent to
                                               // their mobile device via SMS text
                                               // message.
        FACTOR_TYPE_ID_SECURITY_QUESTION = 2;  // The user responds to a security question
                                               // as part of a question-based
                                               // authentication factor
        FACTOR_TYPE_ID_PHONE_CALL        = 3;  // System calls the user's registered phone
                                               // number and requires the user to answer
                                               // and provide a response.
        FACTOR_TYPE_ID_BIOMETRIC         = 4;  // Devices that verify identity-based on
                                               // user's physical identifiers, such as
                                               // fingerprint scanners or retina scanners.
        FACTOR_TYPE_ID_PUSH_NOTIFICATION = 5;  // Push notification is sent to user's
                                               // registered device and requires the user
                                               // to acknowledge.
        FACTOR_TYPE_ID_HARDWARE_TOKEN    = 6;  // Physical device that generates a code to
                                               // be used for authentication.
        FACTOR_TYPE_ID_OTP               = 7;  // Application generates a one-time password
                                               // (OTP) for use in authentication.
        FACTOR_TYPE_ID_EMAIL             = 8;  // A code or link is sent to a user's
                                               // registered email address.
        FACTOR_TYPE_ID_U2F               = 9;  // Typically involves a hardware token,
                                               // which the user physically interacts with
                                               // to authenticate.
        FACTOR_TYPE_ID_WEBAUTHN          = 10; // Web-based API that enables users to
                                               // register devices as authentication
                                               // factors.
        FACTOR_TYPE_ID_PASSWORD          = 11; // The user enters a password that they
                                               // have previously established.
        FACTOR_TYPE_ID_OTHER             = 99;
    }
    Device device = 1;
    optional string email_addr = 2;
    optional string factor_type = 3;
    FactorTypeId factor_type_id = 4;
    optional bool is_hotp = 5;
    optional bool is_totp = 6;
    optional string phone_number = 7;
    optional string provider = 8;
    repeated string security_questions = 9;
}

// Certificate is an OSF object
// defined in ocsf objects/certificate.json
//
// The Digital Certificate, also known as a Public Key Certificate, object
// contains information about the ownership and usage of a public key. It
// serves as a means to establish trust in the authenticity and integrity of
// the public key and the associated entity. Defined by D3FEND <a
// target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:Certificate/'>d3f:Certificate</a>.
message Certificate {
    optional int64 created_time = 1;
    optional google.protobuf.Timestamp created_time_dt = 2;
    optional int64 expiration_time = 3;
    optional google.protobuf.Timestamp expiration_time_dt = 4;
    repeated Fingerprint fingerprints = 5;
    string issuer = 6;
    string serial_number = 7;
    optional string subject = 8;
    optional string uid = 9;
    optional string version = 10;
}

// Service is an OSF object
// defined in ocsf objects/service.json
//
// The Service object describes characteristics of a service, <code> e.g. AWS
// EC2. </code>
message Service {
    repeated string labels = 1;
    optional string name = 2;
    optional string uid = 3;
    optional string version = 4;
}

// Session is an OSF object
// defined in ocsf objects/session.json
//
// The Session object describes details about an authenticated session. e.g.
// Session Creation Time, Session Issuer. Defined by D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:Session/'>d3f:Session</a>.
message Session {
    optional int32 count = 1;
    optional int64 created_time = 2;
    optional google.protobuf.Timestamp created_time_dt = 3;
    optional string credential_uid = 4;
    optional string expiration_reason = 5;
    optional int64 expiration_time = 6;
    optional google.protobuf.Timestamp expiration_time_dt = 7;
    optional bool is_mfa = 8;
    optional bool is_remote = 9;
    optional bool is_vpn = 10;
    optional string issuer = 11;
    optional string terminal = 12;
    optional string uid = 13;
    optional string uid_alt = 14;
    optional string uuid = 15;
}

// ManagedEntity is an OSF object
// defined in ocsf objects/managed_entity.json
//
// The Managed Entity object describes the type and version of an entity, such
// as a policy or configuration.
message ManagedEntity {
    optional google.protobuf.Value data = 1;
    optional string name = 2;
    optional string type = 3;
    optional string uid = 4;
    optional string version = 5;
}

// NetworkConnectionInfo is an OSF object
// defined in ocsf objects/network_connection_info.json
//
// The Network Connection Information object describes characteristics of a
// network connection. Defined by D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:NetworkSession/'>d3f:NetworkSession</a>.
message NetworkConnectionInfo {
    enum BoundaryId {
        BOUNDARY_ID_UNKNOWN                 = 0;  // The connection boundary is unknown.
        BOUNDARY_ID_LOCALHOST               = 1;  // Local network traffic on the same
                                                  // endpoint.
        BOUNDARY_ID_INTERNAL                = 2;  // Internal network traffic between two
                                                  // endpoints inside network.
        BOUNDARY_ID_EXTERNAL                = 3;  // External network traffic between two
                                                  // endpoints on the Internet or outside
                                                  // the network.
        BOUNDARY_ID_SAME_VPC                = 4;  // Through another resource in the same
                                                  // VPC
        BOUNDARY_ID_INTERNET_VPC_GATEWAY    = 5;  // Through an Internet gateway or a
                                                  // gateway VPC endpoint
        BOUNDARY_ID_VIRTUAL_PRIVATE_GATEWAY = 6;  // Through a virtual private gateway
        BOUNDARY_ID_INTRA_REGION_VPC        = 7;  // Through an intra-region VPC peering
                                                  // connection
        BOUNDARY_ID_INTER_REGION_VPC        = 8;  // Through an inter-region VPC peering
                                                  // connection
        BOUNDARY_ID_LOCAL_GATEWAY           = 9;  // Through a local gateway
        BOUNDARY_ID_GATEWAY_VPC             = 10; // Through a gateway VPC endpoint (Nitro-
                                                  // based instances only)
        BOUNDARY_ID_INTERNET_GATEWAY        = 11; // Through an Internet gateway (Nitro-
                                                  // based instances only)
        BOUNDARY_ID_OTHER                   = 99; // The boundary is not mapped. See the
                                                  // <code>boundary</code> attribute,
                                                  // which contains a data source specific
                                                  // value.
    }
    enum DirectionId {
        DIRECTION_ID_UNKNOWN  = 0;  // The connection direction is unknown.
        DIRECTION_ID_INBOUND  = 1;  // Inbound network connection. The connection was
                                    // originated from the Internet or outside network,
                                    // destined for services on the inside network.
        DIRECTION_ID_OUTBOUND = 2;  // Outbound network connection. The connection was
                                    // originated from inside the network, destined for
                                    // services on the Internet or outside network.
        DIRECTION_ID_LATERAL  = 3;  // Lateral network connection. The connection was
                                    // originated from inside the network, destined for
                                    // services on the inside network.
        DIRECTION_ID_OTHER    = 99; // The direction is not mapped. See the
                                    // <code>direction</code> attribute, which contains a
                                    // data source specific value.
    }
    enum ProtocolVerId {
        PROTOCOL_VER_ID_UNKNOWN                          = 0; 
        PROTOCOL_VER_ID_INTERNET_PROTOCOL_VERSION_4_IPV4 = 4; 
        PROTOCOL_VER_ID_INTERNET_PROTOCOL_VERSION_6_IPV6 = 6; 
        PROTOCOL_VER_ID_OTHER                            = 99;
    }
    optional string boundary = 1;
    optional BoundaryId boundary_id = 2;
    optional string direction = 3;
    DirectionId direction_id = 4;
    optional string protocol_name = 5;
    optional int32 protocol_num = 6;
    optional string protocol_ver = 7;
    optional ProtocolVerId protocol_ver_id = 8;
    Session session = 9;
    optional int32 tcp_flags = 10;
    optional string uid = 11;
}

// LoadBalancer is an OSF object
// defined in ocsf objects/load_balancer.json
//
// The load balancer object describes the load balancer entity and contains
// additional information regarding the distribution of traffic across a
// network.
message LoadBalancer {
    optional string classification = 1;
    optional int32 code = 2;
    NetworkEndpoint dst_endpoint = 3;
    repeated EndpointConnection endpoint_connections = 4;
    optional string error_message = 5;
    optional string message = 6;
    repeated Metric metrics = 7;
    optional string name = 8;
    optional string status_detail = 9;
    optional string uid = 10;
}

// NetworkProxy is an OSF object
// defined in ocsf objects/network_proxy.json
//
// The network proxy endpoint object describes a proxy server, which acts as
// an intermediary between a client requesting a resource and the server
// providing that resource.  Defined by D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:ProxyServer/'>d3f:ProxyServer</a>.
message NetworkProxy {
    enum TypeId {
        TYPE_ID_UNKNOWN  = 0;  // The type is unknown.
        TYPE_ID_SERVER   = 1;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:Server/'>server</a>.
        TYPE_ID_DESKTOP  = 2;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:DesktopComputer/'>desktop
                               // computer</a>.
        TYPE_ID_LAPTOP   = 3;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:LaptopComputer/'>laptop
                               // computer</a>.
        TYPE_ID_TABLET   = 4;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:TabletComputer/'>tablet
                               // computer</a>.
        TYPE_ID_MOBILE   = 5;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:MobilePhone/'>mobile
                               // phone</a>.
        TYPE_ID_VIRTUAL  = 6;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:VirtualizationSoftware/'>virtual
                               // machine</a>.
        TYPE_ID_IOT      = 7;  // A <a target='_blank'
                               // href='https://www.techtarget.com/iotagenda/definition/IoT-
                               // device'>IOT (Internet of Things) device</a>.
        TYPE_ID_BROWSER  = 8;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:Browser/'>web
                               // browser</a>.
        TYPE_ID_FIREWALL = 9;  // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:Firewall/'>networking
                               // firewall</a>.
        TYPE_ID_SWITCH   = 10; // A <a target='_blank'
                               // href='https://d3fend.mitre.org/dao/artifact/d3f:Switch/'>networking
                               // switch</a>.
        TYPE_ID_HUB      = 11; // A <a target='_blank'
                               // href='https://en.wikipedia.org/wiki/Ethernet_hub'>networking
                               // hub</a>.
        TYPE_ID_OTHER    = 99; // The type is not mapped. See the <code>type</code>
                               // attribute, which contains a data source specific value.
    }
    repeated Agent agent_list = 1;
    AutonomousSystem autonomous_system = 2;
    Container container = 3;
    optional string domain = 4;
    optional string hostname = 5;
    DeviceHwInfo hw_info = 6;
    optional string instance_uid = 7;
    optional string interface_name = 8;
    optional string interface_uid = 9;
    repeated string intermediate_ips = 10;
    optional string ip = 11;
    Location location = 12;
    optional string mac = 13;
    optional string name = 14;
    optional int32 namespace_pid = 15;
    Os os = 16;
    User owner = 17;
    optional int32 port = 18;
    NetworkProxy proxy_endpoint = 19;
    optional string subnet_uid = 20;
    optional string svc_name = 21;
    optional string type = 22;
    optional TypeId type_id = 23;
    optional string uid = 24;
    optional string vlan_uid = 25;
    optional string vpc_uid = 26;
    optional string zone = 27;
}

// HttpResponse is an OSF object
// defined in ocsf objects/http_response.json
//
// The HTTP Response object contains detailed information about the response
// sent from a web server to the requester. It encompasses attributes and
// metadata that describe the response status, headers, body content, and
// other relevant information.
message HttpResponse {
    int32 code = 1;
    optional string content_type = 2;
    repeated HttpHeader http_headers = 3;
    optional int32 latency = 4;
    optional int32 length = 5;
    optional string message = 6;
    optional string status = 7;
}

// Tls is an OSF object
// defined in ocsf objects/tls.json
//
// The Transport Layer Security (TLS) object describes the negotiated TLS
// protocol used for secure communications over an establish network
// connection.
message Tls {
    optional int32 alert = 1;
    Certificate certificate = 2;
    repeated string certificate_chain = 3;
    optional string cipher = 4;
    repeated string client_ciphers = 5;
    repeated TlsExtension extension_list = 6;
    optional int32 handshake_dur = 7;
    Fingerprint ja3_hash = 8;
    Fingerprint ja3s_hash = 9;
    optional int32 key_length = 10;
    repeated San sans = 11;
    repeated string server_ciphers = 12;
    optional string sni = 13;
    repeated TlsExtension tls_extension_list = 14;
    string version = 15;
}

// NetworkTraffic is an OSF object
// defined in ocsf objects/network_traffic.json
//
// The Network Traffic object describes characteristics of network traffic.
// Network traffic refers to data moving across a network at a given point of
// time. Defined by D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:NetworkTraffic/'>d3f:NetworkTraffic</a>.
message NetworkTraffic {
    optional int64 bytes = 1;
    optional int64 bytes_in = 2;
    optional int64 bytes_out = 3;
    optional int64 chunks = 4;
    optional int64 chunks_in = 5;
    optional int64 chunks_out = 6;
    optional int64 packets = 7;
    optional int64 packets_in = 8;
    optional int64 packets_out = 9;
}

// Url is an OSF object
// defined in ocsf objects/url.json
//
// The Uniform Resource Locator(URL) object describes the characteristics of a
// URL. Defined in <a target='_blank'
// href='https://datatracker.ietf.org/doc/html/rfc1738'>RFC 1738</a> and by
// D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:URL/'>d3f:URL</a>.
message Url {
    enum CategoryIds {
        CATEGORY_IDS_UNKNOWN                         = 0;   // The Domain/URL category is
                                                            // unknown.
        CATEGORY_IDS_ADULT_MATURE_CONTENT            = 1;  
        CATEGORY_IDS_PORNOGRAPHY                     = 3;  
        CATEGORY_IDS_SEX_EDUCATION                   = 4;  
        CATEGORY_IDS_INTIMATE_APPAREL_SWIMSUIT       = 5;  
        CATEGORY_IDS_NUDITY                          = 6;  
        CATEGORY_IDS_EXTREME                         = 7;  
        CATEGORY_IDS_SCAM_QUESTIONABLE_ILLEGAL       = 9;  
        CATEGORY_IDS_GAMBLING                        = 11; 
        CATEGORY_IDS_VIOLENCE_HATE_RACISM            = 14; 
        CATEGORY_IDS_WEAPONS                         = 15; 
        CATEGORY_IDS_ABORTION                        = 16; 
        CATEGORY_IDS_HACKING                         = 17; 
        CATEGORY_IDS_PHISHING                        = 18; 
        CATEGORY_IDS_ENTERTAINMENT                   = 20; 
        CATEGORY_IDS_BUSINESS_ECONOMY                = 21; 
        CATEGORY_IDS_ALTERNATIVE_SPIRITUALITY_BELIEF = 22; 
        CATEGORY_IDS_ALCOHOL                         = 23; 
        CATEGORY_IDS_TOBACCO                         = 24; 
        CATEGORY_IDS_CONTROLLED_SUBSTANCES           = 25; 
        CATEGORY_IDS_CHILD_PORNOGRAPHY               = 26; 
        CATEGORY_IDS_EDUCATION                       = 27; 
        CATEGORY_IDS_CHARITABLE_ORGANIZATIONS        = 29; 
        CATEGORY_IDS_ART_CULTURE                     = 30; 
        CATEGORY_IDS_FINANCIAL_SERVICES              = 31; 
        CATEGORY_IDS_BROKERAGE_TRADING               = 32; 
        CATEGORY_IDS_GAMES                           = 33; 
        CATEGORY_IDS_GOVERNMENT_LEGAL                = 34; 
        CATEGORY_IDS_MILITARY                        = 35; 
        CATEGORY_IDS_POLITICAL_SOCIAL_ADVOCACY       = 36; 
        CATEGORY_IDS_HEALTH                          = 37; 
        CATEGORY_IDS_TECHNOLOGY_INTERNET             = 38; 
        CATEGORY_IDS_SEARCH_ENGINES_PORTALS          = 40; 
        CATEGORY_IDS_MALICIOUS_SOURCES_MALNETS       = 43; 
        CATEGORY_IDS_MALICIOUS_OUTBOUND_DATA_BOTNETS = 44; 
        CATEGORY_IDS_JOB_SEARCH_CAREERS              = 45; 
        CATEGORY_IDS_NEWS_MEDIA                      = 46; 
        CATEGORY_IDS_PERSONALS_DATING                = 47; 
        CATEGORY_IDS_REFERENCE                       = 49; 
        CATEGORY_IDS_MIXED_CONTENT_POTENTIALLY_ADULT = 50; 
        CATEGORY_IDS_CHAT_IM_SMS                     = 51; 
        CATEGORY_IDS_EMAIL                           = 52; 
        CATEGORY_IDS_NEWSGROUPS_FORUMS               = 53; 
        CATEGORY_IDS_RELIGION                        = 54; 
        CATEGORY_IDS_SOCIAL_NETWORKING               = 55; 
        CATEGORY_IDS_FILE_STORAGE_SHARING            = 56; 
        CATEGORY_IDS_REMOTE_ACCESS_TOOLS             = 57; 
        CATEGORY_IDS_SHOPPING                        = 58; 
        CATEGORY_IDS_AUCTIONS                        = 59; 
        CATEGORY_IDS_REAL_ESTATE                     = 60; 
        CATEGORY_IDS_SOCIETY_DAILY_LIVING            = 61; 
        CATEGORY_IDS_PERSONAL_SITES                  = 63; 
        CATEGORY_IDS_RESTAURANTS_DINING_FOOD         = 64; 
        CATEGORY_IDS_SPORTS_RECREATION               = 65; 
        CATEGORY_IDS_TRAVEL                          = 66; 
        CATEGORY_IDS_VEHICLES                        = 67; 
        CATEGORY_IDS_HUMOR_JOKES                     = 68; 
        CATEGORY_IDS_SOFTWARE_DOWNLOADS              = 71; 
        CATEGORY_IDS_PEER_TO_PEER_P2P                = 83; 
        CATEGORY_IDS_AUDIO_VIDEO_CLIPS               = 84; 
        CATEGORY_IDS_OFFICE_BUSINESS_APPLICATIONS    = 85; 
        CATEGORY_IDS_PROXY_AVOIDANCE                 = 86; 
        CATEGORY_IDS_FOR_KIDS                        = 87; 
        CATEGORY_IDS_WEB_ADS_ANALYTICS               = 88; 
        CATEGORY_IDS_WEB_HOSTING                     = 89; 
        CATEGORY_IDS_UNCATEGORIZED                   = 90; 
        CATEGORY_IDS_SUSPICIOUS                      = 92; 
        CATEGORY_IDS_SEXUAL_EXPRESSION               = 93; 
        CATEGORY_IDS_TRANSLATION                     = 95; 
        CATEGORY_IDS_NON_VIEWABLE_INFRASTRUCTURE     = 96; 
        CATEGORY_IDS_CONTENT_SERVERS                 = 97; 
        CATEGORY_IDS_PLACEHOLDERS                    = 98; 
        CATEGORY_IDS_OTHER                           = 99;  // The Domain/URL category is
                                                            // not mapped. See the
                                                            // <code>categories</code>
                                                            // attribute, which contains a
                                                            // data source specific value.
        CATEGORY_IDS_SPAM                            = 101;
        CATEGORY_IDS_POTENTIALLY_UNWANTED_SOFTWARE   = 102;
        CATEGORY_IDS_DYNAMIC_DNS_HOST                = 103;
        CATEGORY_IDS_E_CARD_INVITATIONS              = 106;
        CATEGORY_IDS_INFORMATIONAL                   = 107;
        CATEGORY_IDS_COMPUTER_INFORMATION_SECURITY   = 108;
        CATEGORY_IDS_INTERNET_CONNECTED_DEVICES      = 109;
        CATEGORY_IDS_INTERNET_TELEPHONY              = 110;
        CATEGORY_IDS_ONLINE_MEETINGS                 = 111;
        CATEGORY_IDS_MEDIA_SHARING                   = 112;
        CATEGORY_IDS_RADIO_AUDIO_STREAMS             = 113;
        CATEGORY_IDS_TV_VIDEO_STREAMS                = 114;
        CATEGORY_IDS_PIRACY_COPYRIGHT_CONCERNS       = 118;
        CATEGORY_IDS_MARIJUANA                       = 121;
    }
    repeated string categories = 1;
    repeated CategoryIds category_ids = 2;
    optional string hostname = 3;
    optional string path = 4;
    optional int32 port = 5;
    optional string query_string = 6;
    optional string resource_type = 7;
    optional string scheme = 8;
    optional string subdomain = 9;
    optional string url_string = 10;
}

// HttpCookie is an OSF object
// defined in ocsf objects/http_cookie.json
//
// The HTTP Cookie object, also known as a web cookie or browser cookie,
// contains details and values pertaining to a small piece of data that a
// server sends to a user's web browser. This data is then stored by the
// browser and sent back to the server with subsequent requests, allowing the
// server to remember and track certain information about the user's browsing
// session or preferences.
message HttpCookie {
    optional string domain = 1;
    optional int64 expiration_time = 2;
    optional google.protobuf.Timestamp expiration_time_dt = 3;
    optional bool http_only = 4;
    optional bool is_http_only = 5;
    optional bool is_secure = 6;
    string name = 7;
    optional string path = 8;
    optional string samesite = 9;
    optional bool secure = 10;
    string value = 11;
}

// DnsAnswer is an OSF object
// defined in ocsf objects/dns_answer.json
//
// The DNS Answer object represents a specific response provided by the Domain
// Name System (DNS) when querying for information about a domain or
// performing a DNS operation. It encapsulates the relevant details and data
// returned by the DNS server in response to a query.
message DnsAnswer {
    enum FlagIds {
        FLAG_IDS_UNKNOWN              = 0; 
        FLAG_IDS_AUTHORITATIVE_ANSWER = 1; 
        FLAG_IDS_TRUNCATED_RESPONSE   = 2; 
        FLAG_IDS_RECURSION_DESIRED    = 3; 
        FLAG_IDS_RECURSION_AVAILABLE  = 4; 
        FLAG_IDS_AUTHENTIC_DATA       = 5; 
        FLAG_IDS_CHECKING_DISABLED    = 6; 
        FLAG_IDS_OTHER                = 99; // The event DNS header flag is not mapped.
    }
    optional string class = 1;
    repeated FlagIds flag_ids = 2;
    repeated string flags = 3;
    optional int32 packet_uid = 4;
    string rdata = 5;
    optional int32 ttl = 6;
    optional string type = 7;
}

// DnsQuery is an OSF object
// defined in ocsf objects/dns_query.json
//
// The DNS query object represents a specific request made to the Domain Name
// System (DNS) to retrieve information about a domain or perform a DNS
// operation. This object encapsulates the necessary attributes and methods to
// construct and send DNS queries, specify the query type (e.g., A, AAAA, MX).
// Defined by D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:DNSLookup/'>d3f:DNSLookup</a>.
message DnsQuery {
    enum OpcodeId {
        OPCODE_ID_QUERY         = 0; // Standard query
        OPCODE_ID_INVERSE_QUERY = 1; // Inverse query, obsolete
        OPCODE_ID_STATUS        = 2; // Server status request
        OPCODE_ID_RESERVED      = 3; // Reserved, not used
        OPCODE_ID_NOTIFY        = 4; // Zone change notification
        OPCODE_ID_UPDATE        = 5; // Dynamic DNS update
        OPCODE_ID_DSO_MESSAGE   = 6; // DNS Stateful Operations (DSO)
    }
    optional string class = 1;
    string hostname = 2;
    optional string opcode = 3;
    optional OpcodeId opcode_id = 4;
    optional int32 packet_uid = 5;
    optional string type = 6;
}

// NetworkInterface is an OSF object
// defined in ocsf objects/network_interface.json
//
// The Network Interface object describes the type and associated attributes
// of a network interface.
message NetworkInterface {
    enum TypeId {
        TYPE_ID_UNKNOWN  = 0; 
        TYPE_ID_WIRED    = 1; 
        TYPE_ID_WIRELESS = 2; 
        TYPE_ID_MOBILE   = 3; 
        TYPE_ID_TUNNEL   = 4; 
        TYPE_ID_OTHER    = 99;
    }
    optional string hostname = 1;
    optional string ip = 2;
    optional string mac = 3;
    optional string name = 4;
    optional string namespace = 5;
    optional int32 subnet_prefix = 6;
    optional string type = 7;
    TypeId type_id = 8;
    optional string uid = 9;
}

// Display is an OSF object
// defined in ocsf objects/display.json
//
// The Display object contains information about the physical or virtual
// display connected to a computer system.
message Display {
    optional int32 color_depth = 1;
    optional int32 physical_height = 2;
    optional int32 physical_orientation = 3;
    optional int32 physical_width = 4;
    optional int32 scale_factor = 5;
}

// Request is an OSF object
// defined in ocsf objects/request.json
//
// The Request Elements object describes characteristics of an API request.
message Request {
    repeated Container containers = 1;
    optional google.protobuf.Value data = 2;
    repeated string flags = 3;
    string uid = 4;
}

// Response is an OSF object
// defined in ocsf objects/response.json
//
// The Response Elements object describes characteristics of an API response.
message Response {
    optional int32 code = 1;
    repeated Container containers = 2;
    optional google.protobuf.Value data = 3;
    optional string error = 4;
    optional string error_message = 5;
    repeated string flags = 6;
    optional string message = 7;
}

// DceRpc is an OSF object
// defined in ocsf objects/dce_rpc.json
//
// The DCE/RPC, or Distributed Computing Environment/Remote Procedure Call,
// object describes the remote procedure call system for distributed computing
// environments. Defined by D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:RemoteProcedureCall/'>d3f:RemoteProcedureCall</a>.
message DceRpc {
    optional string command = 1;
    optional string command_response = 2;
    repeated string flags = 3;
    optional int32 opnum = 4;
    RpcInterface rpc_interface = 5;
}

// Hassh is an OSF object
// defined in ocsf objects/hassh.json
//
// The HASSH object contains SSH network fingerprinting values for specific
// client/server implementations. It provides a standardized way of
// identifying and categorizing SSH connections based on their unique
// characteristics and behavior.
message Hassh {
    optional string algorithm = 1;
    Fingerprint fingerprint = 2;
}

// Email is an OSF object
// defined in ocsf objects/email.json
//
// The Email object describes the email metadata such as sender, recipients,
// and direction. Defined by D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:Email/'>d3f:Email</a>.
message Email {
    repeated string cc = 1;
    DataClassification data_classification = 2;
    optional string delivered_to = 3;
    string from = 4;
    optional string message_uid = 5;
    optional string raw_header = 6;
    optional string reply_to = 7;
    optional int64 size = 8;
    optional string smtp_from = 9;
    repeated string smtp_to = 10;
    optional string subject = 11;
    repeated string to = 12;
    optional string uid = 13;
    repeated string x_originating_ip = 14;
}

// EmailAuth is an OSF object
// defined in ocsf objects/email_auth.json
//
// The Email Authentication object describes the Sender Policy Framework
// (SPF), DomainKeys Identified Mail (DKIM) and Domain-based Message
// Authentication, Reporting and Conformance (DMARC) attributes of an email.
message EmailAuth {
    optional string dkim = 1;
    optional string dkim_domain = 2;
    optional string dkim_signature = 3;
    optional string dmarc = 4;
    optional string dmarc_override = 5;
    optional string dmarc_policy = 6;
    optional string spf = 7;
}

// CisBenchmarkResult is an OSF object
// defined in ocsf objects/cis_benchmark_result.json
//
// The CIS Benchmark Result object contains information as defined by the
// Center for Internet Security (<a target='_blank'
// href='https://www.cisecurity.org/cis-benchmarks/'>CIS</a>) benchmark result.
// CIS Benchmarks are a collection of best practices for securely configuring
// IT systems, software, networks, and cloud infrastructure.
message CisBenchmarkResult {
    optional string desc = 1;
    string name = 2;
    Remediation remediation = 3;
    Rule rule = 4;
}

// KbArticle is an OSF object
// defined in ocsf objects/kb_article.json
//
// The KB Article object contains metadata that describes the patch or update.
message KbArticle {
    optional string bulletin = 1;
    optional string classification = 2;
    optional int64 created_time = 3;
    optional google.protobuf.Timestamp created_time_dt = 4;
    optional bool is_superseded = 5;
    Os os = 6;
    Product product = 7;
    optional string severity = 8;
    optional int64 size = 9;
    optional string src_url = 10;
    optional string title = 11;
    string uid = 12;
}

// QueryInfo is an OSF object
// defined in ocsf objects/query_info.json
//
// The query info object holds information related to data access within a
// datastore. To access, manipulate, delete, or retrieve data from a
// datastore, a query must be written using a specific syntax.
message QueryInfo {
    optional int64 bytes = 1;
    optional google.protobuf.Value data = 2;
    optional string name = 3;
    string query_string = 4;
    optional int64 query_time = 5;
    optional google.protobuf.Timestamp query_time_dt = 6;
    optional string uid = 7;
}

// PeripheralDevice is an OSF object
// defined in ocsf objects/peripheral_device.json
//
// The peripheral device object describes the identity, vendor and model of a
// peripheral device.
message PeripheralDevice {
    string class = 1;
    optional string model = 2;
    string name = 3;
    optional string serial_number = 4;
    optional string uid = 5;
    optional string vendor_name = 6;
}

// SecurityState is an OSF object
// defined in ocsf objects/security_state.json
//
// The Security State object describes the security related state of a managed
// entity.
message SecurityState {
    enum StateId {
        STATE_ID_UNKNOWN                        = 0;  // The security state is unknown.
        STATE_ID_MISSING_OR_OUTDATED_CONTENT    = 1;  // The content is missing or
                                                      // outdated.
        STATE_ID_POLICY_MISMATCH                = 2;  // Not in compliance with the
                                                      // expected security policy.
        STATE_ID_IN_NETWORK_QUARANTINE          = 3;  // Isolated from the network.
        STATE_ID_PROTECTION_OFF                 = 4;  // Not protected by a security
                                                      // solution.
        STATE_ID_PROTECTION_MALFUNCTION         = 5;  // The security solution is not
                                                      // functioning properly.
        STATE_ID_PROTECTION_NOT_LICENSED        = 6;  // The security solution does not
                                                      // have a valid license.
        STATE_ID_UNREMEDIATED_THREAT            = 7;  // A detected threat has not been
                                                      // remediated.
        STATE_ID_SUSPICIOUS_REPUTATION          = 8;  // Reputation of the entity is
                                                      // suspicious.
        STATE_ID_REBOOT_PENDING                 = 9;  // A reboot is required for one or
                                                      // more pending actions.
        STATE_ID_CONTENT_IS_LOCKED              = 10; // The content is locked to a
                                                      // specific version.
        STATE_ID_NOT_INSTALLED                  = 11; // The entity is not installed.
        STATE_ID_WRITABLE_SYSTEM_PARTITION      = 12; // The system partition is
                                                      // writeable.
        STATE_ID_SAFETYNET_FAILURE              = 13; // The device has failed the
                                                      // SafetyNet check.
        STATE_ID_FAILED_BOOT_VERIFY             = 14; // The device has failed the boot
                                                      // verification process.
        STATE_ID_MODIFIED_EXECUTION_ENVIRONMENT = 15; // The execution environment has
                                                      // been modified.
        STATE_ID_SELINUX_DISABLED               = 16; // The SELinux security feature has
                                                      // been disabled.
        STATE_ID_ELEVATED_PRIVILEGE_SHELL       = 17; // An elevated privilege shell has
                                                      // been detected.
        STATE_ID_IOS_FILE_SYSTEM_ALTERED        = 18; // The file system has been altered
                                                      // on an iOS device.
        STATE_ID_OPEN_REMOTE_ACCESS             = 19; // Remote access is enabled.
        STATE_ID_OTA_UPDATES_DISABLED           = 20; // Mobile OTA (Over The Air) updates
                                                      // have been disabled.
        STATE_ID_ROOTED                         = 21; // The device has been modified to
                                                      // allow root access.
        STATE_ID_ANDROID_PARTITION_MODIFIED     = 22; // The Android partition has been
                                                      // modified.
        STATE_ID_COMPLIANCE_FAILURE             = 23; // The entity is not compliant with
                                                      // the associated security policy.
        STATE_ID_OTHER                          = 99; // The security state is not mapped.
                                                      // See the <code>state</code>
                                                      // attribute, which contains data
                                                      // source specific values.
    }
    optional string state = 1;
    optional StateId state_id = 2;
}

// WebResource is an OSF object
// defined in ocsf objects/web_resource.json
//
// The Web Resource object describes characteristics of a web resource that
// was affected by the activity/event.
message WebResource {
    optional google.protobuf.Value data = 1;
    DataClassification data_classification = 2;
    optional string desc = 3;
    repeated string labels = 4;
    optional string name = 5;
    optional string type = 6;
    optional string uid = 7;
    optional string url_string = 8;
}

// Product is an OSF object
// defined in ocsf objects/product.json
//
// The Product object describes characteristics of a software product.
message Product {
    optional string cpe_name = 1;
    DataClassification data_classification = 2;
    Feature feature = 3;
    optional string lang = 4;
    optional string name = 5;
    optional string path = 6;
    optional string uid = 7;
    optional string url_string = 8;
    string vendor_name = 9;
    optional string version = 10;
}

// Scan is an OSF object
// defined in ocsf objects/scan.json
//
// The Scan object describes characteristics of a proactive scan.
message Scan {
    enum TypeId {
        TYPE_ID_UNKNOWN           = 0; 
        TYPE_ID_MANUAL            = 1;  // The scan was manually initiated by the user or
                                        // administrator.
        TYPE_ID_SCHEDULED         = 2;  // The scan was started based on scheduler.
        TYPE_ID_UPDATED_CONTENT   = 3;  // The scan was triggered by a content update.
        TYPE_ID_QUARANTINED_ITEMS = 4;  // The scan was triggered by newly quarantined
                                        // items.
        TYPE_ID_ATTACHED_MEDIA    = 5;  // The scan was triggered by the attachment of
                                        // removable media.
        TYPE_ID_USER_LOGON        = 6;  // The scan was started due to a user logon.
        TYPE_ID_ELAM              = 7;  // The scan was triggered by an Early Launch Anti-
                                        // Malware (ELAM) detection.
        TYPE_ID_OTHER             = 99; // The scan type id is not mapped. See the
                                        // <code>type</code> attribute, which contains a
                                        // data source specific value.
    }
    optional string name = 1;
    optional string type = 2;
    TypeId type_id = 3;
    optional string uid = 4;
}

// Idp is an OSF object
// defined in ocsf objects/idp.json
//
// The Identity Provider object contains detailed information about a provider
// responsible for creating, maintaining, and managing identity information
// while offering authentication services to applications. An Identity
// Provider (IdP) serves as a trusted authority that verifies the identity of
// users and issues authentication tokens or assertions to enable secure
// access to applications or services.
message Idp {
    optional string name = 1;
    optional string uid = 2;
}

// SubTechnique is an OSF object
// defined in ocsf objects/sub_technique.json
//
// The Sub Technique object describes the sub technique ID and/or name
// associated to an attack, as defined by <a target='_blank'
// href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK
// Matrix<sup>TM</sup></a>.
message SubTechnique {
    optional string name = 1;
    optional string src_url = 2;
    optional string uid = 3;
}

// Tactic is an OSF object
// defined in ocsf objects/tactic.json
//
// The Tactic object describes the tactic ID and/or name that is associated to
// an attack, as defined by <a target='_blank'
// href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK
// Matrix<sup>TM</sup></a>.
message Tactic {
    optional string name = 1;
    optional string src_url = 2;
    optional string uid = 3;
}

// Technique is an OSF object
// defined in ocsf objects/technique.json
//
// The Technique object describes the technique ID and/or name associated to
// an attack, as defined by <a target='_blank'
// href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK
// Matrix<sup>TM</sup></a>.
message Technique {
    optional string name = 1;
    optional string src_url = 2;
    optional string uid = 3;
}

// Account is an OSF object
// defined in ocsf objects/account.json
//
// The Account object contains details about the account that initiated or
// performed a specific activity within a system or application.
message Account {
    enum TypeId {
        TYPE_ID_UNKNOWN          = 0;  // The account type is unknown.
        TYPE_ID_LDAP_ACCOUNT     = 1; 
        TYPE_ID_WINDOWS_ACCOUNT  = 2; 
        TYPE_ID_AWS_IAM_USER     = 3; 
        TYPE_ID_AWS_IAM_ROLE     = 4; 
        TYPE_ID_GCP_ACCOUNT      = 5; 
        TYPE_ID_AZURE_AD_ACCOUNT = 6; 
        TYPE_ID_MAC_OS_ACCOUNT   = 7; 
        TYPE_ID_APPLE_ACCOUNT    = 8; 
        TYPE_ID_LINUX_ACCOUNT    = 9; 
        TYPE_ID_AWS_ACCOUNT      = 10;
        TYPE_ID_OTHER            = 99; // The account type is not mapped.
    }
    repeated string labels = 1;
    optional string name = 2;
    optional string type = 3;
    optional TypeId type_id = 4;
    optional string uid = 5;
}

// Organization is an OSF object
// defined in ocsf objects/organization.json
//
// The Organization object describes characteristics of an organization or
// company and its division if any.
message Organization {
    optional string name = 1;
    optional string ou_name = 2;
    optional string ou_uid = 3;
    optional string uid = 4;
}

// Agent is an OSF object
// defined in ocsf objects/agent.json
//
// An Agent (also known as a Sensor) is typically installed on an Operating
// System (OS) and serves as a specialized software component that can be
// designed to monitor, detect, collect, archive, or take action. These
// activities and possible actions are defined by the upstream system
// controlling the Agent and its intended purpose. For instance, an Agent can
// include Endpoint Detection & Response (EDR) agents, backup/disaster
// recovery sensors, Application Performance Monitoring or profiling sensors,
// and similar software.
message Agent {
    enum TypeId {
        TYPE_ID_UNKNOWN                              = 0;  // The type is unknown.
        TYPE_ID_ENDPOINT_DETECTION_AND_RESPONSE      = 1;  // Any EDR sensor or agent. Or
                                                           // any tool that provides
                                                           // similar threat detection,
                                                           // anti-malware, anti-ransomware,
                                                           // or similar capabilities.
                                                           // E.g., Crowdstrike Falcon,
                                                           // Microsoft Defender for
                                                           // Endpoint, Wazuh.
        TYPE_ID_DATA_LOSS_PREVENTION                 = 2;  // Any DLP sensor or agent. Or
                                                           // any tool that provides
                                                           // similar data classification,
                                                           // data loss detection, and/or
                                                           // data loss prevention
                                                           // capabilities. E.g.,
                                                           // Forcepoint DLP, Microsoft
                                                           // Purview, Symantec DLP.
        TYPE_ID_BACKUP_RECOVERY                      = 3;  // Any agent or sensor that
                                                           // provides backups, archival,
                                                           // or recovery capabilities.
                                                           // E.g., Azure Backup, AWS
                                                           // Backint Agent.
        TYPE_ID_PERFORMANCE_MONITORING_OBSERVABILITY = 4;  // Any agent or sensor that
                                                           // provides Application
                                                           // Performance Monitoring
                                                           // (APM), active tracing,
                                                           // profiling, or other
                                                           // observability use cases and
                                                           // optionally forwards the
                                                           // logs. E.g., New Relic Agent,
                                                           // Datadog Agent, Azure Monitor
                                                           // Agent.
        TYPE_ID_VULNERABILITY_MANAGEMENT             = 5;  // Any agent or sensor that
                                                           // provides vulnerability
                                                           // management or scanning
                                                           // capabilities. E.g., Qualys
                                                           // VMDR, Microsoft Defender for
                                                           // Endpoint, Crowdstrike
                                                           // Spotlight, Amazon Inspector
                                                           // Agent.
        TYPE_ID_LOG_FORWARDING                       = 6;  // Any agent or sensor that
                                                           // forwards logs to a 3rd party
                                                           // storage system such as a
                                                           // data lake or SIEM. E.g.,
                                                           // Splunk Universal Forwarder,
                                                           // Tenzir, FluentBit, Amazon
                                                           // CloudWatch Agent, Amazon
                                                           // Kinesis Agent.
        TYPE_ID_MOBILE_DEVICE_MANAGEMENT             = 7;  // Any agent or sensor
                                                           // responsible for providing
                                                           // Mobile Device Management
                                                           // (MDM) or Mobile Enterprise
                                                           // Management (MEM)
                                                           // capabilities. E.g.,
                                                           // JumpCloud Agent, Esper
                                                           // Agent, Jamf Pro binary.
        TYPE_ID_CONFIGURATION_MANAGEMENT             = 8;  // Any agent or sensor that
                                                           // provides configuration
                                                           // management of a device, such
                                                           // as scanning for software,
                                                           // license management, or
                                                           // applying configurations.
                                                           // E.g., AWS Systems Manager
                                                           // Agent, Flexera, ServiceNow
                                                           // MID Server.
        TYPE_ID_REMOTE_ACCESS                        = 9;  // Any agent or sensor that
                                                           // provides remote access
                                                           // capabilities to a device.
                                                           // E.g., BeyondTrust, Amazon
                                                           // Systems Manager Agent,
                                                           // Verkada Agent.
        TYPE_ID_OTHER                                = 99; // The type is not mapped. See
                                                           // the <code>type</code>
                                                           // attribute, which contains a
                                                           // data source specific value.
    }
    optional string name = 1;
    repeated Policy policies = 2;
    optional string type = 3;
    optional TypeId type_id = 4;
    optional string uid = 5;
    optional string uid_alt = 6;
    optional string vendor_name = 7;
    optional string version = 8;
}

// Container is an OSF object
// defined in ocsf objects/container.json
//
// The Container object describes an instance of a specific container. A
// container is a prepackaged, portable system image that runs isolated on an
// existing system using a container runtime like containerd.
message Container {
    Fingerprint hash = 1;
    Image image = 2;
    optional string name = 3;
    optional string network_driver = 4;
    optional string orchestrator = 5;
    optional string pod_uuid = 6;
    optional string runtime = 7;
    optional int64 size = 8;
    optional string tag = 9;
    optional string uid = 10;
}

// DeviceHwInfo is an OSF object
// defined in ocsf objects/device_hw_info.json
//
// The Device Hardware Information object contains details and specifications
// of the physical components that make up a device. This information provides
// an overview of the hardware capabilities, configuration, and
// characteristics of the device.
message DeviceHwInfo {
    optional string bios_date = 1;
    optional string bios_manufacturer = 2;
    optional string bios_ver = 3;
    optional string chassis = 4;
    optional int32 cpu_bits = 5;
    optional int32 cpu_cores = 6;
    optional int32 cpu_count = 7;
    optional int32 cpu_speed = 8;
    optional string cpu_type = 9;
    Display desktop_display = 10;
    KeyboardInfo keyboard_info = 11;
    optional int32 ram_size = 12;
    optional string serial_number = 13;
}

// Image is an OSF object
// defined in ocsf objects/image.json
//
// The Image object provides a description of a specific Virtual Machine (VM)
// or Container image. Defined by D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:ContainerImage/'>d3f:ContainerImage</a>.
message Image {
    repeated string labels = 1;
    optional string name = 2;
    optional string path = 3;
    optional string tag = 4;
    string uid = 5;
}

// Location is an OSF object
// defined in ocsf objects/location.json
//
// The Geo Location object describes a geographical location, usually
// associated with an IP address. Defined by D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:PhysicalLocation/'>d3f:PhysicalLocation</a>.
message Location {
    optional string city = 1;
    optional string continent = 2;
    repeated double coordinates = 3;
    optional string country = 4;
    optional string desc = 5;
    optional string geohash = 6;
    optional bool is_on_premises = 7;
    optional string isp = 8;
    optional double lat = 9;
    optional double long = 10;
    optional string postal_code = 11;
    optional string provider = 12;
    optional string region = 13;
}

// Os is an OSF object
// defined in ocsf objects/os.json
//
// The Operating System (OS) object describes characteristics of an OS, such
// as Linux or Windows. Defined by D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:OperatingSystem/'>d3f:OperatingSystem</a>.
message Os {
    enum TypeId {
        TYPE_ID_UNKNOWN        = 0;   // The type is unknown.
        TYPE_ID_OTHER          = 99;  // The type is not mapped. See the <code>type</code>
                                      // attribute, which contains a data source specific
                                      // value.
        TYPE_ID_WINDOWS        = 100;
        TYPE_ID_WINDOWS_MOBILE = 101;
        TYPE_ID_LINUX          = 200;
        TYPE_ID_ANDROID        = 201;
        TYPE_ID_MACOS          = 300;
        TYPE_ID_IOS            = 301;
        TYPE_ID_IPADOS         = 302;
        TYPE_ID_SOLARIS        = 400;
        TYPE_ID_AIX            = 401;
        TYPE_ID_HP_UX          = 402;
    }
    optional string build = 1;
    optional string country = 2;
    optional string cpe_name = 3;
    optional int32 cpu_bits = 4;
    optional string edition = 5;
    optional string lang = 6;
    string name = 7;
    optional string sp_name = 8;
    optional int32 sp_ver = 9;
    optional string type = 10;
    TypeId type_id = 11;
    optional string version = 12;
}

// DataClassification is an OSF object
// defined in ocsf objects/data_classification.json
//
// The Data Classification object includes information about data
// classification levels and data category types.
message DataClassification {
    enum CategoryId {
        CATEGORY_ID_UNKNOWN                      = 0;  // The type is not mapped. See the
                                                       // <code>data_type</code>
                                                       // attribute, which contains a data
                                                       // source specific value.
        CATEGORY_ID_PERSONAL                     = 1;  // Any Personally Identifiable
                                                       // Information (PII), Electronic
                                                       // Personal Health Information
                                                       // (ePHI), or similarly personal
                                                       // information. E.g., full name,
                                                       // home address, date of birth,
                                                       // etc.
        CATEGORY_ID_GOVERNMENTAL                 = 2;  // Any sensitive government
                                                       // identification number related to
                                                       // a person or other classified
                                                       // material. E.g., Passport
                                                       // numbers, driver license numbers,
                                                       // business identification,
                                                       // taxation identifiers, etc.
        CATEGORY_ID_FINANCIAL                    = 3;  // Any financially-related sensitive
                                                       // information or Cardholder Data
                                                       // (CHD). E.g., banking account
                                                       // numbers, credit card numbers,
                                                       // International Banking Account
                                                       // Numbers (IBAN), SWIFT codes,
                                                       // etc.
        CATEGORY_ID_BUSINESS                     = 4;  // Any business-specific sensitive
                                                       // data such as intellectual
                                                       // property, trademarks,
                                                       // copyrights, human resource data,
                                                       // Board of Directors meeting
                                                       // minutes, and similar.
        CATEGORY_ID_MILITARY_AND_LAW_ENFORCEMENT = 5;  // Any mission-specific sensitive
                                                       // data for military, law
                                                       // enforcement, or other government
                                                       // agencies such as specifically
                                                       // classified data, weapon systems
                                                       // information, or other planning
                                                       // data.
        CATEGORY_ID_SECURITY                     = 6;  // Any sensitive security-related
                                                       // data such as passwords,
                                                       // passkeys, IP addresses, API
                                                       // keys, credentials and similar
                                                       // secrets. E.g., AWS Access Secret
                                                       // Key, SaaS API Keys, user
                                                       // passwords, database credentials,
                                                       // etc.
        CATEGORY_ID_OTHER                        = 99; // Any other type of data
                                                       // classification or a multi-variate
                                                       // classification made up of
                                                       // several other classification
                                                       // categories.
    }
    enum ConfidentialityId {
        CONFIDENTIALITY_ID_UNKNOWN          = 0;  // The confidentiality is unknown.
        CONFIDENTIALITY_ID_NOT_CONFIDENTIAL = 1; 
        CONFIDENTIALITY_ID_CONFIDENTIAL     = 2; 
        CONFIDENTIALITY_ID_SECRET           = 3; 
        CONFIDENTIALITY_ID_TOP_SECRET       = 4; 
        CONFIDENTIALITY_ID_PRIVATE          = 5; 
        CONFIDENTIALITY_ID_RESTRICTED       = 6; 
        CONFIDENTIALITY_ID_OTHER            = 99; // The confidentiality is not mapped.
                                                  // See the <code>confidentiality</code>
                                                  // attribute, which contains a data
                                                  // source specific value.
    }
    optional string category = 1;
    optional CategoryId category_id = 2;
    optional string confidentiality = 3;
    optional ConfidentialityId confidentiality_id = 4;
    Policy policy = 5;
}

// Fingerprint is an OSF object
// defined in ocsf objects/fingerprint.json
//
// The Fingerprint object provides detailed information about a digital
// fingerprint, which is a compact representation of data used to identify a
// longer piece of information, such as a public key or file content. It
// contains the algorithm and value of the fingerprint, enabling efficient and
// reliable identification of the associated data.
message Fingerprint {
    enum AlgorithmId {
        ALGORITHM_ID_UNKNOWN      = 0; 
        ALGORITHM_ID_MD5          = 1;  // MD5 message-digest algorithm producing a 128-bit
                                        // (16-byte) hash value.
        ALGORITHM_ID_SHA_1        = 2;  // Secure Hash Algorithm 1 producing a 160-bit (20-
                                        // byte) hash value.
        ALGORITHM_ID_SHA_256      = 3;  // Secure Hash Algorithm 2 producing a 256-bit (32-
                                        // byte) hash value.
        ALGORITHM_ID_SHA_512      = 4;  // Secure Hash Algorithm 2 producing a 512-bit (64-
                                        // byte) hash value.
        ALGORITHM_ID_CTPH         = 5;  // The ssdeep generated fuzzy checksum. Also known
                                        // as Context Triggered Piecewise Hash (CTPH).
        ALGORITHM_ID_TLSH         = 6;  // The TLSH fuzzy hashing algorithm.
        ALGORITHM_ID_QUICKXORHASH = 7;  // Microsoft simple non-cryptographic hash
                                        // algorithm that works by XORing the bytes in a
                                        // circular-shifting fashion.
        ALGORITHM_ID_OTHER        = 99;
    }
    optional string algorithm = 1;
    AlgorithmId algorithm_id = 2;
    string value = 3;
}

// DigitalSignature is an OSF object
// defined in ocsf objects/digital_signature.json
//
// The Digital Signature object contains information about the cryptographic
// mechanism used to verify the authenticity, integrity, and origin of the
// file or application.
message DigitalSignature {
    enum AlgorithmId {
        ALGORITHM_ID_UNKNOWN      = 0; 
        ALGORITHM_ID_DSA          = 1;  // Digital Signature Algorithm (DSA).
        ALGORITHM_ID_RSA          = 2;  // Rivest-Shamir-Adleman (RSA) Algorithm.
        ALGORITHM_ID_ECDSA        = 3;  // Elliptic Curve Digital Signature Algorithm.
        ALGORITHM_ID_AUTHENTICODE = 4;  // Microsoft Authenticode Digital Signature
                                        // Algorithm.
        ALGORITHM_ID_OTHER        = 99;
    }
    optional string algorithm = 1;
    AlgorithmId algorithm_id = 2;
    Certificate certificate = 3;
    optional int64 created_time = 4;
    optional google.protobuf.Timestamp created_time_dt = 5;
    optional string developer_uid = 6;
    Fingerprint digest = 7;
}

// Cve is an OSF object
// defined in ocsf objects/cve.json
//
// The Common Vulnerabilities and Exposures (CVE) object represents publicly
// disclosed cybersecurity vulnerabilities defined in CVE Program catalog (<a
// target='_blank' href='https://cve.mitre.org/'>CVE</a>). There is one CVE
// Record for each vulnerability in the catalog.
message Cve {
    optional int64 created_time = 1;
    optional google.protobuf.Timestamp created_time_dt = 2;
    repeated Cvss cvss = 3;
    Cwe cwe = 4;
    optional string cwe_uid = 5;
    optional string cwe_url = 6;
    optional string desc = 7;
    Epss epss = 8;
    optional int64 modified_time = 9;
    optional google.protobuf.Timestamp modified_time_dt = 10;
    Product product = 11;
    repeated string references = 12;
    optional string title = 13;
    optional string type = 14;
    string uid = 15;
}

// Extension is an OSF object
// defined in ocsf objects/extension.json
//
// The OCSF Schema Extension object provides detailed information about the
// schema extension used to construct the event. The schema extensions are
// registered in the <a target='_blank' href='https://github.com/ocsf/ocsf-
// schema/blob/main/extensions.md'>extensions.md</a> file.
message Extension {
    string name = 1;
    string uid = 2;
    string version = 3;
}

// Logger is an OSF object
// defined in ocsf objects/logger.json
//
// The Logger object represents the device and product where events are stored
// with times for receipt and transmission.  This may be at the source device
// where the event occurred, a remote scanning device, intermediate hops, or
// the ultimate destination.
message Logger {
    Device device = 1;
    optional string log_level = 2;
    optional string log_name = 3;
    optional string log_provider = 4;
    optional string log_version = 5;
    optional int64 logged_time = 6;
    optional google.protobuf.Timestamp logged_time_dt = 7;
    optional string name = 8;
    Product product = 9;
    optional int64 transmit_time = 10;
    optional google.protobuf.Timestamp transmit_time_dt = 11;
    optional string uid = 12;
    optional string version = 13;
}

// Reputation is an OSF object
// defined in ocsf objects/reputation.json
//
// The Reputation object describes the reputation/risk score of an entity
// (e.g. device, user, domain).
message Reputation {
    enum ScoreId {
        SCORE_ID_UNKNOWN            = 0;  // The reputation score is unknown.
        SCORE_ID_VERY_SAFE          = 1;  // Long history of good behavior.
        SCORE_ID_SAFE               = 2;  // Consistently good behavior.
        SCORE_ID_PROBABLY_SAFE      = 3;  // Reasonable history of good behavior.
        SCORE_ID_LEANS_SAFE         = 4;  // Starting to establish a history of normal
                                          // behavior.
        SCORE_ID_MAY_NOT_BE_SAFE    = 5;  // No established history of normal behavior.
        SCORE_ID_EXERCISE_CAUTION   = 6;  // Starting to establish a history of suspicious
                                          // or risky behavior.
        SCORE_ID_SUSPICIOUS_RISKY   = 7;  // A site with a history of suspicious or risky
                                          // behavior. (spam, scam, potentially unwanted
                                          // software, potentially malicious).
        SCORE_ID_POSSIBLY_MALICIOUS = 8;  // Strong possibility of maliciousness.
        SCORE_ID_PROBABLY_MALICIOUS = 9;  // Indicators of maliciousness.
        SCORE_ID_MALICIOUS          = 10; // Proven evidence of maliciousness.
        SCORE_ID_OTHER              = 99; // The reputation score is not mapped. See the
                                          // <code>rep_score</code> attribute, which
                                          // contains a data source specific value.
    }
    double base_score = 1;
    optional string provider = 2;
    optional string score = 3;
    ScoreId score_id = 4;
}

// RelatedEvent is an OSF object
// defined in ocsf objects/related_event.json
//
// The Related Event object describes an OCSF event related to a finding.
message RelatedEvent {
    repeated Attack attacks = 1;
    repeated KillChainPhase kill_chain = 2;
    repeated Observable observables = 3;
    optional string product_uid = 4;
    optional string type = 5;
    optional string type_name = 6;
    optional int64 type_uid = 7;
    string uid = 8;
}

// AffectedCode is an OSF object
// defined in ocsf objects/affected_code.json
//
// The Affected Code object describes details about a code block identified as
// vulnerable.
message AffectedCode {
    optional int32 end_line = 1;
    File file = 2;
    User owner = 3;
    Remediation remediation = 4;
    optional int32 start_line = 5;
}

// AffectedPackage is an OSF object
// defined in ocsf objects/affected_package.json
//
// The Affected Package object describes details about a software package
// identified as affected by a vulnerability/vulnerabilities.
message AffectedPackage {
    optional string architecture = 1;
    optional int32 epoch = 2;
    optional string fixed_in_version = 3;
    optional string license = 4;
    string name = 5;
    optional string package_manager = 6;
    optional string path = 7;
    optional string purl = 8;
    optional string release = 9;
    Remediation remediation = 10;
    string version = 11;
}

// Cwe is an OSF object
// defined in ocsf objects/cwe.json
//
// The CWE object represents a weakness in a software system that can be
// exploited by a threat actor to perform an attack. The CWE object is based
// on the <a target='_blank' href='https://cwe.mitre.org/'>Common Weakness
// Enumeration (CWE)</a> catalog.
message Cwe {
    optional string caption = 1;
    optional string src_url = 2;
    string uid = 3;
}

// Package is an OSF object
// defined in ocsf objects/package.json
//
// The Software Package object describes details about a software package.
// Defined by D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:SoftwarePackage/'>d3f:SoftwarePackage</a>.
message Package {
    optional string architecture = 1;
    optional int32 epoch = 2;
    optional string license = 3;
    string name = 4;
    optional string purl = 5;
    optional string release = 6;
    string version = 7;
}

// LdapPerson is an OSF object
// defined in ocsf objects/ldap_person.json
//
// The additional LDAP attributes that describe a person.
message LdapPerson {
    optional string cost_center = 1;
    optional int64 created_time = 2;
    optional google.protobuf.Timestamp created_time_dt = 3;
    optional int64 deleted_time = 4;
    optional google.protobuf.Timestamp deleted_time_dt = 5;
    repeated string email_addrs = 6;
    optional string employee_uid = 7;
    optional string given_name = 8;
    optional int64 hire_time = 9;
    optional google.protobuf.Timestamp hire_time_dt = 10;
    optional string job_title = 11;
    repeated string labels = 12;
    optional int64 last_login_time = 13;
    optional google.protobuf.Timestamp last_login_time_dt = 14;
    optional string ldap_cn = 15;
    optional string ldap_dn = 16;
    optional int64 leave_time = 17;
    optional google.protobuf.Timestamp leave_time_dt = 18;
    Location location = 19;
    User manager = 20;
    optional int64 modified_time = 21;
    optional google.protobuf.Timestamp modified_time_dt = 22;
    optional string office_location = 23;
    optional string surname = 24;
}

// AutonomousSystem is an OSF object
// defined in ocsf objects/autonomous_system.json
//
// An autonomous system (AS) is a collection of connected Internet Protocol
// (IP) routing prefixes under the control of one or more network operators on
// behalf of a single administrative entity or domain that presents a common,
// clearly defined routing policy to the internet.
message AutonomousSystem {
    optional string name = 1;
    optional int32 number = 2;
}

// HttpHeader is an OSF object
// defined in ocsf objects/http_header.json
//
// TThe HTTP Header object represents the headers sent in an HTTP request or
// response. HTTP headers are key-value pairs that convey additional
// information about the HTTP message, including details about the content,
// caching, authentication, encoding, and other aspects of the communication.
message HttpHeader {
    string name = 1;
    string value = 2;
}

// EndpointConnection is an OSF object
// defined in ocsf objects/endpoint_connection.json
//
// The Endpoint Connection object contains information detailing a connection
// attempt to an endpoint.
message EndpointConnection {
    optional int32 code = 1;
    NetworkEndpoint network_endpoint = 2;
}

// Metric is an OSF object
// defined in ocsf objects/metric.json
//
// The Metric object defines a simple name/value pair entity for a metric.
message Metric {
    string name = 1;
    string value = 2;
}

// TlsExtension is an OSF object
// defined in ocsf objects/tls_extension.json
//
// The TLS Extension object describes additional attributes that extend the
// base Transport Layer Security (TLS) object.
message TlsExtension {
    enum TypeId {
        TYPE_ID_SERVER_NAME                            = 0;  // The Server Name Indication
                                                             // extension.
        TYPE_ID_MAXIMUM_FRAGMENT_LENGTH                = 1;  // The Maximum Fragment
                                                             // Length Negotiation
                                                             // extension.
        TYPE_ID_STATUS_REQUEST                         = 5;  // The Certificate Status
                                                             // Request extension.
        TYPE_ID_SUPPORTED_GROUPS                       = 10; // The Supported Groups
                                                             // extension.
        TYPE_ID_SIGNATURE_ALGORITHMS                   = 13; // The Signature Algorithms
                                                             // extension.
        TYPE_ID_USE_SRTP                               = 14; // The Use SRTP data
                                                             // protection extension.
        TYPE_ID_HEARTBEAT                              = 15; // The Heartbeat extension.
        TYPE_ID_APPLICATION_LAYER_PROTOCOL_NEGOTIATION = 16; // The Application-Layer
                                                             // Protocol Negotiation
                                                             // extension.
        TYPE_ID_SIGNED_CERTIFICATE_TIMESTAMP           = 18; // The Signed Certificate
                                                             // Timestamp extension.
        TYPE_ID_CLIENT_CERTIFICATE_TYPE                = 19; // The Client Certificate
                                                             // Type extension.
        TYPE_ID_SERVER_CERTIFICATE_TYPE                = 20; // The Server Certificate
                                                             // Type extension.
        TYPE_ID_PADDING                                = 21; // The Padding extension.
        TYPE_ID_PRE_SHARED_KEY                         = 41; // The Pre Shared Key
                                                             // extension.
        TYPE_ID_EARLY_DATA                             = 42; // The Early Data extension.
        TYPE_ID_SUPPORTED_VERSIONS                     = 43; // The Supported Versions
                                                             // extension.
        TYPE_ID_COOKIE                                 = 44; // The Cookie extension.
        TYPE_ID_PSK_KEY_EXCHANGE_MODES                 = 45; // The Pre-Shared Key Exchange
                                                             // Modes extension.
        TYPE_ID_CERTIFICATE_AUTHORITIES                = 47; // The Certificate
                                                             // Authorities extension.
        TYPE_ID_OID_FILTERS                            = 48; // The OID Filters extension.
        TYPE_ID_POST_HANDSHAKE_AUTH                    = 49; // The Post-Handshake Client
                                                             // Authentication extension.
        TYPE_ID_SIGNATURE_ALGORITHMS_CERT              = 50; // The Signature Algorithms
                                                             // extension.
        TYPE_ID_KEY_SHARE                              = 51; // The Key Share extension.
        TYPE_ID_OTHER                                  = 99; // The type is not mapped.
                                                             // See the <code>type</code>
                                                             // attribute, which contains
                                                             // a data source specific
                                                             // value.
    }
    optional google.protobuf.Value data = 1;
    optional string type = 2;
    TypeId type_id = 3;
}

// San is an OSF object
// defined in ocsf objects/san.json
//
// The Subject Alternative name (SAN) object describes a SAN secured by a
// digital certificate
message San {
    string name = 1;
    string type = 2;
}

// RpcInterface is an OSF object
// defined in ocsf objects/rpc_interface.json
//
// The RPC Interface represents the remote procedure call interface used in
// the DCE/RPC session.
message RpcInterface {
    optional int32 ack_reason = 1;
    optional int32 ack_result = 2;
    string uuid = 3;
    string version = 4;
}

// Rule is an OSF object
// defined in ocsf objects/rule.json
//
// The Rule object describes characteristics of a rule associated with a
// policy or an event.
message Rule {
    optional string category = 1;
    optional string desc = 2;
    optional string name = 3;
    optional string type = 4;
    optional string uid = 5;
    optional string version = 6;
}

// Feature is an OSF object
// defined in ocsf objects/feature.json
//
// The Feature object provides information about the software product feature
// that generated a specific event. It encompasses details related to the
// capabilities, components, user interface (UI) design, and performance
// upgrades associated with the feature.
message Feature {
    optional string name = 1;
    optional string uid = 2;
    optional string version = 3;
}

// KeyboardInfo is an OSF object
// defined in ocsf objects/keyboard_info.json
//
// The Keyboard Information object contains details and attributes related to
// a computer or device keyboard. It encompasses information that describes
// the characteristics, capabilities, and configuration of the keyboard.
message KeyboardInfo {
    optional int32 function_keys = 1;
    optional string ime = 2;
    optional string keyboard_layout = 3;
    optional int32 keyboard_subtype = 4;
    optional string keyboard_type = 5;
}

// Cvss is an OSF object
// defined in ocsf objects/cvss.json
//
// The Common Vulnerability Scoring System (<a target='_blank'
// href='https://www.first.org/cvss/'>CVSS</a>) object provides a way to
// capture the principal characteristics of a vulnerability and produce a
// numerical score reflecting its severity.
message Cvss {
    double base_score = 1;
    optional string depth = 2;
    repeated Metric metrics = 3;
    optional double overall_score = 4;
    optional string severity = 5;
    optional string vector_string = 6;
    string version = 7;
}

// Epss is an OSF object
// defined in ocsf objects/epss.json
//
// The Exploit Prediction Scoring System (EPSS) object describes the estimated
// probability a vulnerability will be exploited. EPSS is a community-driven
// effort to combine descriptive information about vulnerabilities (CVEs) with
// evidence of actual exploitation in-the-wild. (<a target='_blank'
// href='https://www.first.org/epss/'>EPSS</a>).
message Epss {
    optional int64 created_time = 1;
    optional google.protobuf.Timestamp created_time_dt = 2;
    optional double percentile = 3;
    string score = 4;
    optional string version = 5;
}
