
root.activity_name = "Create"
root.activity_id = 1
root.category_name = "Findings"
root.category_uid = 2
root.class_name = "Vulnerability Finding"
root.class_uid = 2002

root.device.hostname = this.output.asset.hostname 
root.device.mac = if this.output.asset.exists("mac_address") {this.asset.mac_address} else {deleted()}
root.device.os.name = this.output.asset.operating_system.index(0) | deleted()
root.device.os.type_id = 0
root.device.domain = this.output.asset.fqdn
root.device.ip = this.output.asset.ipv4
root.device.uid = this.output.asset.uuid
root.device.type_id = 0

root.finding_info.created_time = this.output.indexed.ts_unix_micro() #
root.finding_info.created_time_dt = this.output.indexed 
root.finding_info.data_sources = [this.source.function]
root.finding_info.desc = this.output.plugin.description
root.finding_info.first_seen_time = this.output.first_found.ts_unix_micro() 
root.finding_info.first_seen_time_dt = this.output.first_found
root.finding_info.last_seen_time = this.output.last_found.ts_unix_micro() 
root.finding_info.last_seen_time_dt = this.output.last_found 
root.finding_info.title = this.output.plugin.name
root.finding_info.uid = uuid_v4()
        
root.message = this.output.plugin.synopsis

root.metadata.log_provider = this.output.plugin.source
root.metadata.log_name = this.output.plugin.name
root.metadata.version = "1.2.0"
root.metadata.product.cpe_name = this.output.plugin.cpe.0 | deleted()
root.metadata.product.version = this.output.plugin.version
root.metadata.product.name = this.output.plugin.name
root.metadata.product.vendor_name = "Tenable"
root.metadata.uid = this.scan.uuidd
root.metadata.product.feature.name = this.output.eventCategory 
root.metadata.profiles = ["host","datetime"]

root.raw_data = this.output.output

root.resource.agent_list.uid = this.output.asset.agent_uuid | deleted()
root.resource.type = this.output.asset.device_type
root.resource.uid = this.output.asset.uuid

root.severity = match this.output.plugin.risk_factor {
    "info" => "Informational"
    "medium" => "Medium"
}
root.severity_id = match this.output.plugin.risk_factor {
    "info" => 1
    "medium" => 3
}
root.start_time = this.output.first_found.ts_unix_micro()
root.start_time_dt = this.output.first_found

root.time = this.output.indexed.ts_unix_micro() 
root.time_dt = this.output.indexed 

root.vulnerabilities.is_exploit_available = this.output.plugin.exploit_available
root.vulnerabilities.first_seen_time = this.output.first_found.ts_unix_micro() | deleted()
root.vulnerabilities.first_seen_time_dt = this.output.first_found | deleted()
root.vulnerabilities.fix_available = this.output.plugin.has_patch
root.vulnerabilities.last_seen_time = this.output.plugin.last_found.ts_unix_micro() | deleted()
root.vulnerabilities.last_seen_time_dt = this.output.plugin.last_found | deleted()
root.vulnerabilities.cve.uid = this.output.plugin.cve | "N/A"
# this is only capturing cvss3 do we need cvss2 also ?  
root.vulnerabilities.cve.cvss.base_score = this.output.plugin.cvss3_base_score | 0
root.vulnerabilities.cve.cvss.depth = match {
        this.output.plugin.exists("cvss3_base_score") => "Base"
        this.output.plugin.exists("cvss3_temporal_vector") && this.output.plugin.cvss3_temporal_vector.length() > 3 => "Temporal"  
    }
# root.vulnerabilities.cve.cvss.metrics = match {
#          this.plugin.exists("cvss3_vector") => this.plugin.cvss3_vector.without("raw") this needs restructuring 
#     }
root.vulnerabilities.cve.cvss.severity = if this.output.plugin.exists("cvss3_base_score") { match {
        this.output.plugin.cvss3_base_score <= 3.9 => "Low"  
        this.output.plugin.cvss3_base_score <= 6.9 => "medium"
        this.output.plugin.cvss3_base_score <= 8.9 => "high"
        this.output.plugin.cvss3_base_score >= 8.9 => "Critical"
    }} else {"None"}
    
root.vulnerabilities.cve.cvss.vector_string = match {
        this.output.plugin.cvss3_vector.exists("raw") => this.output.plugin.cvss3_vector.raw
    }
root.vulnerabilities.cve.cvss.version = "3.1"

   #Add array structure 
root.vulnerabilities.cve.cvss = [root.vulnerabilities.cve.cvss]
root.vulnerabilities = [root.vulnerabilities]

root.unmapped = this.without(
   "last_found",
   "first_found",
   "plugin.has_patch",
   "plugin.exploit_available",
   "state",
   "severity_id",
   "asset.uuid",
   "asset.device_type",
   "asset.agent_uuid",
   "output",
   "plugin.cpe",
   "plugin.synopsis",
   "scan.uuid",
   "plugin.name",
   "plugin.id",
   "plugin.description",
   "source",
   "scan.started_at",
   "indexed",
   "asset.hostname",
   "asset.mac_address",
   "asset.operating_system",
   "asset.fqdn",
   "asset.ip",
   "asset.uuid",
   "asset.ipv4",
   "plugin.cvss3_vector",
   "plugin.cvss3_temporal_vector",
   "plugin.cvss3_base_score",
   "plugin.version",
   )
   
   observables = root.without("unmapped").with("device.ip", "device.hostname", "device.mac").( item -> { 
    "a": match {item.device.exists("hostname") => {"name": "device.hostname", "type": "User", "type_id": 1, "value": item.device.hostname}},
    "b": match {item.device.exists("ip") => {"name": "device.ip", "type": "IP Address", "type_id": 2, "value": item.device.ip}},
    "c": match {item.device.exists("mac") => {"name": "device.mac", "type": "MAC Address", "type_id": 3, "value": item.device.mac}},
    }).values()
   